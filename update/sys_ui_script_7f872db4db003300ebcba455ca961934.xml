<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <name>x_317887_amazon.app</name>
        <script>webpackJsonp([0],[&#13;
/* 0 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var core_1 = __webpack_require__(1);&#13;
	var platform_browser_dynamic_1 = __webpack_require__(19);&#13;
	var app_module_1 = __webpack_require__(23);&#13;
	core_1.enableProdMode();&#13;
	var platform = platform_browser_dynamic_1.platformBrowserDynamic();&#13;
	platform.bootstrapModule(app_module_1.AppModule);&#13;
&#13;
&#13;
/***/ }),&#13;
/* 1 */,&#13;
/* 2 */,&#13;
/* 3 */,&#13;
/* 4 */,&#13;
/* 5 */,&#13;
/* 6 */,&#13;
/* 7 */,&#13;
/* 8 */,&#13;
/* 9 */,&#13;
/* 10 */,&#13;
/* 11 */,&#13;
/* 12 */,&#13;
/* 13 */,&#13;
/* 14 */,&#13;
/* 15 */,&#13;
/* 16 */,&#13;
/* 17 */,&#13;
/* 18 */,&#13;
/* 19 */,&#13;
/* 20 */,&#13;
/* 21 */,&#13;
/* 22 */,&#13;
/* 23 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var __decorate = (this &amp;&amp; this.__decorate) || function (decorators, target, key, desc) {&#13;
	    var c = arguments.length, r = c &lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);&#13;
	    else for (var i = decorators.length - 1; i &gt;= 0; i--) if (d = decorators[i]) r = (c &lt; 3 ? d(r) : c &gt; 3 ? d(target, key, r) : d(target, key)) || r;&#13;
	    return c &gt; 3 &amp;&amp; r &amp;&amp; Object.defineProperty(target, key, r), r;&#13;
	};&#13;
	var __metadata = (this &amp;&amp; this.__metadata) || function (k, v) {&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.metadata === "function") return Reflect.metadata(k, v);&#13;
	};&#13;
	var core_1 = __webpack_require__(1);&#13;
	var forms_1 = __webpack_require__(24);&#13;
	var platform_browser_1 = __webpack_require__(21);&#13;
	var app_routing_1 = __webpack_require__(28);&#13;
	var ng_bootstrap_1 = __webpack_require__(102);&#13;
	var ng2_datetime_1 = __webpack_require__(105);&#13;
	var agent_state_component_1 = __webpack_require__(108);&#13;
	var call_control_component_1 = __webpack_require__(111);&#13;
	var login_component_1 = __webpack_require__(114);&#13;
	var master_component_1 = __webpack_require__(72);&#13;
	var index_component_1 = __webpack_require__(57);&#13;
	var call_result_component_1 = __webpack_require__(75);&#13;
	var call_info_component_1 = __webpack_require__(78);&#13;
	var call_var_component_1 = __webpack_require__(81);&#13;
	var call_wrap_component_1 = __webpack_require__(84);&#13;
	var queue_info_component_1 = __webpack_require__(117);&#13;
	var team_info_component_1 = __webpack_require__(120);&#13;
	var business_fields_component_1 = __webpack_require__(87);&#13;
	var change_number_component_1 = __webpack_require__(90);&#13;
	var lcm_outcome_component_1 = __webpack_require__(92);&#13;
	var call_ivr_component_1 = __webpack_require__(123);&#13;
	var non_pewc_component_1 = __webpack_require__(94);&#13;
	var page_not_found_component_1 = __webpack_require__(97);&#13;
	var app_service_1 = __webpack_require__(58);&#13;
	var app_http_service_1 = __webpack_require__(126);&#13;
	var call_incident_component_1 = __webpack_require__(99); //Added by Prakash&#13;
	var AppModule = (function () {&#13;
	    function AppModule() {&#13;
	    }&#13;
	    AppModule = __decorate([&#13;
	        //Added by Prakash&#13;
	        core_1.NgModule({&#13;
	            imports: [platform_browser_1.BrowserModule, app_routing_1.routing, forms_1.FormsModule, ng_bootstrap_1.NgbModule.forRoot(), ng2_datetime_1.NKDatetimeModule],&#13;
	            declarations: [&#13;
	                index_component_1.IndexComponent, page_not_found_component_1.PageNotFoundComponent, login_component_1.LoginComponent,&#13;
	                master_component_1.MasterComponent, agent_state_component_1.AgentStateComponent, call_control_component_1.CallControlComponent,&#13;
	                call_result_component_1.CallResultComponent, queue_info_component_1.QueueInfoComponent, team_info_component_1.TeamInfoComponent,&#13;
	                call_info_component_1.CallInfoComponent, call_var_component_1.CallVarComponent, call_wrap_component_1.CallWrapComponent,&#13;
	                business_fields_component_1.BusinessFieldsComponent, change_number_component_1.ChangeNumberComponent, lcm_outcome_component_1.LCMOutcomeComponent, call_ivr_component_1.IVRComponent,&#13;
	                non_pewc_component_1.NonPEWCComponent, call_incident_component_1.CallIncidentComponent //Added by Prakash&#13;
	            ],&#13;
	            providers: [&#13;
	                app_routing_1.appRoutingProviders,&#13;
	                app_service_1.SFAppService,&#13;
	                app_http_service_1.HttpAjaxService&#13;
	            ],&#13;
	            bootstrap: [index_component_1.IndexComponent]&#13;
	        }), &#13;
	        __metadata('design:paramtypes', [])&#13;
	    ], AppModule);&#13;
	    return AppModule;&#13;
	}());&#13;
	exports.AppModule = AppModule;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 24 */,&#13;
/* 25 */,&#13;
/* 26 */,&#13;
/* 27 */,&#13;
/* 28 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var router_1 = __webpack_require__(29);&#13;
	var index_component_1 = __webpack_require__(57);&#13;
	var master_component_1 = __webpack_require__(72);&#13;
	var call_result_component_1 = __webpack_require__(75);&#13;
	var call_info_component_1 = __webpack_require__(78);&#13;
	var call_var_component_1 = __webpack_require__(81);&#13;
	var call_wrap_component_1 = __webpack_require__(84);&#13;
	var business_fields_component_1 = __webpack_require__(87);&#13;
	var change_number_component_1 = __webpack_require__(90);&#13;
	var lcm_outcome_component_1 = __webpack_require__(92);&#13;
	var non_pewc_component_1 = __webpack_require__(94);&#13;
	var page_not_found_component_1 = __webpack_require__(97);&#13;
	var call_incident_component_1 = __webpack_require__(99); //Added by Prakash&#13;
	var appRoutes = [&#13;
	    { path: '', component: index_component_1.IndexComponent },&#13;
	    //{ path: 'login', component: LoginComponent },&#13;
	    {&#13;
	        path: 'master',&#13;
	        component: master_component_1.MasterComponent,&#13;
	        children: [&#13;
	            { path: '', redirectTo: 'cr', pathMatch: 'full' },&#13;
	            {&#13;
	                path: 'cr', component: call_result_component_1.CallResultComponent,&#13;
	                children: [&#13;
	                    { path: '', redirectTo: 'info', pathMatch: 'full' },&#13;
	                    { path: 'info', component: call_info_component_1.CallInfoComponent },&#13;
	                    { path: 'var', component: call_var_component_1.CallVarComponent },&#13;
	                    { path: 'wrap', component: call_wrap_component_1.CallWrapComponent },&#13;
	                    { path: 'bf', component: business_fields_component_1.BusinessFieldsComponent },&#13;
	                    { path: 'cn', component: change_number_component_1.ChangeNumberComponent },&#13;
	                    { path: 'lcmoc', component: lcm_outcome_component_1.LCMOutcomeComponent },&#13;
	                    { path: 'pewc', component: non_pewc_component_1.NonPEWCComponent },&#13;
	                    { path: 'incident', component: call_incident_component_1.CallIncidentComponent } //Added by Prakash&#13;
	                ]&#13;
	            },&#13;
	        ]&#13;
	    },&#13;
	    { path: '**', component: page_not_found_component_1.PageNotFoundComponent }&#13;
	];&#13;
	exports.appRoutingProviders = [];&#13;
	exports.routing = router_1.RouterModule.forRoot(appRoutes);&#13;
&#13;
&#13;
/***/ }),&#13;
/* 29 */,&#13;
/* 30 */,&#13;
/* 31 */,&#13;
/* 32 */,&#13;
/* 33 */,&#13;
/* 34 */,&#13;
/* 35 */,&#13;
/* 36 */,&#13;
/* 37 */,&#13;
/* 38 */,&#13;
/* 39 */,&#13;
/* 40 */,&#13;
/* 41 */,&#13;
/* 42 */,&#13;
/* 43 */,&#13;
/* 44 */,&#13;
/* 45 */,&#13;
/* 46 */,&#13;
/* 47 */,&#13;
/* 48 */,&#13;
/* 49 */,&#13;
/* 50 */,&#13;
/* 51 */,&#13;
/* 52 */,&#13;
/* 53 */,&#13;
/* 54 */,&#13;
/* 55 */,&#13;
/* 56 */,&#13;
/* 57 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var __decorate = (this &amp;&amp; this.__decorate) || function (decorators, target, key, desc) {&#13;
	    var c = arguments.length, r = c &lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);&#13;
	    else for (var i = decorators.length - 1; i &gt;= 0; i--) if (d = decorators[i]) r = (c &lt; 3 ? d(r) : c &gt; 3 ? d(target, key, r) : d(target, key)) || r;&#13;
	    return c &gt; 3 &amp;&amp; r &amp;&amp; Object.defineProperty(target, key, r), r;&#13;
	};&#13;
	var __metadata = (this &amp;&amp; this.__metadata) || function (k, v) {&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.metadata === "function") return Reflect.metadata(k, v);&#13;
	};&#13;
	var core_1 = __webpack_require__(1);&#13;
	var router_1 = __webpack_require__(29);&#13;
	var app_service_1 = __webpack_require__(58);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var IndexComponent = (function () {&#13;
	    function IndexComponent(router, sfAppService, activateRoute) {&#13;
	        var _this = this;&#13;
	        this.router = router;&#13;
	        this.sfAppService = sfAppService;&#13;
	        this.activateRoute = activateRoute;&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.evntLst = new Array();&#13;
	        this.canRedirect = true;&#13;
	        this.isClassic = true;&#13;
	        //console.log('%c REGISTER ', 'color:#AA8000'); &#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.AgentDetail, function (type, data) {&#13;
	            _this.setState(data);&#13;
	        }));&#13;
	        this.setState(this.sfAppService.AgentDetail);&#13;
	        console.log('IndexComponent Url -', window.location.search);&#13;
	        this.isClassic = this.sfAppService.IsClassic;&#13;
	    }&#13;
	    IndexComponent.prototype.ngOnDestroy = function () {&#13;
	        for (var _i = 0, _a = this.evntLst; _i &lt; _a.length; _i++) {&#13;
	            var id = _a[_i];&#13;
	            console.log('IndexComponent Unregister event');&#13;
	            this.evnt.UnRegisterEvent(id);&#13;
	        }&#13;
	    };&#13;
	    IndexComponent.prototype.setState = function (agent) {&#13;
	        if (agent.State !== 'LOGOUT' &amp;&amp; this.canRedirect === true) {&#13;
	            this.canRedirect = false;&#13;
	            this.router.navigate(['/master']);&#13;
	            setTimeout(function () {&#13;
	                //console.log('routing to /master')      &#13;
	                //this.router.navigate(['/master']);&#13;
	            }, 1000);&#13;
	        }&#13;
	        else if (agent.State === 'LOGOUT') {&#13;
	            this.canRedirect = true;&#13;
	            this.router.navigate(['/master']);&#13;
	        }&#13;
	    };&#13;
	    IndexComponent = __decorate([&#13;
	        core_1.Component({&#13;
	            selector: 'App',&#13;
	            template: __webpack_require__(71)&#13;
	        }), &#13;
	        __metadata('design:paramtypes', [(typeof (_a = typeof router_1.Router !== 'undefined' &amp;&amp; router_1.Router) === 'function' &amp;&amp; _a) || Object, (typeof (_b = typeof app_service_1.SFAppService !== 'undefined' &amp;&amp; app_service_1.SFAppService) === 'function' &amp;&amp; _b) || Object, (typeof (_c = typeof router_1.ActivatedRoute !== 'undefined' &amp;&amp; router_1.ActivatedRoute) === 'function' &amp;&amp; _c) || Object])&#13;
	    ], IndexComponent);&#13;
	    return IndexComponent;&#13;
	    var _a, _b, _c;&#13;
	}());&#13;
	exports.IndexComponent = IndexComponent;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 58 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var core_1 = __webpack_require__(1);&#13;
	var sn_method_1 = __webpack_require__(59);&#13;
	var sf_method_1 = __webpack_require__(65);&#13;
	var Models = __webpack_require__(61);&#13;
	var app_config_1 = __webpack_require__(62);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var browserTab_1 = __webpack_require__(67);&#13;
	var storage_1 = __webpack_require__(66);&#13;
	var persistentList_1 = __webpack_require__(68);&#13;
	var logger_1 = __webpack_require__(63);&#13;
	var amazon_method_1 = __webpack_require__(69);&#13;
	core_1.Injectable();&#13;
	var SFAppService = (function () {&#13;
	    function SFAppService() {&#13;
	        var _this = this;&#13;
	        //expose the data from here &#13;
	        this.logger = new logger_1.CustomLogger('AppService');&#13;
	        this.IsAgentLoggedIn = false;&#13;
	        this.store = storage_1.default.getInstance();&#13;
	        this.ServiceNowDomainUrl = app_config_1.default.ServiceNowDomainUrl;&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.dt = new validation_1.DateTimeProcess();&#13;
	        this.tab = browserTab_1.default.getInstance();&#13;
	        this.v = new validation_1.Validation();&#13;
	        this.jobList = new persistentList_1.default('AppService');&#13;
	        this.jobsProcessing = {};&#13;
	        this.currentstate = "";&#13;
	        this.isTeamLoaded = false;&#13;
	        this.isSkillLoaded = false;&#13;
	        this.canFetchConfiguration = false;&#13;
	        this.enablecontactbutton = false;&#13;
	        this.eventLst = new Array();&#13;
	        this.searchCallId = {};&#13;
	        this.AgentDetail = new Models.Agent();&#13;
	        this.CallDetails = new Array();&#13;
	        this.Call = null;&#13;
	        this.CallResults = new Array();&#13;
	        this.NotReadyReasonCode = new Array();&#13;
	        this.LogoutReasonCode = new Array();&#13;
	        this.WrapupReasonCode = new Array();&#13;
	        this.SystemInformation = new Models.SystemInfo();&#13;
	        this.Teams = new Array();&#13;
	        this.Queues = new Array();&#13;
	        this.AccountNumber = '';&#13;
	        this.CallId = '';&#13;
	        this.CCPURL = app_config_1.default.CCPURL;&#13;
	        this.CRM = app_config_1.default.CRM;&#13;
	        //Added by Prakash&#13;
	        this.incident = null;&#13;
	        this.currentCallerSid = null;&#13;
	        this.currentSelectedIncident = null;&#13;
	        ////Added By Manoj&#13;
	        this.agentobj = null;&#13;
	        this.contactobj = null;&#13;
	        this.connectobj = null;&#13;
	        this.agentdetails = "";&#13;
	        //public Awscallinfo: Models.Awscallinfo;&#13;
	        this.ANI = "";&#13;
	        this.IncidentNo = "";&#13;
	        this.ContactId = "";&#13;
	        this.queue = "";&#13;
	        // public agntst = new AgentStateComponent();   &#13;
	        this.DialedIvrNumber = '';&#13;
	        this.noWrapupState = ['OUTBOUND_DIRECT_PREVIEW', 'OUTBOUND_PREVIEW'];&#13;
	        this.SFObjectArray = [{ type: "Contact", name: "WhoId" }, { type: "Lead", name: "WhoId" }, { type: "Account", name: "WhatId" }, { type: "Case", name: "WhatId" }];&#13;
	        //NBC&#13;
	        this.TopicList = {&#13;
	            'LoginResponse': 'SERVICE_LOGINRESPONSE',&#13;
	            'AgentDetail': 'SERVICE_AGENTDETAIL',&#13;
	            'CallDetails': 'SERVICE_CALLDETAILs',&#13;
	            'NotReadyResonCode': 'SERVICE_NOTREADYREASONCODE',&#13;
	            'LogoutReasonCode': 'SERVICE_LOGOUTREASONCODE',&#13;
	            'CurrentCallDetail': 'SERVICE_CURRENTCALLDETAIL',&#13;
	            'CurrentCallResult': 'SERVICE_CURRENTCALLRESULT',&#13;
	            'TeamsDetail': 'SERVICE_TEAMSDETAIL',&#13;
	            'QueuesDetail': 'SERVICE_QUEUEDETAIL',&#13;
	            'WrapupReasonCode': 'SERVICE_WRAPUPREASONCODE',&#13;
	            'ClickToDial': 'SERVICE_CLICKTODIAL',&#13;
	            'SystemMessage': 'SERVICE_SYSTEMMESSAGE',&#13;
	            'AutoConference': 'SERVICE_AUTOCONFERENCE',&#13;
	            'IvrButtonStatus': 'SERVICE_IVRBUTTONSTATUS',&#13;
	            'OneTouchCall': 'SERVICE_ONETOUCHCALL',&#13;
	            'WrapupIncidentSelect': 'SERVICE_WRAPUPINCIDENTSELECT',&#13;
	            'AgentState': 'SERVICE_AGENTSTATE'&#13;
	        };&#13;
	        this.ac = new amazon_method_1.AmazonConnect(this);&#13;
	        if (this.CRM == "SF") {&#13;
	            this.CRMObj = new sf_method_1.SfConnector(this);&#13;
	        }&#13;
	        else if (this.CRM == "SN") {&#13;
	            this.CRMObj = new sn_method_1.SnConnector(this);&#13;
	        }&#13;
	        this.eventLst.push(this.evnt.RegisterEvent(Models.Topics.LoginResponse, function (type, data) {&#13;
	            _this.processChangeEvent(type, data);&#13;
	        }));&#13;
	        this.eventLst.push(this.evnt.RegisterEvent(Models.Topics.AgentDetail, function (type, data, any) {&#13;
	            _this.processChangeEvent(type, data);&#13;
	        }));&#13;
	        this.eventLst.push(this.evnt.RegisterEvent(Models.Topics.SystemMessage, function (type, data) {&#13;
	            _this.processChangeEvent(type, data);&#13;
	        }));&#13;
	        this.eventLst.push(this.evnt.RegisterEvent(Models.Topics.SystemInformation, function (type, data, any) {&#13;
	            _this.processChangeEvent(type, data);&#13;
	        }));&#13;
	        this.eventLst.push(this.evnt.RegisterEvent(Models.Topics.CallDetail, function (type, data, any) {&#13;
	            _this.processChangeEvent(type, data);&#13;
	        }));&#13;
	        this.eventLst.push(this.evnt.RegisterEvent(Models.Topics.NotReadyReasonCode, function (type, data, any) {&#13;
	            _this.processChangeEvent(type, data);&#13;
	        }));&#13;
	        this.eventLst.push(this.evnt.RegisterEvent(Models.Topics.TeamInformation, function (type, data, any) {&#13;
	            _this.processChangeEvent(type, data);&#13;
	        }));&#13;
	        this.eventLst.push(this.evnt.RegisterEvent(Models.Topics.CallResult, function (type, data, any) {&#13;
	            _this.processChangeEvent(type, data);&#13;
	        }));&#13;
	        this.store.SetData("CCPURL", this.CCPURL);&#13;
	        if (SFAppService._instance) {&#13;
	            console.log('AppService instance exist returning the existing instance');&#13;
	            return SFAppService._instance;&#13;
	        }&#13;
	        //issue command to fetch or clear data for finesse methods and sf methods.&#13;
	        //this.cf.&#13;
	        this.tab.OnPollingWindow(function () {&#13;
	            console.log("&gt;&gt;&gt; APP SERVICE -  ON POLLING WINDOW");&#13;
	        });&#13;
	        //Check if agent has logged from new session &#13;
	        var prevSessionId = this.store.GetData('SF_SESSIONID');&#13;
	        var currSessionId = this.getQueryVariable(window.location.search, 'nonce');&#13;
	        console.log('AppService - Agent Session id : ', prevSessionId, '  -  ', currSessionId);&#13;
	        if (prevSessionId === currSessionId) {&#13;
	            this.ac.OnInit(false);&#13;
	            this.CRMObj.OnInit(false); //Added by Prakash&#13;
	        }&#13;
	        else {&#13;
	            this.jobList.Clear();&#13;
	            this.ac.OnInit(true);&#13;
	            this.CRMObj.OnInit(true); //Added by Prakash&#13;
	        }&#13;
	        //Should get usersetting and load it in the login module. &#13;
	        this.store.SetData('SF_SESSIONID', currSessionId);&#13;
	        setTimeout(function () {&#13;
	            _this.processJobs();&#13;
	        }, 100);&#13;
	    }&#13;
	    SFAppService.prototype.getQueryVariable = function (query, variable) {&#13;
	        query = query.substring(1);&#13;
	        var vars = query.split("&amp;");&#13;
	        for (var i = 0; i &lt; vars.length; i++) {&#13;
	            var pair = vars[i].split("=");&#13;
	            if (pair[0] == variable) {&#13;
	                return pair[1];&#13;
	            }&#13;
	        }&#13;
	        return '';&#13;
	    };&#13;
	    SFAppService.prototype.UpdateCallResult = function (data) {&#13;
	        console.log('CallResult changed - ', data);&#13;
	        this.CRMObj.UpdateCallResultUIInfo(data);&#13;
	    };&#13;
	    SFAppService.prototype.ngOnDestroy = function () {&#13;
	        for (var _i = 0, _a = this.eventLst; _i &lt; _a.length; _i++) {&#13;
	            var id = _a[_i];&#13;
	            console.log('AppService Unregister event');&#13;
	            this.evnt.UnRegisterEvent(id);&#13;
	        }&#13;
	    };&#13;
	    SFAppService.prototype.ChangeAgentState = function (state) {&#13;
	        this.logger.Debug("State : " + state);&#13;
	        this.ac.changeAgentState(state);&#13;
	    };&#13;
	    SFAppService.prototype.AddJob = function (job) {&#13;
	        console.log('Adding Job: ' + job.id + ' | ' + job.type);&#13;
	        this.jobList.Add(job);&#13;
	    };&#13;
	    SFAppService.prototype.AddPollingWindowJob = function (job) {&#13;
	        if (this.tab.IsPollingWindow()) {&#13;
	            this.AddJob(job);&#13;
	        }&#13;
	    };&#13;
	    SFAppService.prototype.RemoveJob = function (job) {&#13;
	        console.log('Remove Job: ' + job.id);&#13;
	        this.jobList.Remove(job);&#13;
	        delete this.jobsProcessing[job.id];&#13;
	    };&#13;
	    SFAppService.prototype.setagentobj = function (agent, connect) {&#13;
	        this.agentobj = agent;&#13;
	        this.connectobj = connect;&#13;
	    };&#13;
	    SFAppService.prototype.ScreenpopOnIncidentId = function (IncidentNo, phno) {&#13;
	        this.CRMObj.ScreenpopOnIncidentId(IncidentNo, phno);&#13;
	    };&#13;
	    SFAppService.prototype.ScreenpopOnphno = function (phno) {&#13;
	        this.CRMObj.ScreenpopOnphno(phno);&#13;
	    };&#13;
	    SFAppService.prototype.AgentLogout = function () {&#13;
	        this.ac.AgentLogout();&#13;
	    };&#13;
	    SFAppService.prototype.AgentLogin = function (user, callback) {&#13;
	        this.ac.AgentLogout();&#13;
	    };&#13;
	    SFAppService.prototype.MakeCall = function (toAddress) {&#13;
	        this.ac.MakeCall(toAddress);&#13;
	    };&#13;
	    SFAppService.prototype.DoCallAction = function (action, data) {&#13;
	        if (data != null) {&#13;
	            this.logger.Debug('Agent Do Call Action : ' + action);&#13;
	            console.log("Agent Do Call Action : ", data);&#13;
	        }&#13;
	        switch (action) {&#13;
	            case 'ANSWER':&#13;
	                this.ac.AnswerCall(data.callId);&#13;
	                break;&#13;
	            case 'DROP':&#13;
	                this.ac.DropCall(data.callId);&#13;
	                break;&#13;
	            case 'HOLD':&#13;
	                this.ac.HoldCall(data.callId);&#13;
	                break;&#13;
	            case 'RETRIEVE':&#13;
	                this.ac.RetrieveCall(data.callId);&#13;
	                break;&#13;
	            case 'CONSULT':&#13;
	                this.ac.ConsultCall(data.callId, data.toAddress);&#13;
	                break;&#13;
	            case 'SST':&#13;
	                this.ac.DirectTransfer(data.callId, data.callState, data.agentId, data.userName);&#13;
	                break;&#13;
	            case 'TRANSFER':&#13;
	                this.ac.TransferCall(data.callId);&#13;
	                break;&#13;
	            case 'CONFERENCE':&#13;
	                this.ac.ConferenceCall(data.callId);&#13;
	                break;&#13;
	            case 'CONSULT_ACCEPT':&#13;
	                this.ac.AcceptConsultCall(data.callId);&#13;
	                break;&#13;
	            default:&#13;
	                console.log('AppService  action not processed ..', action);&#13;
	                break;&#13;
	        }&#13;
	    };&#13;
	    SFAppService.prototype.GetElapsedTime = function (time) {&#13;
	        return this.dt.SecondsToTime(time);&#13;
	    };&#13;
	    SFAppService.prototype.processChangeEvent = function (type, data) {&#13;
	        console.log('AppService processChangeEvent - ', type);&#13;
	        switch (type) {&#13;
	            case Models.Topics.AgentDetail:&#13;
	                //on agent detail received make a call for agent team information&#13;
	                this.onAgentDetailChanged(data);&#13;
	                break;&#13;
	            case Models.Topics.SystemInformation:&#13;
	                this.SystemInformation = data;&#13;
	                break;&#13;
	            case Models.Topics.CallDetail:&#13;
	                this.onCallDetailChanged(data);&#13;
	                break;&#13;
	            case Models.Topics.NotReadyReasonCode:&#13;
	                this.NotReadyReasonCode = data;&#13;
	                this.evnt.Broadcast(this.TopicList.NotReadyResonCode, this.NotReadyReasonCode);&#13;
	                break;&#13;
	            case Models.Topics.SystemMessage:&#13;
	                this.evnt.Broadcast(this.TopicList.SystemMessage, data);&#13;
	                break;&#13;
	            case Models.Topics.CallResult:&#13;
	                this.onCallResultChanged(data);&#13;
	                break;&#13;
	            default:&#13;
	                console.log('APP Service processChangeEvent type not processed :' + type);&#13;
	                break;&#13;
	        }&#13;
	    };&#13;
	    SFAppService.prototype.onAgentDetailChanged = function (agent) {&#13;
	        try {&#13;
	            console.log('%c APS onAgentDetailChanged() ', 'background:#FF334F; color:#FFF', agent);&#13;
	            var prevState = this.AgentDetail.State;&#13;
	            this.AgentDetail = agent;&#13;
	            this.store.SetData("Agent_State", agent.State);&#13;
	            this.logger.Debug("onAgentDetailChanged Agent State : " + this.AgentDetail.State + ' - Previous State : ' + prevState);&#13;
	            if (this.AgentDetail.State === "Available" || (this.AgentDetail.State === "Unavailable" &amp;&amp; this.v.IsNotNullOrUndefinedOjbect(this.AgentDetail.Reason))) {&#13;
	                this.incident = null;&#13;
	                this.currentCallerSid = null;&#13;
	                this.currentSelectedIncident = null;&#13;
	            }&#13;
	            var self = this;&#13;
	            if (this.AgentDetail.State === "Unavailable") {&#13;
	                setTimeout(function () {&#13;
	                    console.log("Making outbound call");&#13;
	                }, 5000);&#13;
	            }&#13;
	            this.evnt.Broadcast(this.TopicList.AgentDetail, agent);&#13;
	        }&#13;
	        catch (ex) {&#13;
	            this.logger.Error('OnAgentState Change Error : ' + ex);&#13;
	        }&#13;
	    };&#13;
	    SFAppService.prototype.onCallDetailChanged = function (calls) {&#13;
	        console.log('%c APS - onCallDetailChanged :', 'background:#FF334F; color:#FFF', calls);&#13;
	        var lstCallId = {};&#13;
	        this.CallDetails = calls;&#13;
	        if (this.CallDetails.length &gt; 0) {&#13;
	            if (this.Call === null || this.CallDetails.length === 1) {&#13;
	                this.Call = this.CallDetails[0];&#13;
	            }&#13;
	            else {&#13;
	                for (var i = 0; i &lt; this.CallDetails.length; i++) {&#13;
	                    if (this.CallDetails[i].Id == this.Call.Id) {&#13;
	                        this.Call = this.CallDetails[i];&#13;
	                        break;&#13;
	                    }&#13;
	                }&#13;
	            }&#13;
	        }&#13;
	        else {&#13;
	            this.Call = null;&#13;
	            this.setActiveCallResult();&#13;
	        }&#13;
	        this.evnt.Broadcast(this.TopicList.CurrentCallDetail, this.Call);&#13;
	        this.evnt.Broadcast(this.TopicList.CallDetails, this.CallDetails); // Bin Code &#13;
	    };&#13;
	    SFAppService.prototype.onCallResultChanged = function (callResults) {&#13;
	        console.log('%c AppService - onCallResultChanged : ', 'background:#777778; color:#FFF', callResults);&#13;
	        this.CallResults = callResults;&#13;
	        this.setActiveCallResult();&#13;
	    };&#13;
	    SFAppService.prototype.pushCallResult = function (call) {&#13;
	        this.CRMObj.processCallResult(call);&#13;
	    };&#13;
	    SFAppService.prototype.setActiveCallResult = function () {&#13;
	        if (this.CallResults.length &gt; 0 &amp;&amp; this.Call !== null) {&#13;
	            this.CurrentCallRes = this.CallResults[0];&#13;
	        }&#13;
	        else {&#13;
	            this.CurrentCallRes = null;&#13;
	        }&#13;
	        this.evnt.Broadcast(this.TopicList.CurrentCallResult, this.CurrentCallRes);&#13;
	    };&#13;
	    SFAppService.prototype.SetActiveCall = function (call) {&#13;
	        this.Call = call;&#13;
	        this.evnt.Broadcast(this.TopicList.CurrentCallDetail, this.Call);&#13;
	    };&#13;
	    SFAppService.prototype.processJobs = function () {&#13;
	        var _this = this;&#13;
	        var that = this;&#13;
	        if (this.tab.IsPollingWindow() === true) {&#13;
	            this.jobList.ForEach(function (i, job) {&#13;
	                try {&#13;
	                    // If the job is already being processed, do not run it again&#13;
	                    if (_this.jobsProcessing.hasOwnProperty(job.id)) {&#13;
	                        return false;&#13;
	                    }&#13;
	                    _this.logger.Debug('Executing Job: ' + job.id + ' | ' + job.type);&#13;
	                    switch (job.type) {&#13;
	                        case 'AgentLogin':&#13;
	                            _this.jobsProcessing[job.id] = true;&#13;
	                            //this.contactSearch(job);&#13;
	                            break;&#13;
	                        default:&#13;
	                    }&#13;
	                }&#13;
	                catch (ex) {&#13;
	                    console.log("Error processing job: ", ex.message);&#13;
	                    //   this.RemoveJob(job);&#13;
	                    return true;&#13;
	                }&#13;
	            });&#13;
	        }&#13;
	        setTimeout(function () {&#13;
	            _this.processJobs();&#13;
	        }, 100);&#13;
	    };&#13;
	    SFAppService._instance = new SFAppService();&#13;
	    return SFAppService;&#13;
	}());&#13;
	exports.SFAppService = SFAppService;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 59 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var models_1 = __webpack_require__(61);&#13;
	var app_config_1 = __webpack_require__(62);&#13;
	var logger_1 = __webpack_require__(63);&#13;
	var $ = __webpack_require__(64);&#13;
	var SnConnector = (function () {&#13;
	    function SnConnector(sfAppService) {&#13;
	        this.sfAppService = sfAppService;&#13;
	        this.logger = new logger_1.CustomLogger('ServiceNowMethod');&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.currentUISelectedIncident = null;&#13;
	        this.user = new models_1.UserCredentials();&#13;
	        this.logger.Info('ServiceNow method inititalize ...');&#13;
	    }&#13;
	    SnConnector.prototype.OnInit = function (clearStorage) {&#13;
	        this.logger.Info('OnInit clearStorage : ' + clearStorage);&#13;
	        if (window.addEventListener) {&#13;
	            window.addEventListener("message", topFrameListener);&#13;
	        }&#13;
	        var snComp = this;&#13;
	        function topFrameListener(event) {&#13;
	            if (event.origin.indexOf(app_config_1.default.ServiceNowDomainUrl) &gt; -1) {&#13;
	                console.log(event.data);&#13;
	                var type = event.data.type;&#13;
	                if (type === "LOGIN") {&#13;
	                    console.log(event.data.username);&#13;
	                    snComp.user.Username = event.data.username;&#13;
	                    snComp.user.Password = event.data.password;&#13;
	                    snComp.user.Extension = event.data.extension;&#13;
	                    snComp.sfAppService.AgentLogin(snComp.user, function (msg) {&#13;
	                        console.log('On Click Login : ' + snComp.user);&#13;
	                        console.log(msg);&#13;
	                    });&#13;
	                }&#13;
	                else if (type === "CLICK_CALL") {&#13;
	                    var callerid = String(event.data.data);&#13;
	                    console.log('CLICK_CALL Method called');&#13;
	                    snComp.makeOutboundCall(callerid);&#13;
	                }&#13;
	                else if (type === "CALLER_INCIDENTS") {&#13;
	                    var incidents = event.data.data;&#13;
	                    snComp.updateIncidents(incidents);&#13;
	                }&#13;
	                else if (type === "UI_INCIDENT_SELECT") {&#13;
	                    snComp.currentUISelectedIncident = event.data.data;&#13;
	                    snComp.updateWrapupIncident();&#13;
	                }&#13;
	            }&#13;
	            else {&#13;
	                return;&#13;
	            }&#13;
	        }&#13;
	    };&#13;
	    SnConnector.prototype.acceptcall = function (connect) {&#13;
	        parent.postMessage(connect, "*");&#13;
	    };&#13;
	    SnConnector.prototype.ScreenpopOnIncidentId = function (incident, phno) {&#13;
	        incident = 'INC' + incident;&#13;
	        console.log('SN METHOD : Open Incident : ' + incident);&#13;
	        parent.postMessage("OPEN_INCIDENT|" + incident + "|" + phno, "*");&#13;
	    };&#13;
	    SnConnector.prototype.ScreenpopOnphno = function (phno) {&#13;
	        this.logger.Info('Show Outbound AgentScreen : ' + phno);&#13;
	        var newForm = (app_config_1.default.openUserPageForNewUser) ? "sys_user.do" : "incident.do";&#13;
	        parent.postMessage("SHOW_OUTBOUND|" + phno + "|" + newForm, "*");&#13;
	    };&#13;
	    SnConnector.prototype.makeOutboundCall = function (callerid) {&#13;
	        console.log("Outbound Number : " + callerid);&#13;
	        this.sfAppService.MakeCall(callerid);&#13;
	    };&#13;
	    SnConnector.prototype.updateIncidents = function (incidents) {&#13;
	        var incFields = new Array();&#13;
	        $.each(incidents.result, function (i, inc) {&#13;
	            var field = new models_1.SNIncidentField();&#13;
	            field.Number = inc.number;&#13;
	            field.Sysid = inc.sys_id;&#13;
	            field.CreatedOn = inc.sys_created_on;&#13;
	            field.CreatedBy = inc.sys_created_by;&#13;
	            incFields.push(field);&#13;
	        });&#13;
	        //////////////&#13;
	        var allincidents = [];&#13;
	        for (var i = 0; i &lt; incidents.result.length; i++) {&#13;
	            allincidents.push({&#13;
	                Number: incidents.result[i].number,&#13;
	                Sysid: incidents.result[i].sys_id,&#13;
	                CreatedOn: incidents.result[i].sys_created_on,&#13;
	                CreatedBy: incidents.result[i].sys_created_by&#13;
	            });&#13;
	        }&#13;
	        this.sfAppService.allincidents = allincidents;&#13;
	        var incident = new models_1.SNIncident();&#13;
	        incident.ResultFld = incFields;&#13;
	        this.sfAppService.incident = incident;&#13;
	        this.updateWrapupIncident();&#13;
	    };&#13;
	    SnConnector.prototype.updateWrapupIncident = function () {&#13;
	        var _this = this;&#13;
	        var incidentLst = null;&#13;
	        if (this.sfAppService.incident != null) {&#13;
	            incidentLst = this.sfAppService.incident.ResultFld;&#13;
	        }&#13;
	        var openedIncident = incidentLst.find(function (i) { return i.Number === _this.currentUISelectedIncident.number; });&#13;
	        console.log("updateWrapupIncident - openedIncident :: ");&#13;
	        console.log(openedIncident);&#13;
	        if (openedIncident == null) {&#13;
	            var incidentFld = new models_1.SNIncidentField();&#13;
	            incidentFld.Number = this.currentUISelectedIncident.number;&#13;
	            incidentFld.Sysid = this.currentUISelectedIncident.sysid;&#13;
	            incidentLst.push(incidentFld);&#13;
	        }&#13;
	        this.sfAppService.currentSelectedIncident = this.currentUISelectedIncident;&#13;
	        this.evnt.Broadcast(this.sfAppService.TopicList.WrapupIncidentSelect, this.currentUISelectedIncident);&#13;
	    };&#13;
	    SnConnector.prototype.showInboundScreen = function (caller_id) {&#13;
	        this.logger.Info('Show Inbound AgentScreen : ' + caller_id);&#13;
	        var newForm = (app_config_1.default.openUserPageForNewUser) ? "sys_user.do" : "incident.do";&#13;
	        parent.postMessage("SHOW_INBOUND|" + caller_id + "|" + newForm, "*");&#13;
	    };&#13;
	    SnConnector.prototype.showOutboundScreen = function (caller_id) {&#13;
	        this.logger.Info('Show Outbound AgentScreen : ' + caller_id);&#13;
	        var newForm = (app_config_1.default.openUserPageForNewUser) ? "sys_user.do" : "incident.do";&#13;
	        parent.postMessage("SHOW_INBOUND|" + caller_id + "|" + newForm, "*");&#13;
	    };&#13;
	    SnConnector.prototype.openIncident = function (incidentId) {&#13;
	        console.log('SN METHOD : Open Incident : ' + incidentId);&#13;
	        parent.postMessage("OPEN_INCIDENT|" + incidentId + "|" + app_config_1.default.hideAgentDesktopAfterIncidentSelect, "*");&#13;
	    };&#13;
	    SnConnector.prototype.hideAgentScreen = function () {&#13;
	        this.logger.Info('SN METHOD : Hide AgentScreen');&#13;
	        parent.postMessage("HIDE_FRAME", "*");&#13;
	    };&#13;
	    return SnConnector;&#13;
	}());&#13;
	exports.SnConnector = SnConnector;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 60 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	"use strict";&#13;
	var Validation = (function () {&#13;
	    function Validation() {&#13;
	    }&#13;
	    Validation.prototype.IsNullOrEmptyOrEmptySpace = function (data) {&#13;
	        if (data === undefined || data === null || data.trim() === "") {&#13;
	            return true;&#13;
	        }&#13;
	        return false;&#13;
	    };&#13;
	    Validation.prototype.IsNullOrEmpty = function (data) {&#13;
	        if (data === undefined || data === null || data === "") {&#13;
	            return true;&#13;
	        }&#13;
	        return false;&#13;
	    };&#13;
	    Validation.prototype.IsNotNullOrUndefinedString = function (data) {&#13;
	        if (data === undefined || data === null || data === '' || data === 'undefined' || data === 'null') {&#13;
	            return false;&#13;
	        }&#13;
	        return true;&#13;
	    };&#13;
	    Validation.prototype.IsNotNullOrUndefinedOjbect = function (data) {&#13;
	        if (data === undefined || data === null || data === '' || data === 'undefined' || data === 'null') {&#13;
	            return false;&#13;
	        }&#13;
	        return true;&#13;
	    };&#13;
	    Validation.prototype.IsNotNullOrEmpty = function (data) {&#13;
	        if (data === undefined || data === null || data === "") {&#13;
	            return false;&#13;
	        }&#13;
	        return true;&#13;
	    };&#13;
	    Validation.prototype.IsNotNull = function (data) {&#13;
	        if (data === undefined || data === null || data === "") {&#13;
	            return false;&#13;
	        }&#13;
	        return true;&#13;
	    };&#13;
	    Validation.prototype.IsNotNullOrEmptyArray = function (data) {&#13;
	        if (typeof data !== 'object' || !this.IsNumber(data.length) || data.length === 0) {&#13;
	            return false;&#13;
	        }&#13;
	        return true;&#13;
	    };&#13;
	    Validation.prototype.IsNumber = function (n) {&#13;
	        return !isNaN(parseFloat(n)) &amp;&amp; isFinite(n);&#13;
	    };&#13;
	    Validation.prototype.IsValidObject = function (o) {&#13;
	        return o !== null &amp;&amp; typeof o === 'object';&#13;
	    };&#13;
	    Validation.prototype.IsValidFunction = function (f) {&#13;
	        /// &lt;summary&gt;&#13;
	        /// Checks if the parameter is valid function&#13;
	        /// &lt;/summary&gt;&#13;
	        /// &lt;param name="f"&gt;Object to check&lt;/param&gt;&#13;
	        /// &lt;returns type="bool"&gt;true if parameter is function&lt;/returns&gt;&#13;
	        return f !== null &amp;&amp; typeof f === 'function';&#13;
	    };&#13;
	    Validation.prototype.IsValidEmail = function (data) {&#13;
	        /// &lt;summary&gt;&#13;
	        ///Check the string to valid email id format. &#13;
	        /// &lt;/summary&gt;&#13;
	        /// &lt;param name="data"&gt;String value&lt;/param&gt;&#13;
	        /// &lt;returns type="Boolean"&gt;isValidEmail&lt;/returns&gt;&#13;
	        var filter = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;&#13;
	        return filter.test(data);&#13;
	    };&#13;
	    Validation.prototype.IsValidPhoneNumber = function (data) {&#13;
	        /// &lt;summary&gt;&#13;
	        /// Check the given value is an valid  phone number format&#13;
	        /// &lt;/summary&gt;&#13;
	        /// &lt;param name="data"&gt;&lt;/param&gt;&#13;
	        /// &lt;returns type=""&gt;&lt;/returns&gt;&#13;
	        var filter = /^(\+?)([0-9#\*])+$/;&#13;
	        if (filter.test(data) &amp;&amp; data.length &lt;= 16) {&#13;
	            return true;&#13;
	        }&#13;
	        return false;&#13;
	    };&#13;
	    Validation.prototype.IsValidURL = function (url) {&#13;
	        var validURL = /((?:https?\:\/\/|www\.)(?:[-a-z0-9]+\.)*[-a-z0-9]+.*)/i;&#13;
	        return validURL.test(url);&#13;
	    };&#13;
	    Validation.prototype.isEmpty = function (obj) {&#13;
	        for (var key in obj) {&#13;
	            if (obj.hasOwnProperty(key))&#13;
	                return false;&#13;
	        }&#13;
	        return true;&#13;
	    };&#13;
	    Validation.prototype.GenerateUniqueId = function (prefix) {&#13;
	        function rand() {&#13;
	            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);&#13;
	        }&#13;
	        return prefix + '_' + rand() + rand() + '-' + rand() + '-' + rand();&#13;
	    };&#13;
	    return Validation;&#13;
	}());&#13;
	exports.Validation = Validation;&#13;
	var Request = (function () {&#13;
	    function Request(credentials) {&#13;
	        this.v = new Validation();&#13;
	        this.credentials = credentials;&#13;
	    }&#13;
	    Object.defineProperty(Request.prototype, "Credentials", {&#13;
	        set: function (credentials) {&#13;
	            this.credentials = credentials;&#13;
	        },&#13;
	        enumerable: true,&#13;
	        configurable: true&#13;
	    });&#13;
	    Request.prototype.createSuccessHandler = function (handler) {&#13;
	        return function (data, textStatus, jqXhr) {&#13;
	            if (handler) {&#13;
	                handler(data, jqXhr.status, textStatus);&#13;
	            }&#13;
	        };&#13;
	    };&#13;
	    Request.prototype.createErrorHandler = function (handler) {&#13;
	        return function (jqXhr, textStatus, errorThrown) {&#13;
	            if (handler) {&#13;
	                handler(jqXhr.status, jqXhr.statusText, jqXhr.responseText);&#13;
	            }&#13;
	        };&#13;
	    };&#13;
	    Request.prototype.createSetHeaders = function (headers) {&#13;
	        return function (xhr) {&#13;
	            var header;&#13;
	            if (headers) {&#13;
	                for (header in headers) {&#13;
	                    if (headers.hasOwnProperty(header)) {&#13;
	                        xhr.setRequestHeader(header, headers[header]);&#13;
	                    }&#13;
	                }&#13;
	            }&#13;
	        };&#13;
	    };&#13;
	    //send request for &#13;
	    Request.prototype.SendRequest = function (url, method, headers, xml, successHandler, errorHandler) {&#13;
	        if (headers === void 0) { headers = null; }&#13;
	        //frame the request object here&#13;
	        //make use of jquery frame to make ajax call from here.&#13;
	        var contentType = 'application/xml';&#13;
	        var accept = 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8';&#13;
	        var xhrArgs;&#13;
	        if (this.v.IsNotNullOrEmpty(this.credentials)) {&#13;
	            headers = headers || {};&#13;
	            headers.Authorization = 'Basic ' + this.credentials;&#13;
	        }&#13;
	        xhrArgs = {&#13;
	            url: url,&#13;
	            type: method,&#13;
	            accept: accept,&#13;
	            processData: false,&#13;
	            beforeSend: this.createSetHeaders(headers),&#13;
	            success: this.createSuccessHandler(successHandler),&#13;
	            error: this.createErrorHandler(errorHandler),&#13;
	            cache: null&#13;
	        };&#13;
	        if (method !== 'GET') {&#13;
	            xhrArgs['contentType'] = contentType;&#13;
	            xhrArgs['data'] = xml;&#13;
	        }&#13;
	        window.$.ajax(xhrArgs);&#13;
	    };&#13;
	    return Request;&#13;
	}());&#13;
	exports.Request = Request;&#13;
	var MessageEvent = (function () {&#13;
	    function MessageEvent() {&#13;
	        this.v = new Validation();&#13;
	        this.eventKeys = new Map();&#13;
	        this.eventIdMap = new Map();&#13;
	        console.log('MessageEvent invoked..');&#13;
	        if (MessageEvent._instance) {&#13;
	            console.log("MessageEvent Error: Instantiation failed: Use SingletonClass.getInstance() instead of new.");&#13;
	        }&#13;
	        MessageEvent._instance = this;&#13;
	    }&#13;
	    MessageEvent.getInstance = function () {&#13;
	        return MessageEvent._instance;&#13;
	    };&#13;
	    MessageEvent.prototype.Broadcast = function (eventType, data) {&#13;
	        if (this.eventKeys.hasOwnProperty(eventType) &amp;&amp; this.eventKeys[eventType].length &gt; 0) {&#13;
	            for (var i = 0; i &lt; this.eventKeys[eventType].length; i++) {&#13;
	                var ev = this.eventKeys[eventType][i];&#13;
	                if (eventType != "LCM_CALLCOUNT") {&#13;
	                }&#13;
	                ev.callback(eventType, data);&#13;
	            }&#13;
	        }&#13;
	    };&#13;
	    MessageEvent.prototype.RegisterEvent = function (eventType, callback) {&#13;
	        if (this.v.IsValidFunction(callback)) {&#13;
	            var eventId = this.v.GenerateUniqueId('Event');&#13;
	            if (!this.eventKeys.hasOwnProperty(eventType)) {&#13;
	                this.eventKeys[eventType] = [];&#13;
	            }&#13;
	            if (eventType != "LCM_CALLCOUNT") {&#13;
	            }&#13;
	            this.eventKeys[eventType].push({&#13;
	                id: eventId,&#13;
	                callback: callback&#13;
	            });&#13;
	            this.eventIdMap[eventId] = eventType;&#13;
	            return eventId;&#13;
	        }&#13;
	        return '';&#13;
	    };&#13;
	    //create a unique&#13;
	    MessageEvent.prototype.UnRegisterEvent = function (eventId) {&#13;
	        var index = -1;&#13;
	        var eventType = this.eventIdMap[eventId];&#13;
	        if (this.v.IsNotNullOrEmpty(eventType) &amp;&amp; this.eventKeys.hasOwnProperty(eventType) &amp;&amp; this.eventKeys[eventType].length &gt; 0 &amp;&amp; eventId !== '') {&#13;
	            delete this.eventIdMap[eventId];&#13;
	            for (var i = 0; i &lt; this.eventKeys[eventType].length; i++) {&#13;
	                var ev = this.eventKeys[eventType][i];&#13;
	                //console.log('%c UN-REGISTER ', 'color:Red', eventType);&#13;
	                if (eventId === ev.id) {&#13;
	                    index = i;&#13;
	                    break;&#13;
	                }&#13;
	            }&#13;
	            if (index !== -1) {&#13;
	                this.eventKeys[eventType].splice(index, 1);&#13;
	            }&#13;
	        }&#13;
	        return index;&#13;
	    };&#13;
	    MessageEvent._instance = new MessageEvent();&#13;
	    return MessageEvent;&#13;
	}());&#13;
	exports.MessageEvent = MessageEvent;&#13;
	var DateTimeProcess = (function () {&#13;
	    function DateTimeProcess() {&#13;
	    }&#13;
	    DateTimeProcess.prototype.twoDigitText = function (number) {&#13;
	        return (number &lt; 10 ? '0' : '') + number;&#13;
	    };&#13;
	    DateTimeProcess.prototype.ParseInt = function (value) {&#13;
	        if (isNaN(value) === false) {&#13;
	            return parseInt(value);&#13;
	        }&#13;
	        return 0;&#13;
	    };&#13;
	    DateTimeProcess.prototype.GetElapsedTime = function (serverTime, localTime, stateTime) {&#13;
	        var now = new Date().getTime(), currentServerTime = serverTime + (now - localTime);&#13;
	        currentServerTime = parseInt((currentServerTime * 0.001).toFixed(0));&#13;
	        stateTime = parseInt((stateTime * 0.001).toFixed(0));&#13;
	        if (currentServerTime &lt; stateTime) {&#13;
	            return stateTime - currentServerTime;&#13;
	        }&#13;
	        return currentServerTime - stateTime;&#13;
	    };&#13;
	    DateTimeProcess.prototype.ToShortDateTimeString = function (date) {&#13;
	        date = date || new Date();&#13;
	        var pattern = 'MM/dd/yyyy HH:min ampm';&#13;
	        var hrs = date.getHours(), ampm = hrs &gt;= 12 ? 'pm' : 'am';&#13;
	        hrs = hrs % 12;&#13;
	        hrs = hrs ? hrs : 12; // the hour '0' should be '12'&#13;
	        return pattern.replace('yyyy', date.getFullYear())&#13;
	            .replace('dd', this.twoDigitText(date.getDate()))&#13;
	            .replace('MM', this.twoDigitText(date.getMonth() + 1))&#13;
	            .replace('HH', this.twoDigitText(hrs))&#13;
	            .replace('min', this.twoDigitText(date.getMinutes() + 1))&#13;
	            .replace('ampm', ampm);&#13;
	    };&#13;
	    DateTimeProcess.prototype.SecondsToTime = function (seconds) {&#13;
	        var time = ':00', hours, mins, secs;&#13;
	        if (seconds !== null &amp;&amp; seconds !== undefined &amp;&amp; typeof seconds === 'number') {&#13;
	            if (seconds &lt;= 0) {&#13;
	                return time;&#13;
	            }&#13;
	            hours = Math.floor(seconds / 3600), mins = Math.floor(seconds / 60) % 60, secs = seconds % 60;&#13;
	            if (hours &gt; 0) {&#13;
	                time = hours + ":" + (mins &gt; 9 ? mins : "0" + mins) + ":" + (secs &gt; 9 ? secs : "0" + secs);&#13;
	            }&#13;
	            else if (mins &lt;= 0) {&#13;
	                time = (secs &gt; 9 ? '00:' + secs : "00:0" + secs);&#13;
	            }&#13;
	            else {&#13;
	                time = (mins &gt; 9 ? mins : '0' + mins) + ":" + (secs &gt; 9 ? secs : "0" + secs);&#13;
	            }&#13;
	            return time;&#13;
	        }&#13;
	        else if (seconds === 0) {&#13;
	            return time;&#13;
	        }&#13;
	        return time;&#13;
	    };&#13;
	    return DateTimeProcess;&#13;
	}());&#13;
	exports.DateTimeProcess = DateTimeProcess;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 61 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	"use strict";&#13;
	/**&#13;
	 * @license&#13;
	 * Copyright Servion. All Rights Reserved.&#13;
	 */&#13;
	/**&#13;
	 * @module&#13;
	 * @description&#13;
	 * Contains class models used in Salesforce - Finesse Integration app.&#13;
	 */&#13;
	var UserCredentials = (function () {&#13;
	    function UserCredentials() {&#13;
	    }&#13;
	    return UserCredentials;&#13;
	}());&#13;
	exports.UserCredentials = UserCredentials;&#13;
	var CallInfo = (function () {&#13;
	    function CallInfo() {&#13;
	        this.Participants = [];&#13;
	        this.CallVariables = {};&#13;
	        this.IsOutbound = false;&#13;
	    }&#13;
	    return CallInfo;&#13;
	}());&#13;
	exports.CallInfo = CallInfo;&#13;
	var Participant = (function () {&#13;
	    function Participant() {&#13;
	    }&#13;
	    return Participant;&#13;
	}());&#13;
	exports.Participant = Participant;&#13;
	var CallActions = (function () {&#13;
	    function CallActions() {&#13;
	        this.CanAnswer = false;&#13;
	        this.CanHold = false;&#13;
	        this.CanRetrieve = false;&#13;
	        this.CanDrop = false;&#13;
	        this.CanUpdateCallData = false;&#13;
	        this.CanSendDTMF = false;&#13;
	        this.CanConsult = false;&#13;
	        this.CanConference = false;&#13;
	        this.CanTransfer = false;&#13;
	        this.CanTransferSST = false;&#13;
	        this.CanSilentMonitor = false;&#13;
	        this.CanBargeCall = false;&#13;
	        this.CanParticipantDrop = false;&#13;
	        this.CanStartRecording = false;&#13;
	        this.CanUpdateScheduledCallback = false;&#13;
	        this.CanCancelScheduledCallback = false;&#13;
	        this.CanAccept = false;&#13;
	        this.CanReject = false;&#13;
	        this.CanClose = false;&#13;
	    }&#13;
	    return CallActions;&#13;
	}());&#13;
	exports.CallActions = CallActions;&#13;
	var savestr = (function () {&#13;
	    function savestr() {&#13;
	    }&#13;
	    return savestr;&#13;
	}());&#13;
	exports.savestr = savestr;&#13;
	var Agent = (function () {&#13;
	    function Agent() {&#13;
	        this.Roles = new Role();&#13;
	        this.Teams = [];&#13;
	        this.State = 'LOGOUT';&#13;
	        this.StateChangeTime = 0;&#13;
	    }&#13;
	    return Agent;&#13;
	}());&#13;
	exports.Agent = Agent;&#13;
	var AgentStates = (function () {&#13;
	    function AgentStates() {&#13;
	    }&#13;
	    return AgentStates;&#13;
	}());&#13;
	exports.AgentStates = AgentStates;&#13;
	var Role = (function () {&#13;
	    function Role() {&#13;
	        this.Agent = false;&#13;
	        this.Supervisor = false;&#13;
	    }&#13;
	    return Role;&#13;
	}());&#13;
	var Team = (function () {&#13;
	    function Team(id, name) {&#13;
	        this.Id = id;&#13;
	        this.Name = name;&#13;
	    }&#13;
	    return Team;&#13;
	}());&#13;
	exports.Team = Team;&#13;
	var TeamAgent = (function () {&#13;
	    function TeamAgent(teamId, teamName) {&#13;
	        this.State = 'LOGOUT';&#13;
	        this.TeamId = teamId;&#13;
	        this.TeamName = teamName;&#13;
	    }&#13;
	    return TeamAgent;&#13;
	}());&#13;
	exports.TeamAgent = TeamAgent;&#13;
	var Queue = (function () {&#13;
	    function Queue() {&#13;
	    }&#13;
	    return Queue;&#13;
	}());&#13;
	exports.Queue = Queue;&#13;
	var ReasonCode = (function () {&#13;
	    function ReasonCode(id, label, code) {&#13;
	        if (code === void 0) { code = ''; }&#13;
	        this.Id = id;&#13;
	        this.Code = code;&#13;
	        this.Label = label;&#13;
	    }&#13;
	    return ReasonCode;&#13;
	}());&#13;
	exports.ReasonCode = ReasonCode;&#13;
	var SystemInfo = (function () {&#13;
	    function SystemInfo() {&#13;
	    }&#13;
	    return SystemInfo;&#13;
	}());&#13;
	exports.SystemInfo = SystemInfo;&#13;
	var ApiError = (function () {&#13;
	    function ApiError() {&#13;
	    }&#13;
	    return ApiError;&#13;
	}());&#13;
	exports.ApiError = ApiError;&#13;
	var SystemMessage = (function () {&#13;
	    function SystemMessage() {&#13;
	        this.Id = '';&#13;
	        this.Msg = '';&#13;
	        this.Type = MessageType.General;&#13;
	        this.Level = Severity.Error;&#13;
	        this.IsOk = false;&#13;
	    }&#13;
	    return SystemMessage;&#13;
	}());&#13;
	exports.SystemMessage = SystemMessage;&#13;
	var MessageType;&#13;
	(function (MessageType) {&#13;
	    MessageType[MessageType["General"] = 0] = "General";&#13;
	    MessageType[MessageType["Success"] = 1] = "Success";&#13;
	    MessageType[MessageType["LoginResponse"] = 2] = "LoginResponse";&#13;
	    MessageType[MessageType["Logout"] = 3] = "Logout";&#13;
	    MessageType[MessageType["Call"] = 4] = "Call";&#13;
	    MessageType[MessageType["AgentState"] = 5] = "AgentState";&#13;
	})(MessageType || (MessageType = {}));&#13;
	exports.MessageType = MessageType;&#13;
	var Severity;&#13;
	(function (Severity) {&#13;
	    Severity[Severity["Error"] = 0] = "Error";&#13;
	    Severity[Severity["Warn"] = 1] = "Warn";&#13;
	    Severity[Severity["Info"] = 2] = "Info";&#13;
	})(Severity || (Severity = {}));&#13;
	exports.Severity = Severity;&#13;
	var Message = (function () {&#13;
	    function Message() {&#13;
	    }&#13;
	    Message.EnterCredentials = 'Please enter valid Agent ID/Password/Extension.';&#13;
	    Message.InvalidUserCredential = 'Invalid Agent ID or Password. Please try again.';&#13;
	    Message.InvalidExtension = 'The device associated with that extension or dial number is invalid.';&#13;
	    Message.DeviceBusy = 'The extension specified is already in use.';&#13;
	    Message.InvalidDevice = 'The specified user is already signed in with extension {0}. To sign in using extension {1}, sign out from extension {0} and try again.';&#13;
	    Message.WrapSucess = 'Call Wrapup saved successfully.';&#13;
	    Message.WrapFailure = 'Call Wrapup save failed.';&#13;
	    Message.FinesseReconnect = 'Finesse connection failure, trying to reconnect on {0}';&#13;
	    Message.LoginServerNotReachable = 'Finesse server is not reachable. Please contact your administrator.';&#13;
	    Message.DefaultConfigNotAvailable = 'Screen pop setting default configuration is not configured for {0}. Please contact administrator.';&#13;
	    Message.ChangeNumberSuccess = 'Number Changed Successfully.';&#13;
	    Message.ChangeNumberFail = "Unable to change number.";&#13;
	    Message.BusinessFieldChanged = "Business fields changed successfully.";&#13;
	    Message.LCMDateTimeValidation = "Please select valid date and time.";&#13;
	    Message.LCMNonPEWCEmptyResult = "Sorry,No contacts available.";&#13;
	    Message.RestrictCreateActivity = "Can't create activity during call";&#13;
	    Message.wrapaccountleadfailure = "You can't relate an account, opportunity, or other object to a task already related to a lead.";&#13;
	    Message.alertuserinnotredystate = "Agent should be in Not Ready state to perform Operator Dialing";&#13;
	    Message.NoOutCome = "No outcome to process";&#13;
	    return Message;&#13;
	}());&#13;
	exports.Message = Message;&#13;
	var Topics = (function () {&#13;
	    function Topics() {&#13;
	    }&#13;
	    Topics.LoginResponse = 'LOGIN_RESPONSE';&#13;
	    Topics.AgentDetail = 'Agent_Detail';&#13;
	    Topics.AgentState = 'Agent_State';&#13;
	    Topics.CallDetail = 'CALL_DETAIL';&#13;
	    Topics.QueueInformation = 'QUEUE_INFORMATION';&#13;
	    Topics.TeamInformation = 'TEAM_INFORMATION';&#13;
	    Topics.LogoutReasonCode = 'LOGOUT_REASONCODE';&#13;
	    Topics.NotReadyReasonCode = 'NOTREADY_REASONCODE';&#13;
	    Topics.Wrapup = 'WRAPUP_CODE';&#13;
	    Topics.SystemInformation = 'SYSTEM_INFORMATION';&#13;
	    Topics.ErrorMsg = 'ERROR_MESSAGE';&#13;
	    Topics.ConnectionStatus = 'CONNECTION_STATUS';&#13;
	    Topics.UserCredentials = 'USER_CREDENTIALS';&#13;
	    Topics.CallResult = 'CALL_RESULTS';&#13;
	    Topics.ActivityResult = 'ACTIVITY_RESULT';&#13;
	    Topics.ClickToDial = 'CLICK_TO_DIAL';&#13;
	    Topics.SystemMessage = 'SYSTEM_MESSAGE';&#13;
	    Topics.AutoConference = "AUTO_CONFERENCE";&#13;
	    Topics.Enableactivity = "Enableactivity";&#13;
	    return Topics;&#13;
	}());&#13;
	exports.Topics = Topics;&#13;
	var LCMTopics = (function () {&#13;
	    function LCMTopics() {&#13;
	    }&#13;
	    LCMTopics.LCMKeyInformation = 'LCM_KEYINFORMATION';&#13;
	    LCMTopics.LCMModes = 'LCM_MODES';&#13;
	    LCMTopics.LCMCallbackModes = 'LCM_CALLBACKMODES';&#13;
	    LCMTopics.LCMBusinessFields = 'LCM_BUSINESSFIELDS';&#13;
	    LCMTopics.LCMBOGroupParents = 'LCM_BOGROUPPARENT';&#13;
	    LCMTopics.LCMBusinessOutComes = 'LCM_BUSINESSOUTCOME';&#13;
	    LCMTopics.LCMCallOutComes = 'LCM_CALLOUTCOMES';&#13;
	    LCMTopics.LCMCallCount = 'LCM_CALLCOUNT';&#13;
	    LCMTopics.LCMContact = 'LCM_CONTACT';&#13;
	    return LCMTopics;&#13;
	}());&#13;
	exports.LCMTopics = LCMTopics;&#13;
	var CallTypes = (function () {&#13;
	    function CallTypes() {&#13;
	    }&#13;
	    CallTypes.AcdIn = 'ACD_IN';&#13;
	    CallTypes.PrerouteAcdIn = 'PREROUTE_ACD_IN';&#13;
	    CallTypes.PrerouteDirectAgent = 'PREROUTE_DIRECT_AGENT';&#13;
	    CallTypes.TransferIn = 'TRANSFER_IN';&#13;
	    CallTypes.OverflowIn = 'OVERFLOW_IN';&#13;
	    CallTypes.OtherIn = 'OTHER_IN';&#13;
	    CallTypes.AutoOut = 'AUTO_OUT';&#13;
	    CallTypes.AgentOut = 'AGENT_OUT';&#13;
	    CallTypes.Out = 'OUT';&#13;
	    CallTypes.AgentInside = 'AGENT_INSIDE';&#13;
	    CallTypes.Offered = 'OFFERED';&#13;
	    CallTypes.Consult = 'CONSULT';&#13;
	    CallTypes.ConsultOffered = 'CONSULT_OFFERED';&#13;
	    CallTypes.ConsultConference = 'CONSULT_CONFERENCED';&#13;
	    CallTypes.Conference = 'CONFERENCE';&#13;
	    CallTypes.Unmonitored = 'UNMONITORED';&#13;
	    CallTypes.Preview = 'PREVIEW';&#13;
	    CallTypes.Reservation = 'RESERVATION';&#13;
	    CallTypes.Assist = 'ASSIST';&#13;
	    CallTypes.Emerency = 'EMERGENCY';&#13;
	    CallTypes.SupervisorMonitor = 'SUPERVISOR_MONITOR';&#13;
	    CallTypes.SupervisorWhisper = 'SUPERVISOR_WHISPER';&#13;
	    CallTypes.SupervisorBargein = 'SUPERVISOR_BARGEIN';&#13;
	    CallTypes.SuperviosrIntercept = 'SUPERVISOR_INTERCEPT';&#13;
	    CallTypes.TaskRoutedByICM = 'TASK_ROUTED_BY_ICM';&#13;
	    CallTypes.TaskRoutedByApplication = 'TASK_ROUTED_BY_APPLICATION';&#13;
	    CallTypes.NonACD = 'NON_ACD';&#13;
	    CallTypes.ReservationPreview = 'RESERVATION_PREVIEW';&#13;
	    CallTypes.ReservationPreviewDirect = 'RESERVATION_PREVIEW_DIRECT';&#13;
	    CallTypes.ReservationPredictive = 'RESERVATION_PREDICTIVE';&#13;
	    CallTypes.ReservationCallback = 'RESERVATION_CALLBACK';&#13;
	    CallTypes.ReservationPersonalCallback = 'CUSTOMER_PERSONAL_CALLBACK';&#13;
	    CallTypes.CustomerPreview = 'CUSTOMER_PREVIEW';&#13;
	    CallTypes.CustomerPreviewDirect = 'CUSTOMER_PREVIEW_DIRECT';&#13;
	    CallTypes.CustomerPredictive = 'CUSTOMER_PREDICTIVE';&#13;
	    CallTypes.CustomerCallback = 'CUSTOMER_CALLBACK';&#13;
	    CallTypes.CustomerPersonal = 'CUSTOMER_PERSONAL';&#13;
	    CallTypes.CustomerIVR = 'CALLTYPE_IVR';&#13;
	    CallTypes.CalltypeNonACD = 'CALLTYPE_NON_ACD';&#13;
	    CallTypes.CalltypePlayAgentGreeting = 'CALLTYPE_PLAY_AGENT_GREETING';&#13;
	    CallTypes.CalltypeRecordAgentGreeting = 'CALLTYPE_RECORD_AGENT_GREETING';&#13;
	    CallTypes.CalltypeVoiceCallBack = 'CALLTYPE_VOICE_CALL_BACK';&#13;
	    //Adding variable not from CTI server guide&#13;
	    CallTypes.OutboundPreview = 'OUTBOUND_PREVIEW';&#13;
	    CallTypes.OutboundDirectPreview = 'OUTBOUND_DIRECT_PREVIEW';&#13;
	    CallTypes.CustomerPersonalCallback = 'OO_CUSTOMER_PERSONALCALLBACK';&#13;
	    CallTypes.Transfer = 'TRANSFER';&#13;
	    CallTypes.Outbound = 'OUTBOUND';&#13;
	    return CallTypes;&#13;
	}());&#13;
	exports.CallTypes = CallTypes;&#13;
	var CallResult = (function () {&#13;
	    function CallResult() {&#13;
	        this.Result = new Array();&#13;
	        this.WhoLst = new Array();&#13;
	        this.WhatLst = new Array();&#13;
	        this.ResultFld = new Array();&#13;
	        this.ActivityField = new Array();&#13;
	        this.ActivityComplexField = new Array();&#13;
	        this.CanScreenpop = false;&#13;
	        this.IsScreenpopDone = false;&#13;
	        this.IsCommentEdited = false;&#13;
	        this.ScreenpopURL = '';&#13;
	    }&#13;
	    return CallResult;&#13;
	}());&#13;
	exports.CallResult = CallResult;&#13;
	var SFObject = (function () {&#13;
	    function SFObject() {&#13;
	    }&#13;
	    return SFObject;&#13;
	}());&#13;
	exports.SFObject = SFObject;&#13;
	var DispositionConfig = (function () {&#13;
	    function DispositionConfig() {&#13;
	    }&#13;
	    return DispositionConfig;&#13;
	}());&#13;
	exports.DispositionConfig = DispositionConfig;&#13;
	var ActivityResult = (function () {&#13;
	    function ActivityResult() {&#13;
	        this.Flds = new Array();&#13;
	    }&#13;
	    return ActivityResult;&#13;
	}());&#13;
	exports.ActivityResult = ActivityResult;&#13;
	var ValueMap = (function () {&#13;
	    function ValueMap() {&#13;
	    }&#13;
	    return ValueMap;&#13;
	}());&#13;
	exports.ValueMap = ValueMap;&#13;
	var LCMKeyInformation = (function () {&#13;
	    function LCMKeyInformation() {&#13;
	    }&#13;
	    return LCMKeyInformation;&#13;
	}());&#13;
	exports.LCMKeyInformation = LCMKeyInformation;&#13;
	var BusinessOutCome = (function () {&#13;
	    function BusinessOutCome() {&#13;
	    }&#13;
	    return BusinessOutCome;&#13;
	}());&#13;
	exports.BusinessOutCome = BusinessOutCome;&#13;
	var BusinessOutComes = (function () {&#13;
	    function BusinessOutComes() {&#13;
	        this.BusinessOutCome = new Array();&#13;
	    }&#13;
	    return BusinessOutComes;&#13;
	}());&#13;
	exports.BusinessOutComes = BusinessOutComes;&#13;
	var BOGroupParent = (function () {&#13;
	    function BOGroupParent() {&#13;
	    }&#13;
	    return BOGroupParent;&#13;
	}());&#13;
	exports.BOGroupParent = BOGroupParent;&#13;
	var BOGroupParents = (function () {&#13;
	    function BOGroupParents() {&#13;
	        this.BOGroupParent = new Array();&#13;
	    }&#13;
	    return BOGroupParents;&#13;
	}());&#13;
	exports.BOGroupParents = BOGroupParents;&#13;
	var Modes = (function () {&#13;
	    function Modes() {&#13;
	        this.Mode = new Array();&#13;
	    }&#13;
	    return Modes;&#13;
	}());&#13;
	exports.Modes = Modes;&#13;
	var Mode = (function () {&#13;
	    function Mode() {&#13;
	    }&#13;
	    return Mode;&#13;
	}());&#13;
	exports.Mode = Mode;&#13;
	var CallOutComes = (function () {&#13;
	    function CallOutComes() {&#13;
	        this.CallOutCome = new Array();&#13;
	    }&#13;
	    return CallOutComes;&#13;
	}());&#13;
	exports.CallOutComes = CallOutComes;&#13;
	var CallCount = (function () {&#13;
	    function CallCount() {&#13;
	        this.count = 0;&#13;
	        this.PCBcount = 0;&#13;
	        this.type = 'CallCount';&#13;
	    }&#13;
	    return CallCount;&#13;
	}());&#13;
	exports.CallCount = CallCount;&#13;
	var CallOutCome = (function () {&#13;
	    function CallOutCome() {&#13;
	    }&#13;
	    return CallOutCome;&#13;
	}());&#13;
	exports.CallOutCome = CallOutCome;&#13;
	var LcmContact = (function () {&#13;
	    function LcmContact() {&#13;
	    }&#13;
	    return LcmContact;&#13;
	}());&#13;
	exports.LcmContact = LcmContact;&#13;
	var BusinessField = (function () {&#13;
	    function BusinessField() {&#13;
	    }&#13;
	    return BusinessField;&#13;
	}());&#13;
	exports.BusinessField = BusinessField;&#13;
	var BusinessFields = (function () {&#13;
	    function BusinessFields() {&#13;
	        this.BusinessField = new Array();&#13;
	    }&#13;
	    return BusinessFields;&#13;
	}());&#13;
	exports.BusinessFields = BusinessFields;&#13;
	var ApiSuccess = (function () {&#13;
	    function ApiSuccess() {&#13;
	    }&#13;
	    return ApiSuccess;&#13;
	}());&#13;
	exports.ApiSuccess = ApiSuccess;&#13;
	var SearchConfiguration = (function () {&#13;
	    function SearchConfiguration() {&#13;
	        this.Comment = new CommentText();&#13;
	        this.DisplayVar = new Array();&#13;
	        this.ActivityField = new Array();&#13;
	        this.ActivityComplexField = new Array();&#13;
	    }&#13;
	    return SearchConfiguration;&#13;
	}());&#13;
	exports.SearchConfiguration = SearchConfiguration;&#13;
	var ComplexField = (function () {&#13;
	    function ComplexField() {&#13;
	        this.Fields = new Array();&#13;
	    }&#13;
	    return ComplexField;&#13;
	}());&#13;
	exports.ComplexField = ComplexField;&#13;
	var CommentText = (function () {&#13;
	    function CommentText() {&#13;
	        this.Fields = new Array();&#13;
	        this.IsModified = false;&#13;
	    }&#13;
	    return CommentText;&#13;
	}());&#13;
	exports.CommentText = CommentText;&#13;
	var DisplayField = (function () {&#13;
	    function DisplayField() {&#13;
	    }&#13;
	    return DisplayField;&#13;
	}());&#13;
	exports.DisplayField = DisplayField;&#13;
	var Enableactivity = (function () {&#13;
	    function Enableactivity() {&#13;
	        this.Enableactivity = false;&#13;
	    }&#13;
	    return Enableactivity;&#13;
	}());&#13;
	exports.Enableactivity = Enableactivity;&#13;
	/**Added by Prakash */&#13;
	var SNIncident = (function () {&#13;
	    function SNIncident() {&#13;
	        this.ResultFld = new Array();&#13;
	    }&#13;
	    return SNIncident;&#13;
	}());&#13;
	exports.SNIncident = SNIncident;&#13;
	/**Added by Prakash */&#13;
	var SNIncidentField = (function () {&#13;
	    function SNIncidentField() {&#13;
	    }&#13;
	    return SNIncidentField;&#13;
	}());&#13;
	exports.SNIncidentField = SNIncidentField;&#13;
	//Added  By Manoj&#13;
	var Awscallinfo = (function () {&#13;
	    function Awscallinfo() {&#13;
	        this.ANI = null;&#13;
	        this.IncidentNo = null;&#13;
	        this.Queue = 'Queue3';&#13;
	        this.ContactId = null;&#13;
	    }&#13;
	    return Awscallinfo;&#13;
	}());&#13;
	exports.Awscallinfo = Awscallinfo;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 62 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	"use strict";&#13;
	var AppConfig = (function () {&#13;
	    function AppConfig() {&#13;
	    }&#13;
	    AppConfig.nextCallActions = window['DialerConfig'].nextCallActions;&#13;
	    AppConfig.callStates = window['DialerConfig'].callStates;&#13;
	    AppConfig.CCPURL = window['DialerConfig'].CCPURL;&#13;
	    AppConfig.LoggerSetting = window['DialerConfig'].LoggerSetting;&#13;
	    AppConfig.CRM = window['DialerConfig'].CRM;&#13;
	    AppConfig.InboundDefaultTab = window['DialerConfig'].InboundDefaultTab;&#13;
	    //Added by Prakash&#13;
	    AppConfig.ServiceNowDomainUrl = window['SNConfig'].ServiceNowDomainUrl;&#13;
	    AppConfig.openUserPageForNewUser = window['SNConfig'].openUserPageForNewUser;&#13;
	    AppConfig.hideAgentDesktopAfterCall = window['SNConfig'].hideAgentDesktopAfterCall;&#13;
	    AppConfig.hideAgentDesktopAfterIncidentSelect = window['SNConfig'].hideAgentDesktopAfterIncidentSelect;&#13;
	    return AppConfig;&#13;
	}());&#13;
	Object.defineProperty(exports, "__esModule", { value: true });&#13;
	exports.default = AppConfig;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 63 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var app_config_1 = __webpack_require__(62);&#13;
	(function (LogLevel) {&#13;
	    LogLevel[LogLevel["ALL"] = 0] = "ALL";&#13;
	    LogLevel[LogLevel["TRACE"] = 1] = "TRACE";&#13;
	    LogLevel[LogLevel["DEBUG"] = 2] = "DEBUG";&#13;
	    LogLevel[LogLevel["INFO"] = 3] = "INFO";&#13;
	    LogLevel[LogLevel["WARN"] = 4] = "WARN";&#13;
	    LogLevel[LogLevel["ERROR"] = 5] = "ERROR";&#13;
	    LogLevel[LogLevel["FATAL"] = 6] = "FATAL";&#13;
	})(exports.LogLevel || (exports.LogLevel = {}));&#13;
	var LogLevel = exports.LogLevel;&#13;
	;&#13;
	var LogSetting = (function () {&#13;
	    function LogSetting() {&#13;
	        this.Level = app_config_1.default.LoggerSetting.level;&#13;
	        this.IsConsoleAppender = app_config_1.default.LoggerSetting.isConsoleAppender;&#13;
	        this.IsAPIAppender = app_config_1.default.LoggerSetting.isAPIAppender;&#13;
	        this.MaxLine = app_config_1.default.LoggerSetting.maxLine;&#13;
	    }&#13;
	    return LogSetting;&#13;
	}());&#13;
	var CustomLogger = (function () {&#13;
	    function CustomLogger(className) {&#13;
	        this.apiURL = '/express';&#13;
	        this.className = className;&#13;
	    }&#13;
	    CustomLogger.prototype.log = function (level, value) {&#13;
	        var _this = this;&#13;
	        //Create a date of specified format&#13;
	        var d = new Date();&#13;
	        var temp = '[' + d.toISOString() + '] : ' + d.toLocaleTimeString() + ' -' + level + ': ' + this.className + ' : ';&#13;
	        //let temp = '[' + d.toLocaleString() + '] -' + level + ': ' + this.className + ' : ';&#13;
	        if (typeof value === 'object') {&#13;
	            value = JSON.stringify(value);&#13;
	        }&#13;
	        temp = temp + value;&#13;
	        if (CustomLogger.Setting.IsConsoleAppender === true &amp;&amp; window.console) {&#13;
	            console.log(temp);&#13;
	        }&#13;
	        if (CustomLogger.Setting.IsAPIAppender === true) {&#13;
	            //fire the ajax request from here.&#13;
	            //Store based on the maxLines reached.&#13;
	            var logFormat = '[' + d.toISOString() + '] : ' + d.toLocaleTimeString() + '- {0} ' + level + ': ' + this.className + ' : ';&#13;
	            var browserId = sessionStorage.getItem('BrowserTabKey');&#13;
	            var userDetail_1 = '';&#13;
	            var agentId_1 = '';&#13;
	            if (browserId === undefined || browserId === null || browserId === '' || browserId === 'undefined' || browserId === 'null') {&#13;
	                logFormat = logFormat.replace('{0}', '');&#13;
	            }&#13;
	            else {&#13;
	                logFormat = logFormat.replace('{0}', browserId);&#13;
	            }&#13;
	            logFormat = logFormat + value;&#13;
	            CustomLogger.lstLog.push(logFormat);&#13;
	            setTimeout(function () {&#13;
	                if (CustomLogger.lstLog.length &gt;= CustomLogger.Setting.MaxLine) {&#13;
	                    var appendLst = CustomLogger.lstLog.splice(0, CustomLogger.Setting.MaxLine);&#13;
	                    var finalStr = '';&#13;
	                    var url = _this.apiURL + '/LogRequest';&#13;
	                    for (var _i = 0, appendLst_1 = appendLst; _i &lt; appendLst_1.length; _i++) {&#13;
	                        var t = appendLst_1[_i];&#13;
	                        finalStr = finalStr + t + '\r\n';&#13;
	                    }&#13;
	                    finalStr = finalStr.slice(0, -2);&#13;
	                    userDetail_1 = localStorage.getItem('USER_CREDENTIALS');&#13;
	                    if (userDetail_1 === undefined || userDetail_1 === null || userDetail_1 === '' || userDetail_1 === 'undefined' || userDetail_1 === 'null') {&#13;
	                        agentId_1 = '';&#13;
	                    }&#13;
	                    else {&#13;
	                        userDetail_1 = JSON.parse(userDetail_1);&#13;
	                        agentId_1 = userDetail_1['Username'];&#13;
	                    }&#13;
	                    _this.ajax(url, 'POST', JSON.stringify({ agentId: agentId_1, logText: finalStr }))&#13;
	                        .done(function (data, textStatus, jqXHR) {&#13;
	                        //console.log('Logger Save : ', data);&#13;
	                    })&#13;
	                        .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	                        //console.log('Logger Save Error :', textStatus);&#13;
	                    });&#13;
	                }&#13;
	            }, 0);&#13;
	        }&#13;
	    };&#13;
	    CustomLogger.prototype.All = function (val) {&#13;
	        if (CustomLogger.Setting.Level &lt;= LogLevel.ALL) {&#13;
	            this.log('ALL', val);&#13;
	        }&#13;
	    };&#13;
	    CustomLogger.prototype.Trace = function (val) {&#13;
	        if (CustomLogger.Setting.Level &lt;= LogLevel.TRACE) {&#13;
	            this.log('TRACE', val);&#13;
	        }&#13;
	    };&#13;
	    CustomLogger.prototype.Debug = function (val) {&#13;
	        if (CustomLogger.Setting.Level &lt;= LogLevel.DEBUG) {&#13;
	            this.log('DEBUG', val);&#13;
	        }&#13;
	    };&#13;
	    CustomLogger.prototype.Info = function (val) {&#13;
	        if (CustomLogger.Setting.Level &lt;= LogLevel.INFO) {&#13;
	            this.log('INFO', val);&#13;
	        }&#13;
	    };&#13;
	    CustomLogger.prototype.Warn = function (val) {&#13;
	        if (CustomLogger.Setting.Level &lt;= LogLevel.WARN) {&#13;
	            this.log('WARN', val);&#13;
	        }&#13;
	    };&#13;
	    CustomLogger.prototype.Error = function (val) {&#13;
	        if (CustomLogger.Setting.Level &lt;= LogLevel.ERROR) {&#13;
	            this.log('ERROR', val);&#13;
	        }&#13;
	    };&#13;
	    CustomLogger.prototype.Fatal = function (val) {&#13;
	        if (CustomLogger.Setting.Level &lt;= LogLevel.FATAL) {&#13;
	            this.log('FATAL', val);&#13;
	        }&#13;
	    };&#13;
	    CustomLogger.prototype.ajax = function (url, method, data) {&#13;
	        return window.$.ajax({&#13;
	            url: url,&#13;
	            method: method,&#13;
	            data: data,&#13;
	            dataType: "json",&#13;
	            contentType: "application/json; charset=utf-8"&#13;
	        });&#13;
	    };&#13;
	    CustomLogger.Setting = new LogSetting();&#13;
	    CustomLogger.lstLog = new Array();&#13;
	    CustomLogger.Level = 5; //Setting the default log level to Error;&#13;
	    return CustomLogger;&#13;
	}());&#13;
	exports.CustomLogger = CustomLogger;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 64 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!&#13;
	 * jQuery JavaScript Library v3.3.1&#13;
	 * https://jquery.com/&#13;
	 *&#13;
	 * Includes Sizzle.js&#13;
	 * https://sizzlejs.com/&#13;
	 *&#13;
	 * Copyright JS Foundation and other contributors&#13;
	 * Released under the MIT license&#13;
	 * https://jquery.org/license&#13;
	 *&#13;
	 * Date: 2018-01-20T17:24Z&#13;
	 */&#13;
	( function( global, factory ) {&#13;
	&#13;
		"use strict";&#13;
	&#13;
		if ( typeof module === "object" &amp;&amp; typeof module.exports === "object" ) {&#13;
	&#13;
			// For CommonJS and CommonJS-like environments where a proper `window`&#13;
			// is present, execute the factory and get jQuery.&#13;
			// For environments that do not have a `window` with a `document`&#13;
			// (such as Node.js), expose a factory as module.exports.&#13;
			// This accentuates the need for the creation of a real `window`.&#13;
			// e.g. var jQuery = require("jquery")(window);&#13;
			// See ticket #14549 for more info.&#13;
			module.exports = global.document ?&#13;
				factory( global, true ) :&#13;
				function( w ) {&#13;
					if ( !w.document ) {&#13;
						throw new Error( "jQuery requires a window with a document" );&#13;
					}&#13;
					return factory( w );&#13;
				};&#13;
		} else {&#13;
			factory( global );&#13;
		}&#13;
	&#13;
	// Pass this if window is not defined yet&#13;
	} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {&#13;
	&#13;
	// Edge &lt;= 12 - 13+, Firefox &lt;=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1&#13;
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode&#13;
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common&#13;
	// enough that all such attempts are guarded in a try block.&#13;
	"use strict";&#13;
	&#13;
	var arr = [];&#13;
	&#13;
	var document = window.document;&#13;
	&#13;
	var getProto = Object.getPrototypeOf;&#13;
	&#13;
	var slice = arr.slice;&#13;
	&#13;
	var concat = arr.concat;&#13;
	&#13;
	var push = arr.push;&#13;
	&#13;
	var indexOf = arr.indexOf;&#13;
	&#13;
	var class2type = {};&#13;
	&#13;
	var toString = class2type.toString;&#13;
	&#13;
	var hasOwn = class2type.hasOwnProperty;&#13;
	&#13;
	var fnToString = hasOwn.toString;&#13;
	&#13;
	var ObjectFunctionString = fnToString.call( Object );&#13;
	&#13;
	var support = {};&#13;
	&#13;
	var isFunction = function isFunction( obj ) {&#13;
	&#13;
	      // Support: Chrome &lt;=57, Firefox &lt;=52&#13;
	      // In some browsers, typeof returns "function" for HTML &lt;object&gt; elements&#13;
	      // (i.e., `typeof document.createElement( "object" ) === "function"`).&#13;
	      // We don't want to classify *any* DOM node as a function.&#13;
	      return typeof obj === "function" &amp;&amp; typeof obj.nodeType !== "number";&#13;
	  };&#13;
	&#13;
	&#13;
	var isWindow = function isWindow( obj ) {&#13;
			return obj != null &amp;&amp; obj === obj.window;&#13;
		};&#13;
	&#13;
	&#13;
	&#13;
	&#13;
		var preservedScriptAttributes = {&#13;
			type: true,&#13;
			src: true,&#13;
			noModule: true&#13;
		};&#13;
	&#13;
		function DOMEval( code, doc, node ) {&#13;
			doc = doc || document;&#13;
	&#13;
			var i,&#13;
				script = doc.createElement( "script" );&#13;
	&#13;
			script.text = code;&#13;
			if ( node ) {&#13;
				for ( i in preservedScriptAttributes ) {&#13;
					if ( node[ i ] ) {&#13;
						script[ i ] = node[ i ];&#13;
					}&#13;
				}&#13;
			}&#13;
			doc.head.appendChild( script ).parentNode.removeChild( script );&#13;
		}&#13;
	&#13;
	&#13;
	function toType( obj ) {&#13;
		if ( obj == null ) {&#13;
			return obj + "";&#13;
		}&#13;
	&#13;
		// Support: Android &lt;=2.3 only (functionish RegExp)&#13;
		return typeof obj === "object" || typeof obj === "function" ?&#13;
			class2type[ toString.call( obj ) ] || "object" :&#13;
			typeof obj;&#13;
	}&#13;
	/* global Symbol */&#13;
	// Defining this global in .eslintrc.json would create a danger of using the global&#13;
	// unguarded in another place, it seems safer to define global only for this module&#13;
	&#13;
	&#13;
	&#13;
	var&#13;
		version = "3.3.1",&#13;
	&#13;
		// Define a local copy of jQuery&#13;
		jQuery = function( selector, context ) {&#13;
	&#13;
			// The jQuery object is actually just the init constructor 'enhanced'&#13;
			// Need init if jQuery is called (just allow error to be thrown if not included)&#13;
			return new jQuery.fn.init( selector, context );&#13;
		},&#13;
	&#13;
		// Support: Android &lt;=4.0 only&#13;
		// Make sure we trim BOM and NBSP&#13;
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;&#13;
	&#13;
	jQuery.fn = jQuery.prototype = {&#13;
	&#13;
		// The current version of jQuery being used&#13;
		jquery: version,&#13;
	&#13;
		constructor: jQuery,&#13;
	&#13;
		// The default length of a jQuery object is 0&#13;
		length: 0,&#13;
	&#13;
		toArray: function() {&#13;
			return slice.call( this );&#13;
		},&#13;
	&#13;
		// Get the Nth element in the matched element set OR&#13;
		// Get the whole matched element set as a clean array&#13;
		get: function( num ) {&#13;
	&#13;
			// Return all the elements in a clean array&#13;
			if ( num == null ) {&#13;
				return slice.call( this );&#13;
			}&#13;
	&#13;
			// Return just the one element from the set&#13;
			return num &lt; 0 ? this[ num + this.length ] : this[ num ];&#13;
		},&#13;
	&#13;
		// Take an array of elements and push it onto the stack&#13;
		// (returning the new matched element set)&#13;
		pushStack: function( elems ) {&#13;
	&#13;
			// Build a new jQuery matched element set&#13;
			var ret = jQuery.merge( this.constructor(), elems );&#13;
	&#13;
			// Add the old object onto the stack (as a reference)&#13;
			ret.prevObject = this;&#13;
	&#13;
			// Return the newly-formed element set&#13;
			return ret;&#13;
		},&#13;
	&#13;
		// Execute a callback for every element in the matched set.&#13;
		each: function( callback ) {&#13;
			return jQuery.each( this, callback );&#13;
		},&#13;
	&#13;
		map: function( callback ) {&#13;
			return this.pushStack( jQuery.map( this, function( elem, i ) {&#13;
				return callback.call( elem, i, elem );&#13;
			} ) );&#13;
		},&#13;
	&#13;
		slice: function() {&#13;
			return this.pushStack( slice.apply( this, arguments ) );&#13;
		},&#13;
	&#13;
		first: function() {&#13;
			return this.eq( 0 );&#13;
		},&#13;
	&#13;
		last: function() {&#13;
			return this.eq( -1 );&#13;
		},&#13;
	&#13;
		eq: function( i ) {&#13;
			var len = this.length,&#13;
				j = +i + ( i &lt; 0 ? len : 0 );&#13;
			return this.pushStack( j &gt;= 0 &amp;&amp; j &lt; len ? [ this[ j ] ] : [] );&#13;
		},&#13;
	&#13;
		end: function() {&#13;
			return this.prevObject || this.constructor();&#13;
		},&#13;
	&#13;
		// For internal use only.&#13;
		// Behaves like an Array's method, not like a jQuery method.&#13;
		push: push,&#13;
		sort: arr.sort,&#13;
		splice: arr.splice&#13;
	};&#13;
	&#13;
	jQuery.extend = jQuery.fn.extend = function() {&#13;
		var options, name, src, copy, copyIsArray, clone,&#13;
			target = arguments[ 0 ] || {},&#13;
			i = 1,&#13;
			length = arguments.length,&#13;
			deep = false;&#13;
	&#13;
		// Handle a deep copy situation&#13;
		if ( typeof target === "boolean" ) {&#13;
			deep = target;&#13;
	&#13;
			// Skip the boolean and the target&#13;
			target = arguments[ i ] || {};&#13;
			i++;&#13;
		}&#13;
	&#13;
		// Handle case when target is a string or something (possible in deep copy)&#13;
		if ( typeof target !== "object" &amp;&amp; !isFunction( target ) ) {&#13;
			target = {};&#13;
		}&#13;
	&#13;
		// Extend jQuery itself if only one argument is passed&#13;
		if ( i === length ) {&#13;
			target = this;&#13;
			i--;&#13;
		}&#13;
	&#13;
		for ( ; i &lt; length; i++ ) {&#13;
	&#13;
			// Only deal with non-null/undefined values&#13;
			if ( ( options = arguments[ i ] ) != null ) {&#13;
	&#13;
				// Extend the base object&#13;
				for ( name in options ) {&#13;
					src = target[ name ];&#13;
					copy = options[ name ];&#13;
	&#13;
					// Prevent never-ending loop&#13;
					if ( target === copy ) {&#13;
						continue;&#13;
					}&#13;
	&#13;
					// Recurse if we're merging plain objects or arrays&#13;
					if ( deep &amp;&amp; copy &amp;&amp; ( jQuery.isPlainObject( copy ) ||&#13;
						( copyIsArray = Array.isArray( copy ) ) ) ) {&#13;
	&#13;
						if ( copyIsArray ) {&#13;
							copyIsArray = false;&#13;
							clone = src &amp;&amp; Array.isArray( src ) ? src : [];&#13;
	&#13;
						} else {&#13;
							clone = src &amp;&amp; jQuery.isPlainObject( src ) ? src : {};&#13;
						}&#13;
	&#13;
						// Never move original objects, clone them&#13;
						target[ name ] = jQuery.extend( deep, clone, copy );&#13;
	&#13;
					// Don't bring in undefined values&#13;
					} else if ( copy !== undefined ) {&#13;
						target[ name ] = copy;&#13;
					}&#13;
				}&#13;
			}&#13;
		}&#13;
	&#13;
		// Return the modified object&#13;
		return target;&#13;
	};&#13;
	&#13;
	jQuery.extend( {&#13;
	&#13;
		// Unique for each copy of jQuery on the page&#13;
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),&#13;
	&#13;
		// Assume jQuery is ready without the ready module&#13;
		isReady: true,&#13;
	&#13;
		error: function( msg ) {&#13;
			throw new Error( msg );&#13;
		},&#13;
	&#13;
		noop: function() {},&#13;
	&#13;
		isPlainObject: function( obj ) {&#13;
			var proto, Ctor;&#13;
	&#13;
			// Detect obvious negatives&#13;
			// Use toString instead of jQuery.type to catch host objects&#13;
			if ( !obj || toString.call( obj ) !== "[object Object]" ) {&#13;
				return false;&#13;
			}&#13;
	&#13;
			proto = getProto( obj );&#13;
	&#13;
			// Objects with no prototype (e.g., `Object.create( null )`) are plain&#13;
			if ( !proto ) {&#13;
				return true;&#13;
			}&#13;
	&#13;
			// Objects with prototype are plain iff they were constructed by a global Object function&#13;
			Ctor = hasOwn.call( proto, "constructor" ) &amp;&amp; proto.constructor;&#13;
			return typeof Ctor === "function" &amp;&amp; fnToString.call( Ctor ) === ObjectFunctionString;&#13;
		},&#13;
	&#13;
		isEmptyObject: function( obj ) {&#13;
	&#13;
			/* eslint-disable no-unused-vars */&#13;
			// See https://github.com/eslint/eslint/issues/6125&#13;
			var name;&#13;
	&#13;
			for ( name in obj ) {&#13;
				return false;&#13;
			}&#13;
			return true;&#13;
		},&#13;
	&#13;
		// Evaluates a script in a global context&#13;
		globalEval: function( code ) {&#13;
			DOMEval( code );&#13;
		},&#13;
	&#13;
		each: function( obj, callback ) {&#13;
			var length, i = 0;&#13;
	&#13;
			if ( isArrayLike( obj ) ) {&#13;
				length = obj.length;&#13;
				for ( ; i &lt; length; i++ ) {&#13;
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {&#13;
						break;&#13;
					}&#13;
				}&#13;
			} else {&#13;
				for ( i in obj ) {&#13;
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {&#13;
						break;&#13;
					}&#13;
				}&#13;
			}&#13;
	&#13;
			return obj;&#13;
		},&#13;
	&#13;
		// Support: Android &lt;=4.0 only&#13;
		trim: function( text ) {&#13;
			return text == null ?&#13;
				"" :&#13;
				( text + "" ).replace( rtrim, "" );&#13;
		},&#13;
	&#13;
		// results is for internal usage only&#13;
		makeArray: function( arr, results ) {&#13;
			var ret = results || [];&#13;
	&#13;
			if ( arr != null ) {&#13;
				if ( isArrayLike( Object( arr ) ) ) {&#13;
					jQuery.merge( ret,&#13;
						typeof arr === "string" ?&#13;
						[ arr ] : arr&#13;
					);&#13;
				} else {&#13;
					push.call( ret, arr );&#13;
				}&#13;
			}&#13;
	&#13;
			return ret;&#13;
		},&#13;
	&#13;
		inArray: function( elem, arr, i ) {&#13;
			return arr == null ? -1 : indexOf.call( arr, elem, i );&#13;
		},&#13;
	&#13;
		// Support: Android &lt;=4.0 only, PhantomJS 1 only&#13;
		// push.apply(_, arraylike) throws on ancient WebKit&#13;
		merge: function( first, second ) {&#13;
			var len = +second.length,&#13;
				j = 0,&#13;
				i = first.length;&#13;
	&#13;
			for ( ; j &lt; len; j++ ) {&#13;
				first[ i++ ] = second[ j ];&#13;
			}&#13;
	&#13;
			first.length = i;&#13;
	&#13;
			return first;&#13;
		},&#13;
	&#13;
		grep: function( elems, callback, invert ) {&#13;
			var callbackInverse,&#13;
				matches = [],&#13;
				i = 0,&#13;
				length = elems.length,&#13;
				callbackExpect = !invert;&#13;
	&#13;
			// Go through the array, only saving the items&#13;
			// that pass the validator function&#13;
			for ( ; i &lt; length; i++ ) {&#13;
				callbackInverse = !callback( elems[ i ], i );&#13;
				if ( callbackInverse !== callbackExpect ) {&#13;
					matches.push( elems[ i ] );&#13;
				}&#13;
			}&#13;
	&#13;
			return matches;&#13;
		},&#13;
	&#13;
		// arg is for internal usage only&#13;
		map: function( elems, callback, arg ) {&#13;
			var length, value,&#13;
				i = 0,&#13;
				ret = [];&#13;
	&#13;
			// Go through the array, translating each of the items to their new values&#13;
			if ( isArrayLike( elems ) ) {&#13;
				length = elems.length;&#13;
				for ( ; i &lt; length; i++ ) {&#13;
					value = callback( elems[ i ], i, arg );&#13;
	&#13;
					if ( value != null ) {&#13;
						ret.push( value );&#13;
					}&#13;
				}&#13;
	&#13;
			// Go through every key on the object,&#13;
			} else {&#13;
				for ( i in elems ) {&#13;
					value = callback( elems[ i ], i, arg );&#13;
	&#13;
					if ( value != null ) {&#13;
						ret.push( value );&#13;
					}&#13;
				}&#13;
			}&#13;
	&#13;
			// Flatten any nested arrays&#13;
			return concat.apply( [], ret );&#13;
		},&#13;
	&#13;
		// A global GUID counter for objects&#13;
		guid: 1,&#13;
	&#13;
		// jQuery.support is not used in Core but other projects attach their&#13;
		// properties to it so it needs to exist.&#13;
		support: support&#13;
	} );&#13;
	&#13;
	if ( typeof Symbol === "function" ) {&#13;
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];&#13;
	}&#13;
	&#13;
	// Populate the class2type map&#13;
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),&#13;
	function( i, name ) {&#13;
		class2type[ "[object " + name + "]" ] = name.toLowerCase();&#13;
	} );&#13;
	&#13;
	function isArrayLike( obj ) {&#13;
	&#13;
		// Support: real iOS 8.2 only (not reproducible in simulator)&#13;
		// `in` check used to prevent JIT error (gh-2145)&#13;
		// hasOwn isn't used here due to false negatives&#13;
		// regarding Nodelist length in IE&#13;
		var length = !!obj &amp;&amp; "length" in obj &amp;&amp; obj.length,&#13;
			type = toType( obj );&#13;
	&#13;
		if ( isFunction( obj ) || isWindow( obj ) ) {&#13;
			return false;&#13;
		}&#13;
	&#13;
		return type === "array" || length === 0 ||&#13;
			typeof length === "number" &amp;&amp; length &gt; 0 &amp;&amp; ( length - 1 ) in obj;&#13;
	}&#13;
	var Sizzle =&#13;
	/*!&#13;
	 * Sizzle CSS Selector Engine v2.3.3&#13;
	 * https://sizzlejs.com/&#13;
	 *&#13;
	 * Copyright jQuery Foundation and other contributors&#13;
	 * Released under the MIT license&#13;
	 * http://jquery.org/license&#13;
	 *&#13;
	 * Date: 2016-08-08&#13;
	 */&#13;
	(function( window ) {&#13;
	&#13;
	var i,&#13;
		support,&#13;
		Expr,&#13;
		getText,&#13;
		isXML,&#13;
		tokenize,&#13;
		compile,&#13;
		select,&#13;
		outermostContext,&#13;
		sortInput,&#13;
		hasDuplicate,&#13;
	&#13;
		// Local document vars&#13;
		setDocument,&#13;
		document,&#13;
		docElem,&#13;
		documentIsHTML,&#13;
		rbuggyQSA,&#13;
		rbuggyMatches,&#13;
		matches,&#13;
		contains,&#13;
	&#13;
		// Instance-specific data&#13;
		expando = "sizzle" + 1 * new Date(),&#13;
		preferredDoc = window.document,&#13;
		dirruns = 0,&#13;
		done = 0,&#13;
		classCache = createCache(),&#13;
		tokenCache = createCache(),&#13;
		compilerCache = createCache(),&#13;
		sortOrder = function( a, b ) {&#13;
			if ( a === b ) {&#13;
				hasDuplicate = true;&#13;
			}&#13;
			return 0;&#13;
		},&#13;
	&#13;
		// Instance methods&#13;
		hasOwn = ({}).hasOwnProperty,&#13;
		arr = [],&#13;
		pop = arr.pop,&#13;
		push_native = arr.push,&#13;
		push = arr.push,&#13;
		slice = arr.slice,&#13;
		// Use a stripped-down indexOf as it's faster than native&#13;
		// https://jsperf.com/thor-indexof-vs-for/5&#13;
		indexOf = function( list, elem ) {&#13;
			var i = 0,&#13;
				len = list.length;&#13;
			for ( ; i &lt; len; i++ ) {&#13;
				if ( list[i] === elem ) {&#13;
					return i;&#13;
				}&#13;
			}&#13;
			return -1;&#13;
		},&#13;
	&#13;
		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",&#13;
	&#13;
		// Regular expressions&#13;
	&#13;
		// http://www.w3.org/TR/css3-selectors/#whitespace&#13;
		whitespace = "[\\x20\\t\\r\\n\\f]",&#13;
	&#13;
		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier&#13;
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",&#13;
	&#13;
		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors&#13;
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +&#13;
			// Operator (capture 2)&#13;
			"*([*^$|!~]?=)" + whitespace +&#13;
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"&#13;
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +&#13;
			"*\\]",&#13;
	&#13;
		pseudos = ":(" + identifier + ")(?:\\((" +&#13;
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:&#13;
			// 1. quoted (capture 3; capture 4 or capture 5)&#13;
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +&#13;
			// 2. simple (capture 6)&#13;
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +&#13;
			// 3. anything else (capture 2)&#13;
			".*" +&#13;
			")\\)|)",&#13;
	&#13;
		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter&#13;
		rwhitespace = new RegExp( whitespace + "+", "g" ),&#13;
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),&#13;
	&#13;
		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),&#13;
		rcombinators = new RegExp( "^" + whitespace + "*([&gt;+~]|" + whitespace + ")" + whitespace + "*" ),&#13;
	&#13;
		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),&#13;
	&#13;
		rpseudo = new RegExp( pseudos ),&#13;
		ridentifier = new RegExp( "^" + identifier + "$" ),&#13;
	&#13;
		matchExpr = {&#13;
			"ID": new RegExp( "^#(" + identifier + ")" ),&#13;
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),&#13;
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),&#13;
			"ATTR": new RegExp( "^" + attributes ),&#13;
			"PSEUDO": new RegExp( "^" + pseudos ),&#13;
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +&#13;
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +&#13;
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),&#13;
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),&#13;
			// For use in libraries implementing .is()&#13;
			// We use this for POS matching in `select`&#13;
			"needsContext": new RegExp( "^" + whitespace + "*[&gt;+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +&#13;
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )&#13;
		},&#13;
	&#13;
		rinputs = /^(?:input|select|textarea|button)$/i,&#13;
		rheader = /^h\d$/i,&#13;
	&#13;
		rnative = /^[^{]+\{\s*\[native \w/,&#13;
	&#13;
		// Easily-parseable/retrievable ID or TAG or CLASS selectors&#13;
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,&#13;
	&#13;
		rsibling = /[+~]/,&#13;
	&#13;
		// CSS escapes&#13;
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters&#13;
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),&#13;
		funescape = function( _, escaped, escapedWhitespace ) {&#13;
			var high = "0x" + escaped - 0x10000;&#13;
			// NaN means non-codepoint&#13;
			// Support: Firefox&lt;24&#13;
			// Workaround erroneous numeric interpretation of +"0x"&#13;
			return high !== high || escapedWhitespace ?&#13;
				escaped :&#13;
				high &lt; 0 ?&#13;
					// BMP codepoint&#13;
					String.fromCharCode( high + 0x10000 ) :&#13;
					// Supplemental Plane codepoint (surrogate pair)&#13;
					String.fromCharCode( high &gt;&gt; 10 | 0xD800, high &amp; 0x3FF | 0xDC00 );&#13;
		},&#13;
	&#13;
		// CSS string/identifier serialization&#13;
		// https://drafts.csswg.org/cssom/#common-serializing-idioms&#13;
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,&#13;
		fcssescape = function( ch, asCodePoint ) {&#13;
			if ( asCodePoint ) {&#13;
	&#13;
				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER&#13;
				if ( ch === "\0" ) {&#13;
					return "\uFFFD";&#13;
				}&#13;
	&#13;
				// Control characters and (dependent upon position) numbers get escaped as code points&#13;
				return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";&#13;
			}&#13;
	&#13;
			// Other potentially-special ASCII characters get backslash-escaped&#13;
			return "\\" + ch;&#13;
		},&#13;
	&#13;
		// Used for iframes&#13;
		// See setDocument()&#13;
		// Removing the function wrapper causes a "Permission Denied"&#13;
		// error in IE&#13;
		unloadHandler = function() {&#13;
			setDocument();&#13;
		},&#13;
	&#13;
		disabledAncestor = addCombinator(&#13;
			function( elem ) {&#13;
				return elem.disabled === true &amp;&amp; ("form" in elem || "label" in elem);&#13;
			},&#13;
			{ dir: "parentNode", next: "legend" }&#13;
		);&#13;
	&#13;
	// Optimize for push.apply( _, NodeList )&#13;
	try {&#13;
		push.apply(&#13;
			(arr = slice.call( preferredDoc.childNodes )),&#13;
			preferredDoc.childNodes&#13;
		);&#13;
		// Support: Android&lt;4.0&#13;
		// Detect silently failing push.apply&#13;
		arr[ preferredDoc.childNodes.length ].nodeType;&#13;
	} catch ( e ) {&#13;
		push = { apply: arr.length ?&#13;
	&#13;
			// Leverage slice if possible&#13;
			function( target, els ) {&#13;
				push_native.apply( target, slice.call(els) );&#13;
			} :&#13;
	&#13;
			// Support: IE&lt;9&#13;
			// Otherwise append directly&#13;
			function( target, els ) {&#13;
				var j = target.length,&#13;
					i = 0;&#13;
				// Can't trust NodeList.length&#13;
				while ( (target[j++] = els[i++]) ) {}&#13;
				target.length = j - 1;&#13;
			}&#13;
		};&#13;
	}&#13;
	&#13;
	function Sizzle( selector, context, results, seed ) {&#13;
		var m, i, elem, nid, match, groups, newSelector,&#13;
			newContext = context &amp;&amp; context.ownerDocument,&#13;
	&#13;
			// nodeType defaults to 9, since context defaults to document&#13;
			nodeType = context ? context.nodeType : 9;&#13;
	&#13;
		results = results || [];&#13;
	&#13;
		// Return early from calls with invalid selector or context&#13;
		if ( typeof selector !== "string" || !selector ||&#13;
			nodeType !== 1 &amp;&amp; nodeType !== 9 &amp;&amp; nodeType !== 11 ) {&#13;
	&#13;
			return results;&#13;
		}&#13;
	&#13;
		// Try to shortcut find operations (as opposed to filters) in HTML documents&#13;
		if ( !seed ) {&#13;
	&#13;
			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {&#13;
				setDocument( context );&#13;
			}&#13;
			context = context || document;&#13;
	&#13;
			if ( documentIsHTML ) {&#13;
	&#13;
				// If the selector is sufficiently simple, try using a "get*By*" DOM method&#13;
				// (excepting DocumentFragment context, where the methods don't exist)&#13;
				if ( nodeType !== 11 &amp;&amp; (match = rquickExpr.exec( selector )) ) {&#13;
	&#13;
					// ID selector&#13;
					if ( (m = match[1]) ) {&#13;
	&#13;
						// Document context&#13;
						if ( nodeType === 9 ) {&#13;
							if ( (elem = context.getElementById( m )) ) {&#13;
	&#13;
								// Support: IE, Opera, Webkit&#13;
								// TODO: identify versions&#13;
								// getElementById can match elements by name instead of ID&#13;
								if ( elem.id === m ) {&#13;
									results.push( elem );&#13;
									return results;&#13;
								}&#13;
							} else {&#13;
								return results;&#13;
							}&#13;
	&#13;
						// Element context&#13;
						} else {&#13;
	&#13;
							// Support: IE, Opera, Webkit&#13;
							// TODO: identify versions&#13;
							// getElementById can match elements by name instead of ID&#13;
							if ( newContext &amp;&amp; (elem = newContext.getElementById( m )) &amp;&amp;&#13;
								contains( context, elem ) &amp;&amp;&#13;
								elem.id === m ) {&#13;
	&#13;
								results.push( elem );&#13;
								return results;&#13;
							}&#13;
						}&#13;
	&#13;
					// Type selector&#13;
					} else if ( match[2] ) {&#13;
						push.apply( results, context.getElementsByTagName( selector ) );&#13;
						return results;&#13;
	&#13;
					// Class selector&#13;
					} else if ( (m = match[3]) &amp;&amp; support.getElementsByClassName &amp;&amp;&#13;
						context.getElementsByClassName ) {&#13;
	&#13;
						push.apply( results, context.getElementsByClassName( m ) );&#13;
						return results;&#13;
					}&#13;
				}&#13;
	&#13;
				// Take advantage of querySelectorAll&#13;
				if ( support.qsa &amp;&amp;&#13;
					!compilerCache[ selector + " " ] &amp;&amp;&#13;
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {&#13;
	&#13;
					if ( nodeType !== 1 ) {&#13;
						newContext = context;&#13;
						newSelector = selector;&#13;
	&#13;
					// qSA looks outside Element context, which is not what we want&#13;
					// Thanks to Andrew Dupont for this workaround technique&#13;
					// Support: IE &lt;=8&#13;
					// Exclude object elements&#13;
					} else if ( context.nodeName.toLowerCase() !== "object" ) {&#13;
	&#13;
						// Capture the context ID, setting it first if necessary&#13;
						if ( (nid = context.getAttribute( "id" )) ) {&#13;
							nid = nid.replace( rcssescape, fcssescape );&#13;
						} else {&#13;
							context.setAttribute( "id", (nid = expando) );&#13;
						}&#13;
	&#13;
						// Prefix every selector in the list&#13;
						groups = tokenize( selector );&#13;
						i = groups.length;&#13;
						while ( i-- ) {&#13;
							groups[i] = "#" + nid + " " + toSelector( groups[i] );&#13;
						}&#13;
						newSelector = groups.join( "," );&#13;
	&#13;
						// Expand context for sibling selectors&#13;
						newContext = rsibling.test( selector ) &amp;&amp; testContext( context.parentNode ) ||&#13;
							context;&#13;
					}&#13;
	&#13;
					if ( newSelector ) {&#13;
						try {&#13;
							push.apply( results,&#13;
								newContext.querySelectorAll( newSelector )&#13;
							);&#13;
							return results;&#13;
						} catch ( qsaError ) {&#13;
						} finally {&#13;
							if ( nid === expando ) {&#13;
								context.removeAttribute( "id" );&#13;
							}&#13;
						}&#13;
					}&#13;
				}&#13;
			}&#13;
		}&#13;
	&#13;
		// All others&#13;
		return select( selector.replace( rtrim, "$1" ), context, results, seed );&#13;
	}&#13;
	&#13;
	/**&#13;
	 * Create key-value caches of limited size&#13;
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with&#13;
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)&#13;
	 *	deleting the oldest entry&#13;
	 */&#13;
	function createCache() {&#13;
		var keys = [];&#13;
	&#13;
		function cache( key, value ) {&#13;
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)&#13;
			if ( keys.push( key + " " ) &gt; Expr.cacheLength ) {&#13;
				// Only keep the most recent entries&#13;
				delete cache[ keys.shift() ];&#13;
			}&#13;
			return (cache[ key + " " ] = value);&#13;
		}&#13;
		return cache;&#13;
	}&#13;
	&#13;
	/**&#13;
	 * Mark a function for special use by Sizzle&#13;
	 * @param {Function} fn The function to mark&#13;
	 */&#13;
	function markFunction( fn ) {&#13;
		fn[ expando ] = true;&#13;
		return fn;&#13;
	}&#13;
	&#13;
	/**&#13;
	 * Support testing using an element&#13;
	 * @param {Function} fn Passed the created element and returns a boolean result&#13;
	 */&#13;
	function assert( fn ) {&#13;
		var el = document.createElement("fieldset");&#13;
	&#13;
		try {&#13;
			return !!fn( el );&#13;
		} catch (e) {&#13;
			return false;&#13;
		} finally {&#13;
			// Remove from its parent by default&#13;
			if ( el.parentNode ) {&#13;
				el.parentNode.removeChild( el );&#13;
			}&#13;
			// release memory in IE&#13;
			el = null;&#13;
		}&#13;
	}&#13;
	&#13;
	/**&#13;
	 * Adds the same handler for all of the specified attrs&#13;
	 * @param {String} attrs Pipe-separated list of attributes&#13;
	 * @param {Function} handler The method that will be applied&#13;
	 */&#13;
	function addHandle( attrs, handler ) {&#13;
		var arr = attrs.split("|"),&#13;
			i = arr.length;&#13;
	&#13;
		while ( i-- ) {&#13;
			Expr.attrHandle[ arr[i] ] = handler;&#13;
		}&#13;
	}&#13;
	&#13;
	/**&#13;
	 * Checks document order of two siblings&#13;
	 * @param {Element} a&#13;
	 * @param {Element} b&#13;
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b&#13;
	 */&#13;
	function siblingCheck( a, b ) {&#13;
		var cur = b &amp;&amp; a,&#13;
			diff = cur &amp;&amp; a.nodeType === 1 &amp;&amp; b.nodeType === 1 &amp;&amp;&#13;
				a.sourceIndex - b.sourceIndex;&#13;
	&#13;
		// Use IE sourceIndex if available on both nodes&#13;
		if ( diff ) {&#13;
			return diff;&#13;
		}&#13;
	&#13;
		// Check if b follows a&#13;
		if ( cur ) {&#13;
			while ( (cur = cur.nextSibling) ) {&#13;
				if ( cur === b ) {&#13;
					return -1;&#13;
				}&#13;
			}&#13;
		}&#13;
	&#13;
		return a ? 1 : -1;&#13;
	}&#13;
	&#13;
	/**&#13;
	 * Returns a function to use in pseudos for input types&#13;
	 * @param {String} type&#13;
	 */&#13;
	function createInputPseudo( type ) {&#13;
		return function( elem ) {&#13;
			var name = elem.nodeName.toLowerCase();&#13;
			return name === "input" &amp;&amp; elem.type === type;&#13;
		};&#13;
	}&#13;
	&#13;
	/**&#13;
	 * Returns a function to use in pseudos for buttons&#13;
	 * @param {String} type&#13;
	 */&#13;
	function createButtonPseudo( type ) {&#13;
		return function( elem ) {&#13;
			var name = elem.nodeName.toLowerCase();&#13;
			return (name === "input" || name === "button") &amp;&amp; elem.type === type;&#13;
		};&#13;
	}&#13;
	&#13;
	/**&#13;
	 * Returns a function to use in pseudos for :enabled/:disabled&#13;
	 * @param {Boolean} disabled true for :disabled; false for :enabled&#13;
	 */&#13;
	function createDisabledPseudo( disabled ) {&#13;
	&#13;
		// Known :disabled false positives: fieldset[disabled] &gt; legend:nth-of-type(n+2) :can-disable&#13;
		return function( elem ) {&#13;
	&#13;
			// Only certain elements can match :enabled or :disabled&#13;
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled&#13;
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled&#13;
			if ( "form" in elem ) {&#13;
	&#13;
				// Check for inherited disabledness on relevant non-disabled elements:&#13;
				// * listed form-associated elements in a disabled fieldset&#13;
				//   https://html.spec.whatwg.org/multipage/forms.html#category-listed&#13;
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled&#13;
				// * option elements in a disabled optgroup&#13;
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled&#13;
				// All such elements have a "form" property.&#13;
				if ( elem.parentNode &amp;&amp; elem.disabled === false ) {&#13;
	&#13;
					// Option elements defer to a parent optgroup if present&#13;
					if ( "label" in elem ) {&#13;
						if ( "label" in elem.parentNode ) {&#13;
							return elem.parentNode.disabled === disabled;&#13;
						} else {&#13;
							return elem.disabled === disabled;&#13;
						}&#13;
					}&#13;
	&#13;
					// Support: IE 6 - 11&#13;
					// Use the isDisabled shortcut property to check for disabled fieldset ancestors&#13;
					return elem.isDisabled === disabled ||&#13;
	&#13;
						// Where there is no isDisabled, check manually&#13;
						/* jshint -W018 */&#13;
						elem.isDisabled !== !disabled &amp;&amp;&#13;
							disabledAncestor( elem ) === disabled;&#13;
				}&#13;
	&#13;
				return elem.disabled === disabled;&#13;
	&#13;
			// Try to winnow out elements that can't be disabled before trusting the disabled property.&#13;
			// Some victims get caught in our net (label, legend, menu, track), but it shouldn't&#13;
			// even exist on them, let alone have a boolean value.&#13;
			} else if ( "label" in elem ) {&#13;
				return elem.disabled === disabled;&#13;
			}&#13;
	&#13;
			// Remaining elements are neither :enabled nor :disabled&#13;
			return false;&#13;
		};&#13;
	}&#13;
	&#13;
	/**&#13;
	 * Returns a function to use in pseudos for positionals&#13;
	 * @param {Function} fn&#13;
	 */&#13;
	function createPositionalPseudo( fn ) {&#13;
		return markFunction(function( argument ) {&#13;
			argument = +argument;&#13;
			return markFunction(function( seed, matches ) {&#13;
				var j,&#13;
					matchIndexes = fn( [], seed.length, argument ),&#13;
					i = matchIndexes.length;&#13;
	&#13;
				// Match elements found at the specified indexes&#13;
				while ( i-- ) {&#13;
					if ( seed[ (j = matchIndexes[i]) ] ) {&#13;
						seed[j] = !(matches[j] = seed[j]);&#13;
					}&#13;
				}&#13;
			});&#13;
		});&#13;
	}&#13;
	&#13;
	/**&#13;
	 * Checks a node for validity as a Sizzle context&#13;
	 * @param {Element|Object=} context&#13;
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value&#13;
	 */&#13;
	function testContext( context ) {&#13;
		return context &amp;&amp; typeof context.getElementsByTagName !== "undefined" &amp;&amp; context;&#13;
	}&#13;
	&#13;
	// Expose support vars for convenience&#13;
	support = Sizzle.support = {};&#13;
	&#13;
	/**&#13;
	 * Detects XML nodes&#13;
	 * @param {Element|Object} elem An element or a document&#13;
	 * @returns {Boolean} True iff elem is a non-HTML XML node&#13;
	 */&#13;
	isXML = Sizzle.isXML = function( elem ) {&#13;
		// documentElement is verified for cases where it doesn't yet exist&#13;
		// (such as loading iframes in IE - #4833)&#13;
		var documentElement = elem &amp;&amp; (elem.ownerDocument || elem).documentElement;&#13;
		return documentElement ? documentElement.nodeName !== "HTML" : false;&#13;
	};&#13;
	&#13;
	/**&#13;
	 * Sets document-related variables once based on the current document&#13;
	 * @param {Element|Object} [doc] An element or document object to use to set the document&#13;
	 * @returns {Object} Returns the current document&#13;
	 */&#13;
	setDocument = Sizzle.setDocument = function( node ) {&#13;
		var hasCompare, subWindow,&#13;
			doc = node ? node.ownerDocument || node : preferredDoc;&#13;
	&#13;
		// Return early if doc is invalid or already selected&#13;
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {&#13;
			return document;&#13;
		}&#13;
	&#13;
		// Update global variables&#13;
		document = doc;&#13;
		docElem = document.documentElement;&#13;
		documentIsHTML = !isXML( document );&#13;
	&#13;
		// Support: IE 9-11, Edge&#13;
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)&#13;
		if ( preferredDoc !== document &amp;&amp;&#13;
			(subWindow = document.defaultView) &amp;&amp; subWindow.top !== subWindow ) {&#13;
	&#13;
			// Support: IE 11, Edge&#13;
			if ( subWindow.addEventListener ) {&#13;
				subWindow.addEventListener( "unload", unloadHandler, false );&#13;
	&#13;
			// Support: IE 9 - 10 only&#13;
			} else if ( subWindow.attachEvent ) {&#13;
				subWindow.attachEvent( "onunload", unloadHandler );&#13;
			}&#13;
		}&#13;
	&#13;
		/* Attributes&#13;
		---------------------------------------------------------------------- */&#13;
	&#13;
		// Support: IE&lt;8&#13;
		// Verify that getAttribute really returns attributes and not properties&#13;
		// (excepting IE8 booleans)&#13;
		support.attributes = assert(function( el ) {&#13;
			el.className = "i";&#13;
			return !el.getAttribute("className");&#13;
		});&#13;
	&#13;
		/* getElement(s)By*&#13;
		---------------------------------------------------------------------- */&#13;
	&#13;
		// Check if getElementsByTagName("*") returns only elements&#13;
		support.getElementsByTagName = assert(function( el ) {&#13;
			el.appendChild( document.createComment("") );&#13;
			return !el.getElementsByTagName("*").length;&#13;
		});&#13;
	&#13;
		// Support: IE&lt;9&#13;
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );&#13;
	&#13;
		// Support: IE&lt;10&#13;
		// Check if getElementById returns elements by name&#13;
		// The broken getElementById methods don't pick up programmatically-set names,&#13;
		// so use a roundabout getElementsByName test&#13;
		support.getById = assert(function( el ) {&#13;
			docElem.appendChild( el ).id = expando;&#13;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;&#13;
		});&#13;
	&#13;
		// ID filter and find&#13;
		if ( support.getById ) {&#13;
			Expr.filter["ID"] = function( id ) {&#13;
				var attrId = id.replace( runescape, funescape );&#13;
				return function( elem ) {&#13;
					return elem.getAttribute("id") === attrId;&#13;
				};&#13;
			};&#13;
			Expr.find["ID"] = function( id, context ) {&#13;
				if ( typeof context.getElementById !== "undefined" &amp;&amp; documentIsHTML ) {&#13;
					var elem = context.getElementById( id );&#13;
					return elem ? [ elem ] : [];&#13;
				}&#13;
			};&#13;
		} else {&#13;
			Expr.filter["ID"] =  function( id ) {&#13;
				var attrId = id.replace( runescape, funescape );&#13;
				return function( elem ) {&#13;
					var node = typeof elem.getAttributeNode !== "undefined" &amp;&amp;&#13;
						elem.getAttributeNode("id");&#13;
					return node &amp;&amp; node.value === attrId;&#13;
				};&#13;
			};&#13;
	&#13;
			// Support: IE 6 - 7 only&#13;
			// getElementById is not reliable as a find shortcut&#13;
			Expr.find["ID"] = function( id, context ) {&#13;
				if ( typeof context.getElementById !== "undefined" &amp;&amp; documentIsHTML ) {&#13;
					var node, i, elems,&#13;
						elem = context.getElementById( id );&#13;
	&#13;
					if ( elem ) {&#13;
	&#13;
						// Verify the id attribute&#13;
						node = elem.getAttributeNode("id");&#13;
						if ( node &amp;&amp; node.value === id ) {&#13;
							return [ elem ];&#13;
						}&#13;
	&#13;
						// Fall back on getElementsByName&#13;
						elems = context.getElementsByName( id );&#13;
						i = 0;&#13;
						while ( (elem = elems[i++]) ) {&#13;
							node = elem.getAttributeNode("id");&#13;
							if ( node &amp;&amp; node.value === id ) {&#13;
								return [ elem ];&#13;
							}&#13;
						}&#13;
					}&#13;
	&#13;
					return [];&#13;
				}&#13;
			};&#13;
		}&#13;
	&#13;
		// Tag&#13;
		Expr.find["TAG"] = support.getElementsByTagName ?&#13;
			function( tag, context ) {&#13;
				if ( typeof context.getElementsByTagName !== "undefined" ) {&#13;
					return context.getElementsByTagName( tag );&#13;
	&#13;
				// DocumentFragment nodes don't have gEBTN&#13;
				} else if ( support.qsa ) {&#13;
					return context.querySelectorAll( tag );&#13;
				}&#13;
			} :&#13;
	&#13;
			function( tag, context ) {&#13;
				var elem,&#13;
					tmp = [],&#13;
					i = 0,&#13;
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too&#13;
					results = context.getElementsByTagName( tag );&#13;
	&#13;
				// Filter out possible comments&#13;
				if ( tag === "*" ) {&#13;
					while ( (elem = results[i++]) ) {&#13;
						if ( elem.nodeType === 1 ) {&#13;
							tmp.push( elem );&#13;
						}&#13;
					}&#13;
	&#13;
					return tmp;&#13;
				}&#13;
				return results;&#13;
			};&#13;
	&#13;
		// Class&#13;
		Expr.find["CLASS"] = support.getElementsByClassName &amp;&amp; function( className, context ) {&#13;
			if ( typeof context.getElementsByClassName !== "undefined" &amp;&amp; documentIsHTML ) {&#13;
				return context.getElementsByClassName( className );&#13;
			}&#13;
		};&#13;
	&#13;
		/* QSA/matchesSelector&#13;
		---------------------------------------------------------------------- */&#13;
	&#13;
		// QSA and matchesSelector support&#13;
	&#13;
		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)&#13;
		rbuggyMatches = [];&#13;
	&#13;
		// qSa(:focus) reports false when true (Chrome 21)&#13;
		// We allow this because of a bug in IE8/9 that throws an error&#13;
		// whenever `document.activeElement` is accessed on an iframe&#13;
		// So, we allow :focus to pass through QSA all the time to avoid the IE error&#13;
		// See https://bugs.jquery.com/ticket/13378&#13;
		rbuggyQSA = [];&#13;
	&#13;
		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {&#13;
			// Build QSA regex&#13;
			// Regex strategy adopted from Diego Perini&#13;
			assert(function( el ) {&#13;
				// Select is set to empty string on purpose&#13;
				// This is to test IE's treatment of not explicitly&#13;
				// setting a boolean content attribute,&#13;
				// since its presence should be enough&#13;
				// https://bugs.jquery.com/ticket/12359&#13;
				docElem.appendChild( el ).innerHTML = "&lt;a id='" + expando + "'&gt;&lt;/a&gt;" +&#13;
					"&lt;select id='" + expando + "-\r\\' msallowcapture=''&gt;" +&#13;
					"&lt;option selected=''&gt;&lt;/option&gt;&lt;/select&gt;";&#13;
	&#13;
				// Support: IE8, Opera 11-12.16&#13;
				// Nothing should be selected when empty strings follow ^= or $= or *=&#13;
				// The test attribute must be unknown in Opera but "safe" for WinRT&#13;
				// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section&#13;
				if ( el.querySelectorAll("[msallowcapture^='']").length ) {&#13;
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );&#13;
				}&#13;
	&#13;
				// Support: IE8&#13;
				// Boolean attributes and "value" are not treated correctly&#13;
				if ( !el.querySelectorAll("[selected]").length ) {&#13;
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );&#13;
				}&#13;
	&#13;
				// Support: Chrome&lt;29, Android&lt;4.4, Safari&lt;7.0+, iOS&lt;7.0+, PhantomJS&lt;1.9.8+&#13;
				if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {&#13;
					rbuggyQSA.push("~=");&#13;
				}&#13;
	&#13;
				// Webkit/Opera - :checked should return selected option elements&#13;
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked&#13;
				// IE8 throws error here and will not see later tests&#13;
				if ( !el.querySelectorAll(":checked").length ) {&#13;
					rbuggyQSA.push(":checked");&#13;
				}&#13;
	&#13;
				// Support: Safari 8+, iOS 8+&#13;
				// https://bugs.webkit.org/show_bug.cgi?id=136851&#13;
				// In-page `selector#id sibling-combinator selector` fails&#13;
				if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {&#13;
					rbuggyQSA.push(".#.+[+~]");&#13;
				}&#13;
			});&#13;
	&#13;
			assert(function( el ) {&#13;
				el.innerHTML = "&lt;a href='' disabled='disabled'&gt;&lt;/a&gt;" +&#13;
					"&lt;select disabled='disabled'&gt;&lt;option/&gt;&lt;/select&gt;";&#13;
	&#13;
				// Support: Windows 8 Native Apps&#13;
				// The type and name attributes are restricted during .innerHTML assignment&#13;
				var input = document.createElement("input");&#13;
				input.setAttribute( "type", "hidden" );&#13;
				el.appendChild( input ).setAttribute( "name", "D" );&#13;
	&#13;
				// Support: IE8&#13;
				// Enforce case-sensitivity of name attribute&#13;
				if ( el.querySelectorAll("[name=d]").length ) {&#13;
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );&#13;
				}&#13;
	&#13;
				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)&#13;
				// IE8 throws error here and will not see later tests&#13;
				if ( el.querySelectorAll(":enabled").length !== 2 ) {&#13;
					rbuggyQSA.push( ":enabled", ":disabled" );&#13;
				}&#13;
	&#13;
				// Support: IE9-11+&#13;
				// IE's :disabled selector does not pick up the children of disabled fieldsets&#13;
				docElem.appendChild( el ).disabled = true;&#13;
				if ( el.querySelectorAll(":disabled").length !== 2 ) {&#13;
					rbuggyQSA.push( ":enabled", ":disabled" );&#13;
				}&#13;
	&#13;
				// Opera 10-11 does not throw on post-comma invalid pseudos&#13;
				el.querySelectorAll("*,:x");&#13;
				rbuggyQSA.push(",.*:");&#13;
			});&#13;
		}&#13;
	&#13;
		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||&#13;
			docElem.webkitMatchesSelector ||&#13;
			docElem.mozMatchesSelector ||&#13;
			docElem.oMatchesSelector ||&#13;
			docElem.msMatchesSelector) )) ) {&#13;
	&#13;
			assert(function( el ) {&#13;
				// Check to see if it's possible to do matchesSelector&#13;
				// on a disconnected node (IE 9)&#13;
				support.disconnectedMatch = matches.call( el, "*" );&#13;
	&#13;
				// This should fail with an exception&#13;
				// Gecko does not error, returns false instead&#13;
				matches.call( el, "[s!='']:x" );&#13;
				rbuggyMatches.push( "!=", pseudos );&#13;
			});&#13;
		}&#13;
	&#13;
		rbuggyQSA = rbuggyQSA.length &amp;&amp; new RegExp( rbuggyQSA.join("|") );&#13;
		rbuggyMatches = rbuggyMatches.length &amp;&amp; new RegExp( rbuggyMatches.join("|") );&#13;
	&#13;
		/* Contains&#13;
		---------------------------------------------------------------------- */&#13;
		hasCompare = rnative.test( docElem.compareDocumentPosition );&#13;
	&#13;
		// Element contains another&#13;
		// Purposefully self-exclusive&#13;
		// As in, an element does not contain itself&#13;
		contains = hasCompare || rnative.test( docElem.contains ) ?&#13;
			function( a, b ) {&#13;
				var adown = a.nodeType === 9 ? a.documentElement : a,&#13;
					bup = b &amp;&amp; b.parentNode;&#13;
				return a === bup || !!( bup &amp;&amp; bup.nodeType === 1 &amp;&amp; (&#13;
					adown.contains ?&#13;
						adown.contains( bup ) :&#13;
						a.compareDocumentPosition &amp;&amp; a.compareDocumentPosition( bup ) &amp; 16&#13;
				));&#13;
			} :&#13;
			function( a, b ) {&#13;
				if ( b ) {&#13;
					while ( (b = b.parentNode) ) {&#13;
						if ( b === a ) {&#13;
							return true;&#13;
						}&#13;
					}&#13;
				}&#13;
				return false;&#13;
			};&#13;
	&#13;
		/* Sorting&#13;
		---------------------------------------------------------------------- */&#13;
	&#13;
		// Document order sorting&#13;
		sortOrder = hasCompare ?&#13;
		function( a, b ) {&#13;
	&#13;
			// Flag for duplicate removal&#13;
			if ( a === b ) {&#13;
				hasDuplicate = true;&#13;
				return 0;&#13;
			}&#13;
	&#13;
			// Sort on method existence if only one input has compareDocumentPosition&#13;
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;&#13;
			if ( compare ) {&#13;
				return compare;&#13;
			}&#13;
	&#13;
			// Calculate position if both inputs belong to the same document&#13;
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?&#13;
				a.compareDocumentPosition( b ) :&#13;
	&#13;
				// Otherwise we know they are disconnected&#13;
				1;&#13;
	&#13;
			// Disconnected nodes&#13;
			if ( compare &amp; 1 ||&#13;
				(!support.sortDetached &amp;&amp; b.compareDocumentPosition( a ) === compare) ) {&#13;
	&#13;
				// Choose the first element that is related to our preferred document&#13;
				if ( a === document || a.ownerDocument === preferredDoc &amp;&amp; contains(preferredDoc, a) ) {&#13;
					return -1;&#13;
				}&#13;
				if ( b === document || b.ownerDocument === preferredDoc &amp;&amp; contains(preferredDoc, b) ) {&#13;
					return 1;&#13;
				}&#13;
	&#13;
				// Maintain original order&#13;
				return sortInput ?&#13;
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :&#13;
					0;&#13;
			}&#13;
	&#13;
			return compare &amp; 4 ? -1 : 1;&#13;
		} :&#13;
		function( a, b ) {&#13;
			// Exit early if the nodes are identical&#13;
			if ( a === b ) {&#13;
				hasDuplicate = true;&#13;
				return 0;&#13;
			}&#13;
	&#13;
			var cur,&#13;
				i = 0,&#13;
				aup = a.parentNode,&#13;
				bup = b.parentNode,&#13;
				ap = [ a ],&#13;
				bp = [ b ];&#13;
	&#13;
			// Parentless nodes are either documents or disconnected&#13;
			if ( !aup || !bup ) {&#13;
				return a === document ? -1 :&#13;
					b === document ? 1 :&#13;
					aup ? -1 :&#13;
					bup ? 1 :&#13;
					sortInput ?&#13;
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :&#13;
					0;&#13;
	&#13;
			// If the nodes are siblings, we can do a quick check&#13;
			} else if ( aup === bup ) {&#13;
				return siblingCheck( a, b );&#13;
			}&#13;
	&#13;
			// Otherwise we need full lists of their ancestors for comparison&#13;
			cur = a;&#13;
			while ( (cur = cur.parentNode) ) {&#13;
				ap.unshift( cur );&#13;
			}&#13;
			cur = b;&#13;
			while ( (cur = cur.parentNode) ) {&#13;
				bp.unshift( cur );&#13;
			}&#13;
	&#13;
			// Walk down the tree looking for a discrepancy&#13;
			while ( ap[i] === bp[i] ) {&#13;
				i++;&#13;
			}&#13;
	&#13;
			return i ?&#13;
				// Do a sibling check if the nodes have a common ancestor&#13;
				siblingCheck( ap[i], bp[i] ) :&#13;
	&#13;
				// Otherwise nodes in our document sort first&#13;
				ap[i] === preferredDoc ? -1 :&#13;
				bp[i] === preferredDoc ? 1 :&#13;
				0;&#13;
		};&#13;
	&#13;
		return document;&#13;
	};&#13;
	&#13;
	Sizzle.matches = function( expr, elements ) {&#13;
		return Sizzle( expr, null, null, elements );&#13;
	};&#13;
	&#13;
	Sizzle.matchesSelector = function( elem, expr ) {&#13;
		// Set document vars if needed&#13;
		if ( ( elem.ownerDocument || elem ) !== document ) {&#13;
			setDocument( elem );&#13;
		}&#13;
	&#13;
		// Make sure that attribute selectors are quoted&#13;
		expr = expr.replace( rattributeQuotes, "='$1']" );&#13;
	&#13;
		if ( support.matchesSelector &amp;&amp; documentIsHTML &amp;&amp;&#13;
			!compilerCache[ expr + " " ] &amp;&amp;&#13;
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &amp;&amp;&#13;
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {&#13;
	&#13;
			try {&#13;
				var ret = matches.call( elem, expr );&#13;
	&#13;
				// IE 9's matchesSelector returns false on disconnected nodes&#13;
				if ( ret || support.disconnectedMatch ||&#13;
						// As well, disconnected nodes are said to be in a document&#13;
						// fragment in IE 9&#13;
						elem.document &amp;&amp; elem.document.nodeType !== 11 ) {&#13;
					return ret;&#13;
				}&#13;
			} catch (e) {}&#13;
		}&#13;
	&#13;
		return Sizzle( expr, document, null, [ elem ] ).length &gt; 0;&#13;
	};&#13;
	&#13;
	Sizzle.contains = function( context, elem ) {&#13;
		// Set document vars if needed&#13;
		if ( ( context.ownerDocument || context ) !== document ) {&#13;
			setDocument( context );&#13;
		}&#13;
		return contains( context, elem );&#13;
	};&#13;
	&#13;
	Sizzle.attr = function( elem, name ) {&#13;
		// Set document vars if needed&#13;
		if ( ( elem.ownerDocument || elem ) !== document ) {&#13;
			setDocument( elem );&#13;
		}&#13;
	&#13;
		var fn = Expr.attrHandle[ name.toLowerCase() ],&#13;
			// Don't get fooled by Object.prototype properties (jQuery #13807)&#13;
			val = fn &amp;&amp; hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?&#13;
				fn( elem, name, !documentIsHTML ) :&#13;
				undefined;&#13;
	&#13;
		return val !== undefined ?&#13;
			val :&#13;
			support.attributes || !documentIsHTML ?&#13;
				elem.getAttribute( name ) :&#13;
				(val = elem.getAttributeNode(name)) &amp;&amp; val.specified ?&#13;
					val.value :&#13;
					null;&#13;
	};&#13;
	&#13;
	Sizzle.escape = function( sel ) {&#13;
		return (sel + "").replace( rcssescape, fcssescape );&#13;
	};&#13;
	&#13;
	Sizzle.error = function( msg ) {&#13;
		throw new Error( "Syntax error, unrecognized expression: " + msg );&#13;
	};&#13;
	&#13;
	/**&#13;
	 * Document sorting and removing duplicates&#13;
	 * @param {ArrayLike} results&#13;
	 */&#13;
	Sizzle.uniqueSort = function( results ) {&#13;
		var elem,&#13;
			duplicates = [],&#13;
			j = 0,&#13;
			i = 0;&#13;
	&#13;
		// Unless we *know* we can detect duplicates, assume their presence&#13;
		hasDuplicate = !support.detectDuplicates;&#13;
		sortInput = !support.sortStable &amp;&amp; results.slice( 0 );&#13;
		results.sort( sortOrder );&#13;
	&#13;
		if ( hasDuplicate ) {&#13;
			while ( (elem = results[i++]) ) {&#13;
				if ( elem === results[ i ] ) {&#13;
					j = duplicates.push( i );&#13;
				}&#13;
			}&#13;
			while ( j-- ) {&#13;
				results.splice( duplicates[ j ], 1 );&#13;
			}&#13;
		}&#13;
	&#13;
		// Clear input after sorting to release objects&#13;
		// See https://github.com/jquery/sizzle/pull/225&#13;
		sortInput = null;&#13;
	&#13;
		return results;&#13;
	};&#13;
	&#13;
	/**&#13;
	 * Utility function for retrieving the text value of an array of DOM nodes&#13;
	 * @param {Array|Element} elem&#13;
	 */&#13;
	getText = Sizzle.getText = function( elem ) {&#13;
		var node,&#13;
			ret = "",&#13;
			i = 0,&#13;
			nodeType = elem.nodeType;&#13;
	&#13;
		if ( !nodeType ) {&#13;
			// If no nodeType, this is expected to be an array&#13;
			while ( (node = elem[i++]) ) {&#13;
				// Do not traverse comment nodes&#13;
				ret += getText( node );&#13;
			}&#13;
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {&#13;
			// Use textContent for elements&#13;
			// innerText usage removed for consistency of new lines (jQuery #11153)&#13;
			if ( typeof elem.textContent === "string" ) {&#13;
				return elem.textContent;&#13;
			} else {&#13;
				// Traverse its children&#13;
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {&#13;
					ret += getText( elem );&#13;
				}&#13;
			}&#13;
		} else if ( nodeType === 3 || nodeType === 4 ) {&#13;
			return elem.nodeValue;&#13;
		}&#13;
		// Do not include comment or processing instruction nodes&#13;
	&#13;
		return ret;&#13;
	};&#13;
	&#13;
	Expr = Sizzle.selectors = {&#13;
	&#13;
		// Can be adjusted by the user&#13;
		cacheLength: 50,&#13;
	&#13;
		createPseudo: markFunction,&#13;
	&#13;
		match: matchExpr,&#13;
	&#13;
		attrHandle: {},&#13;
	&#13;
		find: {},&#13;
	&#13;
		relative: {&#13;
			"&gt;": { dir: "parentNode", first: true },&#13;
			" ": { dir: "parentNode" },&#13;
			"+": { dir: "previousSibling", first: true },&#13;
			"~": { dir: "previousSibling" }&#13;
		},&#13;
	&#13;
		preFilter: {&#13;
			"ATTR": function( match ) {&#13;
				match[1] = match[1].replace( runescape, funescape );&#13;
	&#13;
				// Move the given value to match[3] whether quoted or unquoted&#13;
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );&#13;
	&#13;
				if ( match[2] === "~=" ) {&#13;
					match[3] = " " + match[3] + " ";&#13;
				}&#13;
	&#13;
				return match.slice( 0, 4 );&#13;
			},&#13;
	&#13;
			"CHILD": function( match ) {&#13;
				/* matches from matchExpr["CHILD"]&#13;
					1 type (only|nth|...)&#13;
					2 what (child|of-type)&#13;
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)&#13;
					4 xn-component of xn+y argument ([+-]?\d*n|)&#13;
					5 sign of xn-component&#13;
					6 x of xn-component&#13;
					7 sign of y-component&#13;
					8 y of y-component&#13;
				*/&#13;
				match[1] = match[1].toLowerCase();&#13;
	&#13;
				if ( match[1].slice( 0, 3 ) === "nth" ) {&#13;
					// nth-* requires argument&#13;
					if ( !match[3] ) {&#13;
						Sizzle.error( match[0] );&#13;
					}&#13;
	&#13;
					// numeric x and y parameters for Expr.filter.CHILD&#13;
					// remember that false/true cast respectively to 0/1&#13;
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );&#13;
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );&#13;
	&#13;
				// other types prohibit arguments&#13;
				} else if ( match[3] ) {&#13;
					Sizzle.error( match[0] );&#13;
				}&#13;
	&#13;
				return match;&#13;
			},&#13;
	&#13;
			"PSEUDO": function( match ) {&#13;
				var excess,&#13;
					unquoted = !match[6] &amp;&amp; match[2];&#13;
	&#13;
				if ( matchExpr["CHILD"].test( match[0] ) ) {&#13;
					return null;&#13;
				}&#13;
	&#13;
				// Accept quoted arguments as-is&#13;
				if ( match[3] ) {&#13;
					match[2] = match[4] || match[5] || "";&#13;
	&#13;
				// Strip excess characters from unquoted arguments&#13;
				} else if ( unquoted &amp;&amp; rpseudo.test( unquoted ) &amp;&amp;&#13;
					// Get excess from tokenize (recursively)&#13;
					(excess = tokenize( unquoted, true )) &amp;&amp;&#13;
					// advance to the next closing parenthesis&#13;
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {&#13;
	&#13;
					// excess is a negative index&#13;
					match[0] = match[0].slice( 0, excess );&#13;
					match[2] = unquoted.slice( 0, excess );&#13;
				}&#13;
	&#13;
				// Return only captures needed by the pseudo filter method (type and argument)&#13;
				return match.slice( 0, 3 );&#13;
			}&#13;
		},&#13;
	&#13;
		filter: {&#13;
	&#13;
			"TAG": function( nodeNameSelector ) {&#13;
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();&#13;
				return nodeNameSelector === "*" ?&#13;
					function() { return true; } :&#13;
					function( elem ) {&#13;
						return elem.nodeName &amp;&amp; elem.nodeName.toLowerCase() === nodeName;&#13;
					};&#13;
			},&#13;
	&#13;
			"CLASS": function( className ) {&#13;
				var pattern = classCache[ className + " " ];&#13;
	&#13;
				return pattern ||&#13;
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &amp;&amp;&#13;
					classCache( className, function( elem ) {&#13;
						return pattern.test( typeof elem.className === "string" &amp;&amp; elem.className || typeof elem.getAttribute !== "undefined" &amp;&amp; elem.getAttribute("class") || "" );&#13;
					});&#13;
			},&#13;
	&#13;
			"ATTR": function( name, operator, check ) {&#13;
				return function( elem ) {&#13;
					var result = Sizzle.attr( elem, name );&#13;
	&#13;
					if ( result == null ) {&#13;
						return operator === "!=";&#13;
					}&#13;
					if ( !operator ) {&#13;
						return true;&#13;
					}&#13;
	&#13;
					result += "";&#13;
	&#13;
					return operator === "=" ? result === check :&#13;
						operator === "!=" ? result !== check :&#13;
						operator === "^=" ? check &amp;&amp; result.indexOf( check ) === 0 :&#13;
						operator === "*=" ? check &amp;&amp; result.indexOf( check ) &gt; -1 :&#13;
						operator === "$=" ? check &amp;&amp; result.slice( -check.length ) === check :&#13;
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) &gt; -1 :&#13;
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :&#13;
						false;&#13;
				};&#13;
			},&#13;
	&#13;
			"CHILD": function( type, what, argument, first, last ) {&#13;
				var simple = type.slice( 0, 3 ) !== "nth",&#13;
					forward = type.slice( -4 ) !== "last",&#13;
					ofType = what === "of-type";&#13;
	&#13;
				return first === 1 &amp;&amp; last === 0 ?&#13;
	&#13;
					// Shortcut for :nth-*(n)&#13;
					function( elem ) {&#13;
						return !!elem.parentNode;&#13;
					} :&#13;
	&#13;
					function( elem, context, xml ) {&#13;
						var cache, uniqueCache, outerCache, node, nodeIndex, start,&#13;
							dir = simple !== forward ? "nextSibling" : "previousSibling",&#13;
							parent = elem.parentNode,&#13;
							name = ofType &amp;&amp; elem.nodeName.toLowerCase(),&#13;
							useCache = !xml &amp;&amp; !ofType,&#13;
							diff = false;&#13;
	&#13;
						if ( parent ) {&#13;
	&#13;
							// :(first|last|only)-(child|of-type)&#13;
							if ( simple ) {&#13;
								while ( dir ) {&#13;
									node = elem;&#13;
									while ( (node = node[ dir ]) ) {&#13;
										if ( ofType ?&#13;
											node.nodeName.toLowerCase() === name :&#13;
											node.nodeType === 1 ) {&#13;
	&#13;
											return false;&#13;
										}&#13;
									}&#13;
									// Reverse direction for :only-* (if we haven't yet done so)&#13;
									start = dir = type === "only" &amp;&amp; !start &amp;&amp; "nextSibling";&#13;
								}&#13;
								return true;&#13;
							}&#13;
	&#13;
							start = [ forward ? parent.firstChild : parent.lastChild ];&#13;
	&#13;
							// non-xml :nth-child(...) stores cache data on `parent`&#13;
							if ( forward &amp;&amp; useCache ) {&#13;
	&#13;
								// Seek `elem` from a previously-cached index&#13;
	&#13;
								// ...in a gzip-friendly way&#13;
								node = parent;&#13;
								outerCache = node[ expando ] || (node[ expando ] = {});&#13;
	&#13;
								// Support: IE &lt;9 only&#13;
								// Defend against cloned attroperties (jQuery gh-1709)&#13;
								uniqueCache = outerCache[ node.uniqueID ] ||&#13;
									(outerCache[ node.uniqueID ] = {});&#13;
	&#13;
								cache = uniqueCache[ type ] || [];&#13;
								nodeIndex = cache[ 0 ] === dirruns &amp;&amp; cache[ 1 ];&#13;
								diff = nodeIndex &amp;&amp; cache[ 2 ];&#13;
								node = nodeIndex &amp;&amp; parent.childNodes[ nodeIndex ];&#13;
	&#13;
								while ( (node = ++nodeIndex &amp;&amp; node &amp;&amp; node[ dir ] ||&#13;
	&#13;
									// Fallback to seeking `elem` from the start&#13;
									(diff = nodeIndex = 0) || start.pop()) ) {&#13;
	&#13;
									// When found, cache indexes on `parent` and break&#13;
									if ( node.nodeType === 1 &amp;&amp; ++diff &amp;&amp; node === elem ) {&#13;
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];&#13;
										break;&#13;
									}&#13;
								}&#13;
	&#13;
							} else {&#13;
								// Use previously-cached element index if available&#13;
								if ( useCache ) {&#13;
									// ...in a gzip-friendly way&#13;
									node = elem;&#13;
									outerCache = node[ expando ] || (node[ expando ] = {});&#13;
	&#13;
									// Support: IE &lt;9 only&#13;
									// Defend against cloned attroperties (jQuery gh-1709)&#13;
									uniqueCache = outerCache[ node.uniqueID ] ||&#13;
										(outerCache[ node.uniqueID ] = {});&#13;
	&#13;
									cache = uniqueCache[ type ] || [];&#13;
									nodeIndex = cache[ 0 ] === dirruns &amp;&amp; cache[ 1 ];&#13;
									diff = nodeIndex;&#13;
								}&#13;
	&#13;
								// xml :nth-child(...)&#13;
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)&#13;
								if ( diff === false ) {&#13;
									// Use the same loop as above to seek `elem` from the start&#13;
									while ( (node = ++nodeIndex &amp;&amp; node &amp;&amp; node[ dir ] ||&#13;
										(diff = nodeIndex = 0) || start.pop()) ) {&#13;
	&#13;
										if ( ( ofType ?&#13;
											node.nodeName.toLowerCase() === name :&#13;
											node.nodeType === 1 ) &amp;&amp;&#13;
											++diff ) {&#13;
	&#13;
											// Cache the index of each encountered element&#13;
											if ( useCache ) {&#13;
												outerCache = node[ expando ] || (node[ expando ] = {});&#13;
	&#13;
												// Support: IE &lt;9 only&#13;
												// Defend against cloned attroperties (jQuery gh-1709)&#13;
												uniqueCache = outerCache[ node.uniqueID ] ||&#13;
													(outerCache[ node.uniqueID ] = {});&#13;
	&#13;
												uniqueCache[ type ] = [ dirruns, diff ];&#13;
											}&#13;
	&#13;
											if ( node === elem ) {&#13;
												break;&#13;
											}&#13;
										}&#13;
									}&#13;
								}&#13;
							}&#13;
	&#13;
							// Incorporate the offset, then check against cycle size&#13;
							diff -= last;&#13;
							return diff === first || ( diff % first === 0 &amp;&amp; diff / first &gt;= 0 );&#13;
						}&#13;
					};&#13;
			},&#13;
	&#13;
			"PSEUDO": function( pseudo, argument ) {&#13;
				// pseudo-class names are case-insensitive&#13;
				// http://www.w3.org/TR/selectors/#pseudo-classes&#13;
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters&#13;
				// Remember that setFilters inherits from pseudos&#13;
				var args,&#13;
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||&#13;
						Sizzle.error( "unsupported pseudo: " + pseudo );&#13;
	&#13;
				// The user may use createPseudo to indicate that&#13;
				// arguments are needed to create the filter function&#13;
				// just as Sizzle does&#13;
				if ( fn[ expando ] ) {&#13;
					return fn( argument );&#13;
				}&#13;
	&#13;
				// But maintain support for old signatures&#13;
				if ( fn.length &gt; 1 ) {&#13;
					args = [ pseudo, pseudo, "", argument ];&#13;
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?&#13;
						markFunction(function( seed, matches ) {&#13;
							var idx,&#13;
								matched = fn( seed, argument ),&#13;
								i = matched.length;&#13;
							while ( i-- ) {&#13;
								idx = indexOf( seed, matched[i] );&#13;
								seed[ idx ] = !( matches[ idx ] = matched[i] );&#13;
							}&#13;
						}) :&#13;
						function( elem ) {&#13;
							return fn( elem, 0, args );&#13;
						};&#13;
				}&#13;
	&#13;
				return fn;&#13;
			}&#13;
		},&#13;
	&#13;
		pseudos: {&#13;
			// Potentially complex pseudos&#13;
			"not": markFunction(function( selector ) {&#13;
				// Trim the selector passed to compile&#13;
				// to avoid treating leading and trailing&#13;
				// spaces as combinators&#13;
				var input = [],&#13;
					results = [],&#13;
					matcher = compile( selector.replace( rtrim, "$1" ) );&#13;
	&#13;
				return matcher[ expando ] ?&#13;
					markFunction(function( seed, matches, context, xml ) {&#13;
						var elem,&#13;
							unmatched = matcher( seed, null, xml, [] ),&#13;
							i = seed.length;&#13;
	&#13;
						// Match elements unmatched by `matcher`&#13;
						while ( i-- ) {&#13;
							if ( (elem = unmatched[i]) ) {&#13;
								seed[i] = !(matches[i] = elem);&#13;
							}&#13;
						}&#13;
					}) :&#13;
					function( elem, context, xml ) {&#13;
						input[0] = elem;&#13;
						matcher( input, null, xml, results );&#13;
						// Don't keep the element (issue #299)&#13;
						input[0] = null;&#13;
						return !results.pop();&#13;
					};&#13;
			}),&#13;
	&#13;
			"has": markFunction(function( selector ) {&#13;
				return function( elem ) {&#13;
					return Sizzle( selector, elem ).length &gt; 0;&#13;
				};&#13;
			}),&#13;
	&#13;
			"contains": markFunction(function( text ) {&#13;
				text = text.replace( runescape, funescape );&#13;
				return function( elem ) {&#13;
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) &gt; -1;&#13;
				};&#13;
			}),&#13;
	&#13;
			// "Whether an element is represented by a :lang() selector&#13;
			// is based solely on the element's language value&#13;
			// being equal to the identifier C,&#13;
			// or beginning with the identifier C immediately followed by "-".&#13;
			// The matching of C against the element's language value is performed case-insensitively.&#13;
			// The identifier C does not have to be a valid language name."&#13;
			// http://www.w3.org/TR/selectors/#lang-pseudo&#13;
			"lang": markFunction( function( lang ) {&#13;
				// lang value must be a valid identifier&#13;
				if ( !ridentifier.test(lang || "") ) {&#13;
					Sizzle.error( "unsupported lang: " + lang );&#13;
				}&#13;
				lang = lang.replace( runescape, funescape ).toLowerCase();&#13;
				return function( elem ) {&#13;
					var elemLang;&#13;
					do {&#13;
						if ( (elemLang = documentIsHTML ?&#13;
							elem.lang :&#13;
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {&#13;
	&#13;
							elemLang = elemLang.toLowerCase();&#13;
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;&#13;
						}&#13;
					} while ( (elem = elem.parentNode) &amp;&amp; elem.nodeType === 1 );&#13;
					return false;&#13;
				};&#13;
			}),&#13;
	&#13;
			// Miscellaneous&#13;
			"target": function( elem ) {&#13;
				var hash = window.location &amp;&amp; window.location.hash;&#13;
				return hash &amp;&amp; hash.slice( 1 ) === elem.id;&#13;
			},&#13;
	&#13;
			"root": function( elem ) {&#13;
				return elem === docElem;&#13;
			},&#13;
	&#13;
			"focus": function( elem ) {&#13;
				return elem === document.activeElement &amp;&amp; (!document.hasFocus || document.hasFocus()) &amp;&amp; !!(elem.type || elem.href || ~elem.tabIndex);&#13;
			},&#13;
	&#13;
			// Boolean properties&#13;
			"enabled": createDisabledPseudo( false ),&#13;
			"disabled": createDisabledPseudo( true ),&#13;
	&#13;
			"checked": function( elem ) {&#13;
				// In CSS3, :checked should return both checked and selected elements&#13;
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked&#13;
				var nodeName = elem.nodeName.toLowerCase();&#13;
				return (nodeName === "input" &amp;&amp; !!elem.checked) || (nodeName === "option" &amp;&amp; !!elem.selected);&#13;
			},&#13;
	&#13;
			"selected": function( elem ) {&#13;
				// Accessing this property makes selected-by-default&#13;
				// options in Safari work properly&#13;
				if ( elem.parentNode ) {&#13;
					elem.parentNode.selectedIndex;&#13;
				}&#13;
	&#13;
				return elem.selected === true;&#13;
			},&#13;
	&#13;
			// Contents&#13;
			"empty": function( elem ) {&#13;
				// http://www.w3.org/TR/selectors/#empty-pseudo&#13;
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),&#13;
				//   but not by others (comment: 8; processing instruction: 7; etc.)&#13;
				// nodeType &lt; 6 works because attributes (2) do not appear as children&#13;
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {&#13;
					if ( elem.nodeType &lt; 6 ) {&#13;
						return false;&#13;
					}&#13;
				}&#13;
				return true;&#13;
			},&#13;
	&#13;
			"parent": function( elem ) {&#13;
				return !Expr.pseudos["empty"]( elem );&#13;
			},&#13;
	&#13;
			// Element/input types&#13;
			"header": function( elem ) {&#13;
				return rheader.test( elem.nodeName );&#13;
			},&#13;
	&#13;
			"input": function( elem ) {&#13;
				return rinputs.test( elem.nodeName );&#13;
			},&#13;
	&#13;
			"button": function( elem ) {&#13;
				var name = elem.nodeName.toLowerCase();&#13;
				return name === "input" &amp;&amp; elem.type === "button" || name === "button";&#13;
			},&#13;
	&#13;
			"text": function( elem ) {&#13;
				var attr;&#13;
				return elem.nodeName.toLowerCase() === "input" &amp;&amp;&#13;
					elem.type === "text" &amp;&amp;&#13;
	&#13;
					// Support: IE&lt;8&#13;
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"&#13;
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );&#13;
			},&#13;
	&#13;
			// Position-in-collection&#13;
			"first": createPositionalPseudo(function() {&#13;
				return [ 0 ];&#13;
			}),&#13;
	&#13;
			"last": createPositionalPseudo(function( matchIndexes, length ) {&#13;
				return [ length - 1 ];&#13;
			}),&#13;
	&#13;
			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {&#13;
				return [ argument &lt; 0 ? argument + length : argument ];&#13;
			}),&#13;
	&#13;
			"even": createPositionalPseudo(function( matchIndexes, length ) {&#13;
				var i = 0;&#13;
				for ( ; i &lt; length; i += 2 ) {&#13;
					matchIndexes.push( i );&#13;
				}&#13;
				return matchIndexes;&#13;
			}),&#13;
	&#13;
			"odd": createPositionalPseudo(function( matchIndexes, length ) {&#13;
				var i = 1;&#13;
				for ( ; i &lt; length; i += 2 ) {&#13;
					matchIndexes.push( i );&#13;
				}&#13;
				return matchIndexes;&#13;
			}),&#13;
	&#13;
			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {&#13;
				var i = argument &lt; 0 ? argument + length : argument;&#13;
				for ( ; --i &gt;= 0; ) {&#13;
					matchIndexes.push( i );&#13;
				}&#13;
				return matchIndexes;&#13;
			}),&#13;
	&#13;
			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {&#13;
				var i = argument &lt; 0 ? argument + length : argument;&#13;
				for ( ; ++i &lt; length; ) {&#13;
					matchIndexes.push( i );&#13;
				}&#13;
				return matchIndexes;&#13;
			})&#13;
		}&#13;
	};&#13;
	&#13;
	Expr.pseudos["nth"] = Expr.pseudos["eq"];&#13;
	&#13;
	// Add button/input type pseudos&#13;
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {&#13;
		Expr.pseudos[ i ] = createInputPseudo( i );&#13;
	}&#13;
	for ( i in { submit: true, reset: true } ) {&#13;
		Expr.pseudos[ i ] = createButtonPseudo( i );&#13;
	}&#13;
	&#13;
	// Easy API for creating new setFilters&#13;
	function setFilters() {}&#13;
	setFilters.prototype = Expr.filters = Expr.pseudos;&#13;
	Expr.setFilters = new setFilters();&#13;
	&#13;
	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {&#13;
		var matched, match, tokens, type,&#13;
			soFar, groups, preFilters,&#13;
			cached = tokenCache[ selector + " " ];&#13;
	&#13;
		if ( cached ) {&#13;
			return parseOnly ? 0 : cached.slice( 0 );&#13;
		}&#13;
	&#13;
		soFar = selector;&#13;
		groups = [];&#13;
		preFilters = Expr.preFilter;&#13;
	&#13;
		while ( soFar ) {&#13;
	&#13;
			// Comma and first run&#13;
			if ( !matched || (match = rcomma.exec( soFar )) ) {&#13;
				if ( match ) {&#13;
					// Don't consume trailing commas as valid&#13;
					soFar = soFar.slice( match[0].length ) || soFar;&#13;
				}&#13;
				groups.push( (tokens = []) );&#13;
			}&#13;
	&#13;
			matched = false;&#13;
	&#13;
			// Combinators&#13;
			if ( (match = rcombinators.exec( soFar )) ) {&#13;
				matched = match.shift();&#13;
				tokens.push({&#13;
					value: matched,&#13;
					// Cast descendant combinators to space&#13;
					type: match[0].replace( rtrim, " " )&#13;
				});&#13;
				soFar = soFar.slice( matched.length );&#13;
			}&#13;
	&#13;
			// Filters&#13;
			for ( type in Expr.filter ) {&#13;
				if ( (match = matchExpr[ type ].exec( soFar )) &amp;&amp; (!preFilters[ type ] ||&#13;
					(match = preFilters[ type ]( match ))) ) {&#13;
					matched = match.shift();&#13;
					tokens.push({&#13;
						value: matched,&#13;
						type: type,&#13;
						matches: match&#13;
					});&#13;
					soFar = soFar.slice( matched.length );&#13;
				}&#13;
			}&#13;
	&#13;
			if ( !matched ) {&#13;
				break;&#13;
			}&#13;
		}&#13;
	&#13;
		// Return the length of the invalid excess&#13;
		// if we're just parsing&#13;
		// Otherwise, throw an error or return tokens&#13;
		return parseOnly ?&#13;
			soFar.length :&#13;
			soFar ?&#13;
				Sizzle.error( selector ) :&#13;
				// Cache the tokens&#13;
				tokenCache( selector, groups ).slice( 0 );&#13;
	};&#13;
	&#13;
	function toSelector( tokens ) {&#13;
		var i = 0,&#13;
			len = tokens.length,&#13;
			selector = "";&#13;
		for ( ; i &lt; len; i++ ) {&#13;
			selector += tokens[i].value;&#13;
		}&#13;
		return selector;&#13;
	}&#13;
	&#13;
	function addCombinator( matcher, combinator, base ) {&#13;
		var dir = combinator.dir,&#13;
			skip = combinator.next,&#13;
			key = skip || dir,&#13;
			checkNonElements = base &amp;&amp; key === "parentNode",&#13;
			doneName = done++;&#13;
	&#13;
		return combinator.first ?&#13;
			// Check against closest ancestor/preceding element&#13;
			function( elem, context, xml ) {&#13;
				while ( (elem = elem[ dir ]) ) {&#13;
					if ( elem.nodeType === 1 || checkNonElements ) {&#13;
						return matcher( elem, context, xml );&#13;
					}&#13;
				}&#13;
				return false;&#13;
			} :&#13;
	&#13;
			// Check against all ancestor/preceding elements&#13;
			function( elem, context, xml ) {&#13;
				var oldCache, uniqueCache, outerCache,&#13;
					newCache = [ dirruns, doneName ];&#13;
	&#13;
				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching&#13;
				if ( xml ) {&#13;
					while ( (elem = elem[ dir ]) ) {&#13;
						if ( elem.nodeType === 1 || checkNonElements ) {&#13;
							if ( matcher( elem, context, xml ) ) {&#13;
								return true;&#13;
							}&#13;
						}&#13;
					}&#13;
				} else {&#13;
					while ( (elem = elem[ dir ]) ) {&#13;
						if ( elem.nodeType === 1 || checkNonElements ) {&#13;
							outerCache = elem[ expando ] || (elem[ expando ] = {});&#13;
	&#13;
							// Support: IE &lt;9 only&#13;
							// Defend against cloned attroperties (jQuery gh-1709)&#13;
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});&#13;
	&#13;
							if ( skip &amp;&amp; skip === elem.nodeName.toLowerCase() ) {&#13;
								elem = elem[ dir ] || elem;&#13;
							} else if ( (oldCache = uniqueCache[ key ]) &amp;&amp;&#13;
								oldCache[ 0 ] === dirruns &amp;&amp; oldCache[ 1 ] === doneName ) {&#13;
	&#13;
								// Assign to newCache so results back-propagate to previous elements&#13;
								return (newCache[ 2 ] = oldCache[ 2 ]);&#13;
							} else {&#13;
								// Reuse newcache so results back-propagate to previous elements&#13;
								uniqueCache[ key ] = newCache;&#13;
	&#13;
								// A match means we're done; a fail means we have to keep checking&#13;
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {&#13;
									return true;&#13;
								}&#13;
							}&#13;
						}&#13;
					}&#13;
				}&#13;
				return false;&#13;
			};&#13;
	}&#13;
	&#13;
	function elementMatcher( matchers ) {&#13;
		return matchers.length &gt; 1 ?&#13;
			function( elem, context, xml ) {&#13;
				var i = matchers.length;&#13;
				while ( i-- ) {&#13;
					if ( !matchers[i]( elem, context, xml ) ) {&#13;
						return false;&#13;
					}&#13;
				}&#13;
				return true;&#13;
			} :&#13;
			matchers[0];&#13;
	}&#13;
	&#13;
	function multipleContexts( selector, contexts, results ) {&#13;
		var i = 0,&#13;
			len = contexts.length;&#13;
		for ( ; i &lt; len; i++ ) {&#13;
			Sizzle( selector, contexts[i], results );&#13;
		}&#13;
		return results;&#13;
	}&#13;
	&#13;
	function condense( unmatched, map, filter, context, xml ) {&#13;
		var elem,&#13;
			newUnmatched = [],&#13;
			i = 0,&#13;
			len = unmatched.length,&#13;
			mapped = map != null;&#13;
	&#13;
		for ( ; i &lt; len; i++ ) {&#13;
			if ( (elem = unmatched[i]) ) {&#13;
				if ( !filter || filter( elem, context, xml ) ) {&#13;
					newUnmatched.push( elem );&#13;
					if ( mapped ) {&#13;
						map.push( i );&#13;
					}&#13;
				}&#13;
			}&#13;
		}&#13;
	&#13;
		return newUnmatched;&#13;
	}&#13;
	&#13;
	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {&#13;
		if ( postFilter &amp;&amp; !postFilter[ expando ] ) {&#13;
			postFilter = setMatcher( postFilter );&#13;
		}&#13;
		if ( postFinder &amp;&amp; !postFinder[ expando ] ) {&#13;
			postFinder = setMatcher( postFinder, postSelector );&#13;
		}&#13;
		return markFunction(function( seed, results, context, xml ) {&#13;
			var temp, i, elem,&#13;
				preMap = [],&#13;
				postMap = [],&#13;
				preexisting = results.length,&#13;
	&#13;
				// Get initial elements from seed or context&#13;
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),&#13;
	&#13;
				// Prefilter to get matcher input, preserving a map for seed-results synchronization&#13;
				matcherIn = preFilter &amp;&amp; ( seed || !selector ) ?&#13;
					condense( elems, preMap, preFilter, context, xml ) :&#13;
					elems,&#13;
	&#13;
				matcherOut = matcher ?&#13;
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,&#13;
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?&#13;
	&#13;
						// ...intermediate processing is necessary&#13;
						[] :&#13;
	&#13;
						// ...otherwise use results directly&#13;
						results :&#13;
					matcherIn;&#13;
	&#13;
			// Find primary matches&#13;
			if ( matcher ) {&#13;
				matcher( matcherIn, matcherOut, context, xml );&#13;
			}&#13;
	&#13;
			// Apply postFilter&#13;
			if ( postFilter ) {&#13;
				temp = condense( matcherOut, postMap );&#13;
				postFilter( temp, [], context, xml );&#13;
	&#13;
				// Un-match failing elements by moving them back to matcherIn&#13;
				i = temp.length;&#13;
				while ( i-- ) {&#13;
					if ( (elem = temp[i]) ) {&#13;
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);&#13;
					}&#13;
				}&#13;
			}&#13;
	&#13;
			if ( seed ) {&#13;
				if ( postFinder || preFilter ) {&#13;
					if ( postFinder ) {&#13;
						// Get the final matcherOut by condensing this intermediate into postFinder contexts&#13;
						temp = [];&#13;
						i = matcherOut.length;&#13;
						while ( i-- ) {&#13;
							if ( (elem = matcherOut[i]) ) {&#13;
								// Restore matcherIn since elem is not yet a final match&#13;
								temp.push( (matcherIn[i] = elem) );&#13;
							}&#13;
						}&#13;
						postFinder( null, (matcherOut = []), temp, xml );&#13;
					}&#13;
	&#13;
					// Move matched elements from seed to results to keep them synchronized&#13;
					i = matcherOut.length;&#13;
					while ( i-- ) {&#13;
						if ( (elem = matcherOut[i]) &amp;&amp;&#13;
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) &gt; -1 ) {&#13;
	&#13;
							seed[temp] = !(results[temp] = elem);&#13;
						}&#13;
					}&#13;
				}&#13;
	&#13;
			// Add elements to results, through postFinder if defined&#13;
			} else {&#13;
				matcherOut = condense(&#13;
					matcherOut === results ?&#13;
						matcherOut.splice( preexisting, matcherOut.length ) :&#13;
						matcherOut&#13;
				);&#13;
				if ( postFinder ) {&#13;
					postFinder( null, results, matcherOut, xml );&#13;
				} else {&#13;
					push.apply( results, matcherOut );&#13;
				}&#13;
			}&#13;
		});&#13;
	}&#13;
	&#13;
	function matcherFromTokens( tokens ) {&#13;
		var checkContext, matcher, j,&#13;
			len = tokens.length,&#13;
			leadingRelative = Expr.relative[ tokens[0].type ],&#13;
			implicitRelative = leadingRelative || Expr.relative[" "],&#13;
			i = leadingRelative ? 1 : 0,&#13;
	&#13;
			// The foundational matcher ensures that elements are reachable from top-level context(s)&#13;
			matchContext = addCombinator( function( elem ) {&#13;
				return elem === checkContext;&#13;
			}, implicitRelative, true ),&#13;
			matchAnyContext = addCombinator( function( elem ) {&#13;
				return indexOf( checkContext, elem ) &gt; -1;&#13;
			}, implicitRelative, true ),&#13;
			matchers = [ function( elem, context, xml ) {&#13;
				var ret = ( !leadingRelative &amp;&amp; ( xml || context !== outermostContext ) ) || (&#13;
					(checkContext = context).nodeType ?&#13;
						matchContext( elem, context, xml ) :&#13;
						matchAnyContext( elem, context, xml ) );&#13;
				// Avoid hanging onto element (issue #299)&#13;
				checkContext = null;&#13;
				return ret;&#13;
			} ];&#13;
	&#13;
		for ( ; i &lt; len; i++ ) {&#13;
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {&#13;
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];&#13;
			} else {&#13;
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );&#13;
	&#13;
				// Return special upon seeing a positional matcher&#13;
				if ( matcher[ expando ] ) {&#13;
					// Find the next relative operator (if any) for proper handling&#13;
					j = ++i;&#13;
					for ( ; j &lt; len; j++ ) {&#13;
						if ( Expr.relative[ tokens[j].type ] ) {&#13;
							break;&#13;
						}&#13;
					}&#13;
					return setMatcher(&#13;
						i &gt; 1 &amp;&amp; elementMatcher( matchers ),&#13;
						i &gt; 1 &amp;&amp; toSelector(&#13;
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`&#13;
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })&#13;
						).replace( rtrim, "$1" ),&#13;
						matcher,&#13;
						i &lt; j &amp;&amp; matcherFromTokens( tokens.slice( i, j ) ),&#13;
						j &lt; len &amp;&amp; matcherFromTokens( (tokens = tokens.slice( j )) ),&#13;
						j &lt; len &amp;&amp; toSelector( tokens )&#13;
					);&#13;
				}&#13;
				matchers.push( matcher );&#13;
			}&#13;
		}&#13;
	&#13;
		return elementMatcher( matchers );&#13;
	}&#13;
	&#13;
	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {&#13;
		var bySet = setMatchers.length &gt; 0,&#13;
			byElement = elementMatchers.length &gt; 0,&#13;
			superMatcher = function( seed, context, xml, results, outermost ) {&#13;
				var elem, j, matcher,&#13;
					matchedCount = 0,&#13;
					i = "0",&#13;
					unmatched = seed &amp;&amp; [],&#13;
					setMatched = [],&#13;
					contextBackup = outermostContext,&#13;
					// We must always have either seed elements or outermost context&#13;
					elems = seed || byElement &amp;&amp; Expr.find["TAG"]( "*", outermost ),&#13;
					// Use integer dirruns iff this is the outermost matcher&#13;
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),&#13;
					len = elems.length;&#13;
	&#13;
				if ( outermost ) {&#13;
					outermostContext = context === document || context || outermost;&#13;
				}&#13;
	&#13;
				// Add elements passing elementMatchers directly to results&#13;
				// Support: IE&lt;9, Safari&#13;
				// Tolerate NodeList properties (IE: "length"; Safari: &lt;number&gt;) matching elements by id&#13;
				for ( ; i !== len &amp;&amp; (elem = elems[i]) != null; i++ ) {&#13;
					if ( byElement &amp;&amp; elem ) {&#13;
						j = 0;&#13;
						if ( !context &amp;&amp; elem.ownerDocument !== document ) {&#13;
							setDocument( elem );&#13;
							xml = !documentIsHTML;&#13;
						}&#13;
						while ( (matcher = elementMatchers[j++]) ) {&#13;
							if ( matcher( elem, context || document, xml) ) {&#13;
								results.push( elem );&#13;
								break;&#13;
							}&#13;
						}&#13;
						if ( outermost ) {&#13;
							dirruns = dirrunsUnique;&#13;
						}&#13;
					}&#13;
	&#13;
					// Track unmatched elements for set filters&#13;
					if ( bySet ) {&#13;
						// They will have gone through all possible matchers&#13;
						if ( (elem = !matcher &amp;&amp; elem) ) {&#13;
							matchedCount--;&#13;
						}&#13;
	&#13;
						// Lengthen the array for every element, matched or not&#13;
						if ( seed ) {&#13;
							unmatched.push( elem );&#13;
						}&#13;
					}&#13;
				}&#13;
	&#13;
				// `i` is now the count of elements visited above, and adding it to `matchedCount`&#13;
				// makes the latter nonnegative.&#13;
				matchedCount += i;&#13;
	&#13;
				// Apply set filters to unmatched elements&#13;
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`&#13;
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have&#13;
				// no element matchers and no seed.&#13;
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that&#13;
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also&#13;
				// numerically zero.&#13;
				if ( bySet &amp;&amp; i !== matchedCount ) {&#13;
					j = 0;&#13;
					while ( (matcher = setMatchers[j++]) ) {&#13;
						matcher( unmatched, setMatched, context, xml );&#13;
					}&#13;
	&#13;
					if ( seed ) {&#13;
						// Reintegrate element matches to eliminate the need for sorting&#13;
						if ( matchedCount &gt; 0 ) {&#13;
							while ( i-- ) {&#13;
								if ( !(unmatched[i] || setMatched[i]) ) {&#13;
									setMatched[i] = pop.call( results );&#13;
								}&#13;
							}&#13;
						}&#13;
	&#13;
						// Discard index placeholder values to get only actual matches&#13;
						setMatched = condense( setMatched );&#13;
					}&#13;
	&#13;
					// Add matches to results&#13;
					push.apply( results, setMatched );&#13;
	&#13;
					// Seedless set matches succeeding multiple successful matchers stipulate sorting&#13;
					if ( outermost &amp;&amp; !seed &amp;&amp; setMatched.length &gt; 0 &amp;&amp;&#13;
						( matchedCount + setMatchers.length ) &gt; 1 ) {&#13;
	&#13;
						Sizzle.uniqueSort( results );&#13;
					}&#13;
				}&#13;
	&#13;
				// Override manipulation of globals by nested matchers&#13;
				if ( outermost ) {&#13;
					dirruns = dirrunsUnique;&#13;
					outermostContext = contextBackup;&#13;
				}&#13;
	&#13;
				return unmatched;&#13;
			};&#13;
	&#13;
		return bySet ?&#13;
			markFunction( superMatcher ) :&#13;
			superMatcher;&#13;
	}&#13;
	&#13;
	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {&#13;
		var i,&#13;
			setMatchers = [],&#13;
			elementMatchers = [],&#13;
			cached = compilerCache[ selector + " " ];&#13;
	&#13;
		if ( !cached ) {&#13;
			// Generate a function of recursive functions that can be used to check each element&#13;
			if ( !match ) {&#13;
				match = tokenize( selector );&#13;
			}&#13;
			i = match.length;&#13;
			while ( i-- ) {&#13;
				cached = matcherFromTokens( match[i] );&#13;
				if ( cached[ expando ] ) {&#13;
					setMatchers.push( cached );&#13;
				} else {&#13;
					elementMatchers.push( cached );&#13;
				}&#13;
			}&#13;
	&#13;
			// Cache the compiled function&#13;
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );&#13;
	&#13;
			// Save selector and tokenization&#13;
			cached.selector = selector;&#13;
		}&#13;
		return cached;&#13;
	};&#13;
	&#13;
	/**&#13;
	 * A low-level selection function that works with Sizzle's compiled&#13;
	 *  selector functions&#13;
	 * @param {String|Function} selector A selector or a pre-compiled&#13;
	 *  selector function built with Sizzle.compile&#13;
	 * @param {Element} context&#13;
	 * @param {Array} [results]&#13;
	 * @param {Array} [seed] A set of elements to match against&#13;
	 */&#13;
	select = Sizzle.select = function( selector, context, results, seed ) {&#13;
		var i, tokens, token, type, find,&#13;
			compiled = typeof selector === "function" &amp;&amp; selector,&#13;
			match = !seed &amp;&amp; tokenize( (selector = compiled.selector || selector) );&#13;
	&#13;
		results = results || [];&#13;
	&#13;
		// Try to minimize operations if there is only one selector in the list and no seed&#13;
		// (the latter of which guarantees us context)&#13;
		if ( match.length === 1 ) {&#13;
	&#13;
			// Reduce context if the leading compound selector is an ID&#13;
			tokens = match[0] = match[0].slice( 0 );&#13;
			if ( tokens.length &gt; 2 &amp;&amp; (token = tokens[0]).type === "ID" &amp;&amp;&#13;
					context.nodeType === 9 &amp;&amp; documentIsHTML &amp;&amp; Expr.relative[ tokens[1].type ] ) {&#13;
	&#13;
				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];&#13;
				if ( !context ) {&#13;
					return results;&#13;
	&#13;
				// Precompiled matchers will still verify ancestry, so step up a level&#13;
				} else if ( compiled ) {&#13;
					context = context.parentNode;&#13;
				}&#13;
	&#13;
				selector = selector.slice( tokens.shift().value.length );&#13;
			}&#13;
	&#13;
			// Fetch a seed set for right-to-left matching&#13;
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;&#13;
			while ( i-- ) {&#13;
				token = tokens[i];&#13;
	&#13;
				// Abort if we hit a combinator&#13;
				if ( Expr.relative[ (type = token.type) ] ) {&#13;
					break;&#13;
				}&#13;
				if ( (find = Expr.find[ type ]) ) {&#13;
					// Search, expanding context for leading sibling combinators&#13;
					if ( (seed = find(&#13;
						token.matches[0].replace( runescape, funescape ),&#13;
						rsibling.test( tokens[0].type ) &amp;&amp; testContext( context.parentNode ) || context&#13;
					)) ) {&#13;
	&#13;
						// If seed is empty or no tokens remain, we can return early&#13;
						tokens.splice( i, 1 );&#13;
						selector = seed.length &amp;&amp; toSelector( tokens );&#13;
						if ( !selector ) {&#13;
							push.apply( results, seed );&#13;
							return results;&#13;
						}&#13;
	&#13;
						break;&#13;
					}&#13;
				}&#13;
			}&#13;
		}&#13;
	&#13;
		// Compile and execute a filtering function if one is not provided&#13;
		// Provide `match` to avoid retokenization if we modified the selector above&#13;
		( compiled || compile( selector, match ) )(&#13;
			seed,&#13;
			context,&#13;
			!documentIsHTML,&#13;
			results,&#13;
			!context || rsibling.test( selector ) &amp;&amp; testContext( context.parentNode ) || context&#13;
		);&#13;
		return results;&#13;
	};&#13;
	&#13;
	// One-time assignments&#13;
	&#13;
	// Sort stability&#13;
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;&#13;
	&#13;
	// Support: Chrome 14-35+&#13;
	// Always assume duplicates if they aren't passed to the comparison function&#13;
	support.detectDuplicates = !!hasDuplicate;&#13;
	&#13;
	// Initialize against the default document&#13;
	setDocument();&#13;
	&#13;
	// Support: Webkit&lt;537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)&#13;
	// Detached nodes confoundingly follow *each other*&#13;
	support.sortDetached = assert(function( el ) {&#13;
		// Should return 1, but returns 4 (following)&#13;
		return el.compareDocumentPosition( document.createElement("fieldset") ) &amp; 1;&#13;
	});&#13;
	&#13;
	// Support: IE&lt;8&#13;
	// Prevent attribute/property "interpolation"&#13;
	// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx&#13;
	if ( !assert(function( el ) {&#13;
		el.innerHTML = "&lt;a href='#'&gt;&lt;/a&gt;";&#13;
		return el.firstChild.getAttribute("href") === "#" ;&#13;
	}) ) {&#13;
		addHandle( "type|href|height|width", function( elem, name, isXML ) {&#13;
			if ( !isXML ) {&#13;
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );&#13;
			}&#13;
		});&#13;
	}&#13;
	&#13;
	// Support: IE&lt;9&#13;
	// Use defaultValue in place of getAttribute("value")&#13;
	if ( !support.attributes || !assert(function( el ) {&#13;
		el.innerHTML = "&lt;input/&gt;";&#13;
		el.firstChild.setAttribute( "value", "" );&#13;
		return el.firstChild.getAttribute( "value" ) === "";&#13;
	}) ) {&#13;
		addHandle( "value", function( elem, name, isXML ) {&#13;
			if ( !isXML &amp;&amp; elem.nodeName.toLowerCase() === "input" ) {&#13;
				return elem.defaultValue;&#13;
			}&#13;
		});&#13;
	}&#13;
	&#13;
	// Support: IE&lt;9&#13;
	// Use getAttributeNode to fetch booleans when getAttribute lies&#13;
	if ( !assert(function( el ) {&#13;
		return el.getAttribute("disabled") == null;&#13;
	}) ) {&#13;
		addHandle( booleans, function( elem, name, isXML ) {&#13;
			var val;&#13;
			if ( !isXML ) {&#13;
				return elem[ name ] === true ? name.toLowerCase() :&#13;
						(val = elem.getAttributeNode( name )) &amp;&amp; val.specified ?&#13;
						val.value :&#13;
					null;&#13;
			}&#13;
		});&#13;
	}&#13;
	&#13;
	return Sizzle;&#13;
	&#13;
	})( window );&#13;
	&#13;
	&#13;
	&#13;
	jQuery.find = Sizzle;&#13;
	jQuery.expr = Sizzle.selectors;&#13;
	&#13;
	// Deprecated&#13;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;&#13;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;&#13;
	jQuery.text = Sizzle.getText;&#13;
	jQuery.isXMLDoc = Sizzle.isXML;&#13;
	jQuery.contains = Sizzle.contains;&#13;
	jQuery.escapeSelector = Sizzle.escape;&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	var dir = function( elem, dir, until ) {&#13;
		var matched = [],&#13;
			truncate = until !== undefined;&#13;
	&#13;
		while ( ( elem = elem[ dir ] ) &amp;&amp; elem.nodeType !== 9 ) {&#13;
			if ( elem.nodeType === 1 ) {&#13;
				if ( truncate &amp;&amp; jQuery( elem ).is( until ) ) {&#13;
					break;&#13;
				}&#13;
				matched.push( elem );&#13;
			}&#13;
		}&#13;
		return matched;&#13;
	};&#13;
	&#13;
	&#13;
	var siblings = function( n, elem ) {&#13;
		var matched = [];&#13;
	&#13;
		for ( ; n; n = n.nextSibling ) {&#13;
			if ( n.nodeType === 1 &amp;&amp; n !== elem ) {&#13;
				matched.push( n );&#13;
			}&#13;
		}&#13;
	&#13;
		return matched;&#13;
	};&#13;
	&#13;
	&#13;
	var rneedsContext = jQuery.expr.match.needsContext;&#13;
	&#13;
	&#13;
	&#13;
	function nodeName( elem, name ) {&#13;
	&#13;
	  return elem.nodeName &amp;&amp; elem.nodeName.toLowerCase() === name.toLowerCase();&#13;
	&#13;
	};&#13;
	var rsingleTag = ( /^&lt;([a-z][^\/\0&gt;:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?&gt;(?:&lt;\/\1&gt;|)$/i );&#13;
	&#13;
	&#13;
	&#13;
	// Implement the identical functionality for filter and not&#13;
	function winnow( elements, qualifier, not ) {&#13;
		if ( isFunction( qualifier ) ) {&#13;
			return jQuery.grep( elements, function( elem, i ) {&#13;
				return !!qualifier.call( elem, i, elem ) !== not;&#13;
			} );&#13;
		}&#13;
	&#13;
		// Single element&#13;
		if ( qualifier.nodeType ) {&#13;
			return jQuery.grep( elements, function( elem ) {&#13;
				return ( elem === qualifier ) !== not;&#13;
			} );&#13;
		}&#13;
	&#13;
		// Arraylike of elements (jQuery, arguments, Array)&#13;
		if ( typeof qualifier !== "string" ) {&#13;
			return jQuery.grep( elements, function( elem ) {&#13;
				return ( indexOf.call( qualifier, elem ) &gt; -1 ) !== not;&#13;
			} );&#13;
		}&#13;
	&#13;
		// Filtered directly for both simple and complex selectors&#13;
		return jQuery.filter( qualifier, elements, not );&#13;
	}&#13;
	&#13;
	jQuery.filter = function( expr, elems, not ) {&#13;
		var elem = elems[ 0 ];&#13;
	&#13;
		if ( not ) {&#13;
			expr = ":not(" + expr + ")";&#13;
		}&#13;
	&#13;
		if ( elems.length === 1 &amp;&amp; elem.nodeType === 1 ) {&#13;
			return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];&#13;
		}&#13;
	&#13;
		return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {&#13;
			return elem.nodeType === 1;&#13;
		} ) );&#13;
	};&#13;
	&#13;
	jQuery.fn.extend( {&#13;
		find: function( selector ) {&#13;
			var i, ret,&#13;
				len = this.length,&#13;
				self = this;&#13;
	&#13;
			if ( typeof selector !== "string" ) {&#13;
				return this.pushStack( jQuery( selector ).filter( function() {&#13;
					for ( i = 0; i &lt; len; i++ ) {&#13;
						if ( jQuery.contains( self[ i ], this ) ) {&#13;
							return true;&#13;
						}&#13;
					}&#13;
				} ) );&#13;
			}&#13;
	&#13;
			ret = this.pushStack( [] );&#13;
	&#13;
			for ( i = 0; i &lt; len; i++ ) {&#13;
				jQuery.find( selector, self[ i ], ret );&#13;
			}&#13;
	&#13;
			return len &gt; 1 ? jQuery.uniqueSort( ret ) : ret;&#13;
		},&#13;
		filter: function( selector ) {&#13;
			return this.pushStack( winnow( this, selector || [], false ) );&#13;
		},&#13;
		not: function( selector ) {&#13;
			return this.pushStack( winnow( this, selector || [], true ) );&#13;
		},&#13;
		is: function( selector ) {&#13;
			return !!winnow(&#13;
				this,&#13;
	&#13;
				// If this is a positional/relative selector, check membership in the returned set&#13;
				// so $("p:first").is("p:last") won't return true for a doc with two "p".&#13;
				typeof selector === "string" &amp;&amp; rneedsContext.test( selector ) ?&#13;
					jQuery( selector ) :&#13;
					selector || [],&#13;
				false&#13;
			).length;&#13;
		}&#13;
	} );&#13;
	&#13;
	&#13;
	// Initialize a jQuery object&#13;
	&#13;
	&#13;
	// A central reference to the root jQuery(document)&#13;
	var rootjQuery,&#13;
	&#13;
		// A simple way to check for HTML strings&#13;
		// Prioritize #id over &lt;tag&gt; to avoid XSS via location.hash (#9521)&#13;
		// Strict HTML recognition (#11290: must start with &lt;)&#13;
		// Shortcut simple #id case for speed&#13;
		rquickExpr = /^(?:\s*(&lt;[\w\W]+&gt;)[^&gt;]*|#([\w-]+))$/,&#13;
	&#13;
		init = jQuery.fn.init = function( selector, context, root ) {&#13;
			var match, elem;&#13;
	&#13;
			// HANDLE: $(""), $(null), $(undefined), $(false)&#13;
			if ( !selector ) {&#13;
				return this;&#13;
			}&#13;
	&#13;
			// Method init() accepts an alternate rootjQuery&#13;
			// so migrate can support jQuery.sub (gh-2101)&#13;
			root = root || rootjQuery;&#13;
	&#13;
			// Handle HTML strings&#13;
			if ( typeof selector === "string" ) {&#13;
				if ( selector[ 0 ] === "&lt;" &amp;&amp;&#13;
					selector[ selector.length - 1 ] === "&gt;" &amp;&amp;&#13;
					selector.length &gt;= 3 ) {&#13;
	&#13;
					// Assume that strings that start and end with &lt;&gt; are HTML and skip the regex check&#13;
					match = [ null, selector, null ];&#13;
	&#13;
				} else {&#13;
					match = rquickExpr.exec( selector );&#13;
				}&#13;
	&#13;
				// Match html or make sure no context is specified for #id&#13;
				if ( match &amp;&amp; ( match[ 1 ] || !context ) ) {&#13;
	&#13;
					// HANDLE: $(html) -&gt; $(array)&#13;
					if ( match[ 1 ] ) {&#13;
						context = context instanceof jQuery ? context[ 0 ] : context;&#13;
	&#13;
						// Option to run scripts is true for back-compat&#13;
						// Intentionally let the error be thrown if parseHTML is not present&#13;
						jQuery.merge( this, jQuery.parseHTML(&#13;
							match[ 1 ],&#13;
							context &amp;&amp; context.nodeType ? context.ownerDocument || context : document,&#13;
							true&#13;
						) );&#13;
	&#13;
						// HANDLE: $(html, props)&#13;
						if ( rsingleTag.test( match[ 1 ] ) &amp;&amp; jQuery.isPlainObject( context ) ) {&#13;
							for ( match in context ) {&#13;
	&#13;
								// Properties of context are called as methods if possible&#13;
								if ( isFunction( this[ match ] ) ) {&#13;
									this[ match ]( context[ match ] );&#13;
	&#13;
								// ...and otherwise set as attributes&#13;
								} else {&#13;
									this.attr( match, context[ match ] );&#13;
								}&#13;
							}&#13;
						}&#13;
	&#13;
						return this;&#13;
	&#13;
					// HANDLE: $(#id)&#13;
					} else {&#13;
						elem = document.getElementById( match[ 2 ] );&#13;
	&#13;
						if ( elem ) {&#13;
	&#13;
							// Inject the element directly into the jQuery object&#13;
							this[ 0 ] = elem;&#13;
							this.length = 1;&#13;
						}&#13;
						return this;&#13;
					}&#13;
	&#13;
				// HANDLE: $(expr, $(...))&#13;
				} else if ( !context || context.jquery ) {&#13;
					return ( context || root ).find( selector );&#13;
	&#13;
				// HANDLE: $(expr, context)&#13;
				// (which is just equivalent to: $(context).find(expr)&#13;
				} else {&#13;
					return this.constructor( context ).find( selector );&#13;
				}&#13;
	&#13;
			// HANDLE: $(DOMElement)&#13;
			} else if ( selector.nodeType ) {&#13;
				this[ 0 ] = selector;&#13;
				this.length = 1;&#13;
				return this;&#13;
	&#13;
			// HANDLE: $(function)&#13;
			// Shortcut for document ready&#13;
			} else if ( isFunction( selector ) ) {&#13;
				return root.ready !== undefined ?&#13;
					root.ready( selector ) :&#13;
	&#13;
					// Execute immediately if ready is not present&#13;
					selector( jQuery );&#13;
			}&#13;
	&#13;
			return jQuery.makeArray( selector, this );&#13;
		};&#13;
	&#13;
	// Give the init function the jQuery prototype for later instantiation&#13;
	init.prototype = jQuery.fn;&#13;
	&#13;
	// Initialize central reference&#13;
	rootjQuery = jQuery( document );&#13;
	&#13;
	&#13;
	var rparentsprev = /^(?:parents|prev(?:Until|All))/,&#13;
	&#13;
		// Methods guaranteed to produce a unique set when starting from a unique set&#13;
		guaranteedUnique = {&#13;
			children: true,&#13;
			contents: true,&#13;
			next: true,&#13;
			prev: true&#13;
		};&#13;
	&#13;
	jQuery.fn.extend( {&#13;
		has: function( target ) {&#13;
			var targets = jQuery( target, this ),&#13;
				l = targets.length;&#13;
	&#13;
			return this.filter( function() {&#13;
				var i = 0;&#13;
				for ( ; i &lt; l; i++ ) {&#13;
					if ( jQuery.contains( this, targets[ i ] ) ) {&#13;
						return true;&#13;
					}&#13;
				}&#13;
			} );&#13;
		},&#13;
	&#13;
		closest: function( selectors, context ) {&#13;
			var cur,&#13;
				i = 0,&#13;
				l = this.length,&#13;
				matched = [],&#13;
				targets = typeof selectors !== "string" &amp;&amp; jQuery( selectors );&#13;
	&#13;
			// Positional selectors never match, since there's no _selection_ context&#13;
			if ( !rneedsContext.test( selectors ) ) {&#13;
				for ( ; i &lt; l; i++ ) {&#13;
					for ( cur = this[ i ]; cur &amp;&amp; cur !== context; cur = cur.parentNode ) {&#13;
	&#13;
						// Always skip document fragments&#13;
						if ( cur.nodeType &lt; 11 &amp;&amp; ( targets ?&#13;
							targets.index( cur ) &gt; -1 :&#13;
	&#13;
							// Don't pass non-elements to Sizzle&#13;
							cur.nodeType === 1 &amp;&amp;&#13;
								jQuery.find.matchesSelector( cur, selectors ) ) ) {&#13;
	&#13;
							matched.push( cur );&#13;
							break;&#13;
						}&#13;
					}&#13;
				}&#13;
			}&#13;
	&#13;
			return this.pushStack( matched.length &gt; 1 ? jQuery.uniqueSort( matched ) : matched );&#13;
		},&#13;
	&#13;
		// Determine the position of an element within the set&#13;
		index: function( elem ) {&#13;
	&#13;
			// No argument, return index in parent&#13;
			if ( !elem ) {&#13;
				return ( this[ 0 ] &amp;&amp; this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;&#13;
			}&#13;
	&#13;
			// Index in selector&#13;
			if ( typeof elem === "string" ) {&#13;
				return indexOf.call( jQuery( elem ), this[ 0 ] );&#13;
			}&#13;
	&#13;
			// Locate the position of the desired element&#13;
			return indexOf.call( this,&#13;
	&#13;
				// If it receives a jQuery object, the first element is used&#13;
				elem.jquery ? elem[ 0 ] : elem&#13;
			);&#13;
		},&#13;
	&#13;
		add: function( selector, context ) {&#13;
			return this.pushStack(&#13;
				jQuery.uniqueSort(&#13;
					jQuery.merge( this.get(), jQuery( selector, context ) )&#13;
				)&#13;
			);&#13;
		},&#13;
	&#13;
		addBack: function( selector ) {&#13;
			return this.add( selector == null ?&#13;
				this.prevObject : this.prevObject.filter( selector )&#13;
			);&#13;
		}&#13;
	} );&#13;
	&#13;
	function sibling( cur, dir ) {&#13;
		while ( ( cur = cur[ dir ] ) &amp;&amp; cur.nodeType !== 1 ) {}&#13;
		return cur;&#13;
	}&#13;
	&#13;
	jQuery.each( {&#13;
		parent: function( elem ) {&#13;
			var parent = elem.parentNode;&#13;
			return parent &amp;&amp; parent.nodeType !== 11 ? parent : null;&#13;
		},&#13;
		parents: function( elem ) {&#13;
			return dir( elem, "parentNode" );&#13;
		},&#13;
		parentsUntil: function( elem, i, until ) {&#13;
			return dir( elem, "parentNode", until );&#13;
		},&#13;
		next: function( elem ) {&#13;
			return sibling( elem, "nextSibling" );&#13;
		},&#13;
		prev: function( elem ) {&#13;
			return sibling( elem, "previousSibling" );&#13;
		},&#13;
		nextAll: function( elem ) {&#13;
			return dir( elem, "nextSibling" );&#13;
		},&#13;
		prevAll: function( elem ) {&#13;
			return dir( elem, "previousSibling" );&#13;
		},&#13;
		nextUntil: function( elem, i, until ) {&#13;
			return dir( elem, "nextSibling", until );&#13;
		},&#13;
		prevUntil: function( elem, i, until ) {&#13;
			return dir( elem, "previousSibling", until );&#13;
		},&#13;
		siblings: function( elem ) {&#13;
			return siblings( ( elem.parentNode || {} ).firstChild, elem );&#13;
		},&#13;
		children: function( elem ) {&#13;
			return siblings( elem.firstChild );&#13;
		},&#13;
		contents: function( elem ) {&#13;
	        if ( nodeName( elem, "iframe" ) ) {&#13;
	            return elem.contentDocument;&#13;
	        }&#13;
	&#13;
	        // Support: IE 9 - 11 only, iOS 7 only, Android Browser &lt;=4.3 only&#13;
	        // Treat the template element as a regular one in browsers that&#13;
	        // don't support it.&#13;
	        if ( nodeName( elem, "template" ) ) {&#13;
	            elem = elem.content || elem;&#13;
	        }&#13;
	&#13;
	        return jQuery.merge( [], elem.childNodes );&#13;
		}&#13;
	}, function( name, fn ) {&#13;
		jQuery.fn[ name ] = function( until, selector ) {&#13;
			var matched = jQuery.map( this, fn, until );&#13;
	&#13;
			if ( name.slice( -5 ) !== "Until" ) {&#13;
				selector = until;&#13;
			}&#13;
	&#13;
			if ( selector &amp;&amp; typeof selector === "string" ) {&#13;
				matched = jQuery.filter( selector, matched );&#13;
			}&#13;
	&#13;
			if ( this.length &gt; 1 ) {&#13;
	&#13;
				// Remove duplicates&#13;
				if ( !guaranteedUnique[ name ] ) {&#13;
					jQuery.uniqueSort( matched );&#13;
				}&#13;
	&#13;
				// Reverse order for parents* and prev-derivatives&#13;
				if ( rparentsprev.test( name ) ) {&#13;
					matched.reverse();&#13;
				}&#13;
			}&#13;
	&#13;
			return this.pushStack( matched );&#13;
		};&#13;
	} );&#13;
	var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );&#13;
	&#13;
	&#13;
	&#13;
	// Convert String-formatted options into Object-formatted ones&#13;
	function createOptions( options ) {&#13;
		var object = {};&#13;
		jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {&#13;
			object[ flag ] = true;&#13;
		} );&#13;
		return object;&#13;
	}&#13;
	&#13;
	/*&#13;
	 * Create a callback list using the following parameters:&#13;
	 *&#13;
	 *	options: an optional list of space-separated options that will change how&#13;
	 *			the callback list behaves or a more traditional option object&#13;
	 *&#13;
	 * By default a callback list will act like an event callback list and can be&#13;
	 * "fired" multiple times.&#13;
	 *&#13;
	 * Possible options:&#13;
	 *&#13;
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)&#13;
	 *&#13;
	 *	memory:			will keep track of previous values and will call any callback added&#13;
	 *					after the list has been fired right away with the latest "memorized"&#13;
	 *					values (like a Deferred)&#13;
	 *&#13;
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)&#13;
	 *&#13;
	 *	stopOnFalse:	interrupt callings when a callback returns false&#13;
	 *&#13;
	 */&#13;
	jQuery.Callbacks = function( options ) {&#13;
	&#13;
		// Convert options from String-formatted to Object-formatted if needed&#13;
		// (we check in cache first)&#13;
		options = typeof options === "string" ?&#13;
			createOptions( options ) :&#13;
			jQuery.extend( {}, options );&#13;
	&#13;
		var // Flag to know if list is currently firing&#13;
			firing,&#13;
	&#13;
			// Last fire value for non-forgettable lists&#13;
			memory,&#13;
	&#13;
			// Flag to know if list was already fired&#13;
			fired,&#13;
	&#13;
			// Flag to prevent firing&#13;
			locked,&#13;
	&#13;
			// Actual callback list&#13;
			list = [],&#13;
	&#13;
			// Queue of execution data for repeatable lists&#13;
			queue = [],&#13;
	&#13;
			// Index of currently firing callback (modified by add/remove as needed)&#13;
			firingIndex = -1,&#13;
	&#13;
			// Fire callbacks&#13;
			fire = function() {&#13;
	&#13;
				// Enforce single-firing&#13;
				locked = locked || options.once;&#13;
	&#13;
				// Execute callbacks for all pending executions,&#13;
				// respecting firingIndex overrides and runtime changes&#13;
				fired = firing = true;&#13;
				for ( ; queue.length; firingIndex = -1 ) {&#13;
					memory = queue.shift();&#13;
					while ( ++firingIndex &lt; list.length ) {&#13;
	&#13;
						// Run callback and check for early termination&#13;
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &amp;&amp;&#13;
							options.stopOnFalse ) {&#13;
	&#13;
							// Jump to end and forget the data so .add doesn't re-fire&#13;
							firingIndex = list.length;&#13;
							memory = false;&#13;
						}&#13;
					}&#13;
				}&#13;
	&#13;
				// Forget the data if we're done with it&#13;
				if ( !options.memory ) {&#13;
					memory = false;&#13;
				}&#13;
	&#13;
				firing = false;&#13;
	&#13;
				// Clean up if we're done firing for good&#13;
				if ( locked ) {&#13;
	&#13;
					// Keep an empty list if we have data for future add calls&#13;
					if ( memory ) {&#13;
						list = [];&#13;
	&#13;
					// Otherwise, this object is spent&#13;
					} else {&#13;
						list = "";&#13;
					}&#13;
				}&#13;
			},&#13;
	&#13;
			// Actual Callbacks object&#13;
			self = {&#13;
	&#13;
				// Add a callback or a collection of callbacks to the list&#13;
				add: function() {&#13;
					if ( list ) {&#13;
	&#13;
						// If we have memory from a past run, we should fire after adding&#13;
						if ( memory &amp;&amp; !firing ) {&#13;
							firingIndex = list.length - 1;&#13;
							queue.push( memory );&#13;
						}&#13;
	&#13;
						( function add( args ) {&#13;
							jQuery.each( args, function( _, arg ) {&#13;
								if ( isFunction( arg ) ) {&#13;
									if ( !options.unique || !self.has( arg ) ) {&#13;
										list.push( arg );&#13;
									}&#13;
								} else if ( arg &amp;&amp; arg.length &amp;&amp; toType( arg ) !== "string" ) {&#13;
	&#13;
									// Inspect recursively&#13;
									add( arg );&#13;
								}&#13;
							} );&#13;
						} )( arguments );&#13;
	&#13;
						if ( memory &amp;&amp; !firing ) {&#13;
							fire();&#13;
						}&#13;
					}&#13;
					return this;&#13;
				},&#13;
	&#13;
				// Remove a callback from the list&#13;
				remove: function() {&#13;
					jQuery.each( arguments, function( _, arg ) {&#13;
						var index;&#13;
						while ( ( index = jQuery.inArray( arg, list, index ) ) &gt; -1 ) {&#13;
							list.splice( index, 1 );&#13;
	&#13;
							// Handle firing indexes&#13;
							if ( index &lt;= firingIndex ) {&#13;
								firingIndex--;&#13;
							}&#13;
						}&#13;
					} );&#13;
					return this;&#13;
				},&#13;
	&#13;
				// Check if a given callback is in the list.&#13;
				// If no argument is given, return whether or not list has callbacks attached.&#13;
				has: function( fn ) {&#13;
					return fn ?&#13;
						jQuery.inArray( fn, list ) &gt; -1 :&#13;
						list.length &gt; 0;&#13;
				},&#13;
	&#13;
				// Remove all callbacks from the list&#13;
				empty: function() {&#13;
					if ( list ) {&#13;
						list = [];&#13;
					}&#13;
					return this;&#13;
				},&#13;
	&#13;
				// Disable .fire and .add&#13;
				// Abort any current/pending executions&#13;
				// Clear all callbacks and values&#13;
				disable: function() {&#13;
					locked = queue = [];&#13;
					list = memory = "";&#13;
					return this;&#13;
				},&#13;
				disabled: function() {&#13;
					return !list;&#13;
				},&#13;
	&#13;
				// Disable .fire&#13;
				// Also disable .add unless we have memory (since it would have no effect)&#13;
				// Abort any pending executions&#13;
				lock: function() {&#13;
					locked = queue = [];&#13;
					if ( !memory &amp;&amp; !firing ) {&#13;
						list = memory = "";&#13;
					}&#13;
					return this;&#13;
				},&#13;
				locked: function() {&#13;
					return !!locked;&#13;
				},&#13;
	&#13;
				// Call all callbacks with the given context and arguments&#13;
				fireWith: function( context, args ) {&#13;
					if ( !locked ) {&#13;
						args = args || [];&#13;
						args = [ context, args.slice ? args.slice() : args ];&#13;
						queue.push( args );&#13;
						if ( !firing ) {&#13;
							fire();&#13;
						}&#13;
					}&#13;
					return this;&#13;
				},&#13;
	&#13;
				// Call all the callbacks with the given arguments&#13;
				fire: function() {&#13;
					self.fireWith( this, arguments );&#13;
					return this;&#13;
				},&#13;
	&#13;
				// To know if the callbacks have already been called at least once&#13;
				fired: function() {&#13;
					return !!fired;&#13;
				}&#13;
			};&#13;
	&#13;
		return self;&#13;
	};&#13;
	&#13;
	&#13;
	function Identity( v ) {&#13;
		return v;&#13;
	}&#13;
	function Thrower( ex ) {&#13;
		throw ex;&#13;
	}&#13;
	&#13;
	function adoptValue( value, resolve, reject, noValue ) {&#13;
		var method;&#13;
	&#13;
		try {&#13;
	&#13;
			// Check for promise aspect first to privilege synchronous behavior&#13;
			if ( value &amp;&amp; isFunction( ( method = value.promise ) ) ) {&#13;
				method.call( value ).done( resolve ).fail( reject );&#13;
	&#13;
			// Other thenables&#13;
			} else if ( value &amp;&amp; isFunction( ( method = value.then ) ) ) {&#13;
				method.call( value, resolve, reject );&#13;
	&#13;
			// Other non-thenables&#13;
			} else {&#13;
	&#13;
				// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:&#13;
				// * false: [ value ].slice( 0 ) =&gt; resolve( value )&#13;
				// * true: [ value ].slice( 1 ) =&gt; resolve()&#13;
				resolve.apply( undefined, [ value ].slice( noValue ) );&#13;
			}&#13;
	&#13;
		// For Promises/A+, convert exceptions into rejections&#13;
		// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in&#13;
		// Deferred#then to conditionally suppress rejection.&#13;
		} catch ( value ) {&#13;
	&#13;
			// Support: Android 4.0 only&#13;
			// Strict mode functions invoked without .call/.apply get global-object context&#13;
			reject.apply( undefined, [ value ] );&#13;
		}&#13;
	}&#13;
	&#13;
	jQuery.extend( {&#13;
	&#13;
		Deferred: function( func ) {&#13;
			var tuples = [&#13;
	&#13;
					// action, add listener, callbacks,&#13;
					// ... .then handlers, argument index, [final state]&#13;
					[ "notify", "progress", jQuery.Callbacks( "memory" ),&#13;
						jQuery.Callbacks( "memory" ), 2 ],&#13;
					[ "resolve", "done", jQuery.Callbacks( "once memory" ),&#13;
						jQuery.Callbacks( "once memory" ), 0, "resolved" ],&#13;
					[ "reject", "fail", jQuery.Callbacks( "once memory" ),&#13;
						jQuery.Callbacks( "once memory" ), 1, "rejected" ]&#13;
				],&#13;
				state = "pending",&#13;
				promise = {&#13;
					state: function() {&#13;
						return state;&#13;
					},&#13;
					always: function() {&#13;
						deferred.done( arguments ).fail( arguments );&#13;
						return this;&#13;
					},&#13;
					"catch": function( fn ) {&#13;
						return promise.then( null, fn );&#13;
					},&#13;
	&#13;
					// Keep pipe for back-compat&#13;
					pipe: function( /* fnDone, fnFail, fnProgress */ ) {&#13;
						var fns = arguments;&#13;
	&#13;
						return jQuery.Deferred( function( newDefer ) {&#13;
							jQuery.each( tuples, function( i, tuple ) {&#13;
	&#13;
								// Map tuples (progress, done, fail) to arguments (done, fail, progress)&#13;
								var fn = isFunction( fns[ tuple[ 4 ] ] ) &amp;&amp; fns[ tuple[ 4 ] ];&#13;
	&#13;
								// deferred.progress(function() { bind to newDefer or newDefer.notify })&#13;
								// deferred.done(function() { bind to newDefer or newDefer.resolve })&#13;
								// deferred.fail(function() { bind to newDefer or newDefer.reject })&#13;
								deferred[ tuple[ 1 ] ]( function() {&#13;
									var returned = fn &amp;&amp; fn.apply( this, arguments );&#13;
									if ( returned &amp;&amp; isFunction( returned.promise ) ) {&#13;
										returned.promise()&#13;
											.progress( newDefer.notify )&#13;
											.done( newDefer.resolve )&#13;
											.fail( newDefer.reject );&#13;
									} else {&#13;
										newDefer[ tuple[ 0 ] + "With" ](&#13;
											this,&#13;
											fn ? [ returned ] : arguments&#13;
										);&#13;
									}&#13;
								} );&#13;
							} );&#13;
							fns = null;&#13;
						} ).promise();&#13;
					},&#13;
					then: function( onFulfilled, onRejected, onProgress ) {&#13;
						var maxDepth = 0;&#13;
						function resolve( depth, deferred, handler, special ) {&#13;
							return function() {&#13;
								var that = this,&#13;
									args = arguments,&#13;
									mightThrow = function() {&#13;
										var returned, then;&#13;
	&#13;
										// Support: Promises/A+ section 2.3.3.3.3&#13;
										// https://promisesaplus.com/#point-59&#13;
										// Ignore double-resolution attempts&#13;
										if ( depth &lt; maxDepth ) {&#13;
											return;&#13;
										}&#13;
	&#13;
										returned = handler.apply( that, args );&#13;
	&#13;
										// Support: Promises/A+ section 2.3.1&#13;
										// https://promisesaplus.com/#point-48&#13;
										if ( returned === deferred.promise() ) {&#13;
											throw new TypeError( "Thenable self-resolution" );&#13;
										}&#13;
	&#13;
										// Support: Promises/A+ sections 2.3.3.1, 3.5&#13;
										// https://promisesaplus.com/#point-54&#13;
										// https://promisesaplus.com/#point-75&#13;
										// Retrieve `then` only once&#13;
										then = returned &amp;&amp;&#13;
	&#13;
											// Support: Promises/A+ section 2.3.4&#13;
											// https://promisesaplus.com/#point-64&#13;
											// Only check objects and functions for thenability&#13;
											( typeof returned === "object" ||&#13;
												typeof returned === "function" ) &amp;&amp;&#13;
											returned.then;&#13;
	&#13;
										// Handle a returned thenable&#13;
										if ( isFunction( then ) ) {&#13;
	&#13;
											// Special processors (notify) just wait for resolution&#13;
											if ( special ) {&#13;
												then.call(&#13;
													returned,&#13;
													resolve( maxDepth, deferred, Identity, special ),&#13;
													resolve( maxDepth, deferred, Thrower, special )&#13;
												);&#13;
	&#13;
											// Normal processors (resolve) also hook into progress&#13;
											} else {&#13;
	&#13;
												// ...and disregard older resolution values&#13;
												maxDepth++;&#13;
	&#13;
												then.call(&#13;
													returned,&#13;
													resolve( maxDepth, deferred, Identity, special ),&#13;
													resolve( maxDepth, deferred, Thrower, special ),&#13;
													resolve( maxDepth, deferred, Identity,&#13;
														deferred.notifyWith )&#13;
												);&#13;
											}&#13;
	&#13;
										// Handle all other returned values&#13;
										} else {&#13;
	&#13;
											// Only substitute handlers pass on context&#13;
											// and multiple values (non-spec behavior)&#13;
											if ( handler !== Identity ) {&#13;
												that = undefined;&#13;
												args = [ returned ];&#13;
											}&#13;
	&#13;
											// Process the value(s)&#13;
											// Default process is resolve&#13;
											( special || deferred.resolveWith )( that, args );&#13;
										}&#13;
									},&#13;
	&#13;
									// Only normal processors (resolve) catch and reject exceptions&#13;
									process = special ?&#13;
										mightThrow :&#13;
										function() {&#13;
											try {&#13;
												mightThrow();&#13;
											} catch ( e ) {&#13;
	&#13;
												if ( jQuery.Deferred.exceptionHook ) {&#13;
													jQuery.Deferred.exceptionHook( e,&#13;
														process.stackTrace );&#13;
												}&#13;
	&#13;
												// Support: Promises/A+ section 2.3.3.3.4.1&#13;
												// https://promisesaplus.com/#point-61&#13;
												// Ignore post-resolution exceptions&#13;
												if ( depth + 1 &gt;= maxDepth ) {&#13;
	&#13;
													// Only substitute handlers pass on context&#13;
													// and multiple values (non-spec behavior)&#13;
													if ( handler !== Thrower ) {&#13;
														that = undefined;&#13;
														args = [ e ];&#13;
													}&#13;
	&#13;
													deferred.rejectWith( that, args );&#13;
												}&#13;
											}&#13;
										};&#13;
	&#13;
								// Support: Promises/A+ section 2.3.3.3.1&#13;
								// https://promisesaplus.com/#point-57&#13;
								// Re-resolve promises immediately to dodge false rejection from&#13;
								// subsequent errors&#13;
								if ( depth ) {&#13;
									process();&#13;
								} else {&#13;
	&#13;
									// Call an optional hook to record the stack, in case of exception&#13;
									// since it's otherwise lost when execution goes async&#13;
									if ( jQuery.Deferred.getStackHook ) {&#13;
										process.stackTrace = jQuery.Deferred.getStackHook();&#13;
									}&#13;
									window.setTimeout( process );&#13;
								}&#13;
							};&#13;
						}&#13;
	&#13;
						return jQuery.Deferred( function( newDefer ) {&#13;
	&#13;
							// progress_handlers.add( ... )&#13;
							tuples[ 0 ][ 3 ].add(&#13;
								resolve(&#13;
									0,&#13;
									newDefer,&#13;
									isFunction( onProgress ) ?&#13;
										onProgress :&#13;
										Identity,&#13;
									newDefer.notifyWith&#13;
								)&#13;
							);&#13;
	&#13;
							// fulfilled_handlers.add( ... )&#13;
							tuples[ 1 ][ 3 ].add(&#13;
								resolve(&#13;
									0,&#13;
									newDefer,&#13;
									isFunction( onFulfilled ) ?&#13;
										onFulfilled :&#13;
										Identity&#13;
								)&#13;
							);&#13;
	&#13;
							// rejected_handlers.add( ... )&#13;
							tuples[ 2 ][ 3 ].add(&#13;
								resolve(&#13;
									0,&#13;
									newDefer,&#13;
									isFunction( onRejected ) ?&#13;
										onRejected :&#13;
										Thrower&#13;
								)&#13;
							);&#13;
						} ).promise();&#13;
					},&#13;
	&#13;
					// Get a promise for this deferred&#13;
					// If obj is provided, the promise aspect is added to the object&#13;
					promise: function( obj ) {&#13;
						return obj != null ? jQuery.extend( obj, promise ) : promise;&#13;
					}&#13;
				},&#13;
				deferred = {};&#13;
	&#13;
			// Add list-specific methods&#13;
			jQuery.each( tuples, function( i, tuple ) {&#13;
				var list = tuple[ 2 ],&#13;
					stateString = tuple[ 5 ];&#13;
	&#13;
				// promise.progress = list.add&#13;
				// promise.done = list.add&#13;
				// promise.fail = list.add&#13;
				promise[ tuple[ 1 ] ] = list.add;&#13;
	&#13;
				// Handle state&#13;
				if ( stateString ) {&#13;
					list.add(&#13;
						function() {&#13;
	&#13;
							// state = "resolved" (i.e., fulfilled)&#13;
							// state = "rejected"&#13;
							state = stateString;&#13;
						},&#13;
	&#13;
						// rejected_callbacks.disable&#13;
						// fulfilled_callbacks.disable&#13;
						tuples[ 3 - i ][ 2 ].disable,&#13;
	&#13;
						// rejected_handlers.disable&#13;
						// fulfilled_handlers.disable&#13;
						tuples[ 3 - i ][ 3 ].disable,&#13;
	&#13;
						// progress_callbacks.lock&#13;
						tuples[ 0 ][ 2 ].lock,&#13;
	&#13;
						// progress_handlers.lock&#13;
						tuples[ 0 ][ 3 ].lock&#13;
					);&#13;
				}&#13;
	&#13;
				// progress_handlers.fire&#13;
				// fulfilled_handlers.fire&#13;
				// rejected_handlers.fire&#13;
				list.add( tuple[ 3 ].fire );&#13;
	&#13;
				// deferred.notify = function() { deferred.notifyWith(...) }&#13;
				// deferred.resolve = function() { deferred.resolveWith(...) }&#13;
				// deferred.reject = function() { deferred.rejectWith(...) }&#13;
				deferred[ tuple[ 0 ] ] = function() {&#13;
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );&#13;
					return this;&#13;
				};&#13;
	&#13;
				// deferred.notifyWith = list.fireWith&#13;
				// deferred.resolveWith = list.fireWith&#13;
				// deferred.rejectWith = list.fireWith&#13;
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;&#13;
			} );&#13;
	&#13;
			// Make the deferred a promise&#13;
			promise.promise( deferred );&#13;
	&#13;
			// Call given func if any&#13;
			if ( func ) {&#13;
				func.call( deferred, deferred );&#13;
			}&#13;
	&#13;
			// All done!&#13;
			return deferred;&#13;
		},&#13;
	&#13;
		// Deferred helper&#13;
		when: function( singleValue ) {&#13;
			var&#13;
	&#13;
				// count of uncompleted subordinates&#13;
				remaining = arguments.length,&#13;
	&#13;
				// count of unprocessed arguments&#13;
				i = remaining,&#13;
	&#13;
				// subordinate fulfillment data&#13;
				resolveContexts = Array( i ),&#13;
				resolveValues = slice.call( arguments ),&#13;
	&#13;
				// the master Deferred&#13;
				master = jQuery.Deferred(),&#13;
	&#13;
				// subordinate callback factory&#13;
				updateFunc = function( i ) {&#13;
					return function( value ) {&#13;
						resolveContexts[ i ] = this;&#13;
						resolveValues[ i ] = arguments.length &gt; 1 ? slice.call( arguments ) : value;&#13;
						if ( !( --remaining ) ) {&#13;
							master.resolveWith( resolveContexts, resolveValues );&#13;
						}&#13;
					};&#13;
				};&#13;
	&#13;
			// Single- and empty arguments are adopted like Promise.resolve&#13;
			if ( remaining &lt;= 1 ) {&#13;
				adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,&#13;
					!remaining );&#13;
	&#13;
				// Use .then() to unwrap secondary thenables (cf. gh-3000)&#13;
				if ( master.state() === "pending" ||&#13;
					isFunction( resolveValues[ i ] &amp;&amp; resolveValues[ i ].then ) ) {&#13;
	&#13;
					return master.then();&#13;
				}&#13;
			}&#13;
	&#13;
			// Multiple arguments are aggregated like Promise.all array elements&#13;
			while ( i-- ) {&#13;
				adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );&#13;
			}&#13;
	&#13;
			return master.promise();&#13;
		}&#13;
	} );&#13;
	&#13;
	&#13;
	// These usually indicate a programmer mistake during development,&#13;
	// warn about them ASAP rather than swallowing them by default.&#13;
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;&#13;
	&#13;
	jQuery.Deferred.exceptionHook = function( error, stack ) {&#13;
	&#13;
		// Support: IE 8 - 9 only&#13;
		// Console exists when dev tools are open, which can happen at any time&#13;
		if ( window.console &amp;&amp; window.console.warn &amp;&amp; error &amp;&amp; rerrorNames.test( error.name ) ) {&#13;
			window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );&#13;
		}&#13;
	};&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	jQuery.readyException = function( error ) {&#13;
		window.setTimeout( function() {&#13;
			throw error;&#13;
		} );&#13;
	};&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	// The deferred used on DOM ready&#13;
	var readyList = jQuery.Deferred();&#13;
	&#13;
	jQuery.fn.ready = function( fn ) {&#13;
	&#13;
		readyList&#13;
			.then( fn )&#13;
	&#13;
			// Wrap jQuery.readyException in a function so that the lookup&#13;
			// happens at the time of error handling instead of callback&#13;
			// registration.&#13;
			.catch( function( error ) {&#13;
				jQuery.readyException( error );&#13;
			} );&#13;
	&#13;
		return this;&#13;
	};&#13;
	&#13;
	jQuery.extend( {&#13;
	&#13;
		// Is the DOM ready to be used? Set to true once it occurs.&#13;
		isReady: false,&#13;
	&#13;
		// A counter to track how many items to wait for before&#13;
		// the ready event fires. See #6781&#13;
		readyWait: 1,&#13;
	&#13;
		// Handle when the DOM is ready&#13;
		ready: function( wait ) {&#13;
	&#13;
			// Abort if there are pending holds or we're already ready&#13;
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {&#13;
				return;&#13;
			}&#13;
	&#13;
			// Remember that the DOM is ready&#13;
			jQuery.isReady = true;&#13;
	&#13;
			// If a normal DOM Ready event fired, decrement, and wait if need be&#13;
			if ( wait !== true &amp;&amp; --jQuery.readyWait &gt; 0 ) {&#13;
				return;&#13;
			}&#13;
	&#13;
			// If there are functions bound, to execute&#13;
			readyList.resolveWith( document, [ jQuery ] );&#13;
		}&#13;
	} );&#13;
	&#13;
	jQuery.ready.then = readyList.then;&#13;
	&#13;
	// The ready event handler and self cleanup method&#13;
	function completed() {&#13;
		document.removeEventListener( "DOMContentLoaded", completed );&#13;
		window.removeEventListener( "load", completed );&#13;
		jQuery.ready();&#13;
	}&#13;
	&#13;
	// Catch cases where $(document).ready() is called&#13;
	// after the browser event has already occurred.&#13;
	// Support: IE &lt;=9 - 10 only&#13;
	// Older IE sometimes signals "interactive" too soon&#13;
	if ( document.readyState === "complete" ||&#13;
		( document.readyState !== "loading" &amp;&amp; !document.documentElement.doScroll ) ) {&#13;
	&#13;
		// Handle it asynchronously to allow scripts the opportunity to delay ready&#13;
		window.setTimeout( jQuery.ready );&#13;
	&#13;
	} else {&#13;
	&#13;
		// Use the handy event callback&#13;
		document.addEventListener( "DOMContentLoaded", completed );&#13;
	&#13;
		// A fallback to window.onload, that will always work&#13;
		window.addEventListener( "load", completed );&#13;
	}&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	// Multifunctional method to get and set values of a collection&#13;
	// The value/s can optionally be executed if it's a function&#13;
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {&#13;
		var i = 0,&#13;
			len = elems.length,&#13;
			bulk = key == null;&#13;
	&#13;
		// Sets many values&#13;
		if ( toType( key ) === "object" ) {&#13;
			chainable = true;&#13;
			for ( i in key ) {&#13;
				access( elems, fn, i, key[ i ], true, emptyGet, raw );&#13;
			}&#13;
	&#13;
		// Sets one value&#13;
		} else if ( value !== undefined ) {&#13;
			chainable = true;&#13;
	&#13;
			if ( !isFunction( value ) ) {&#13;
				raw = true;&#13;
			}&#13;
	&#13;
			if ( bulk ) {&#13;
	&#13;
				// Bulk operations run against the entire set&#13;
				if ( raw ) {&#13;
					fn.call( elems, value );&#13;
					fn = null;&#13;
	&#13;
				// ...except when executing function values&#13;
				} else {&#13;
					bulk = fn;&#13;
					fn = function( elem, key, value ) {&#13;
						return bulk.call( jQuery( elem ), value );&#13;
					};&#13;
				}&#13;
			}&#13;
	&#13;
			if ( fn ) {&#13;
				for ( ; i &lt; len; i++ ) {&#13;
					fn(&#13;
						elems[ i ], key, raw ?&#13;
						value :&#13;
						value.call( elems[ i ], i, fn( elems[ i ], key ) )&#13;
					);&#13;
				}&#13;
			}&#13;
		}&#13;
	&#13;
		if ( chainable ) {&#13;
			return elems;&#13;
		}&#13;
	&#13;
		// Gets&#13;
		if ( bulk ) {&#13;
			return fn.call( elems );&#13;
		}&#13;
	&#13;
		return len ? fn( elems[ 0 ], key ) : emptyGet;&#13;
	};&#13;
	&#13;
	&#13;
	// Matches dashed string for camelizing&#13;
	var rmsPrefix = /^-ms-/,&#13;
		rdashAlpha = /-([a-z])/g;&#13;
	&#13;
	// Used by camelCase as callback to replace()&#13;
	function fcamelCase( all, letter ) {&#13;
		return letter.toUpperCase();&#13;
	}&#13;
	&#13;
	// Convert dashed to camelCase; used by the css and data modules&#13;
	// Support: IE &lt;=9 - 11, Edge 12 - 15&#13;
	// Microsoft forgot to hump their vendor prefix (#9572)&#13;
	function camelCase( string ) {&#13;
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );&#13;
	}&#13;
	var acceptData = function( owner ) {&#13;
	&#13;
		// Accepts only:&#13;
		//  - Node&#13;
		//    - Node.ELEMENT_NODE&#13;
		//    - Node.DOCUMENT_NODE&#13;
		//  - Object&#13;
		//    - Any&#13;
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );&#13;
	};&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	function Data() {&#13;
		this.expando = jQuery.expando + Data.uid++;&#13;
	}&#13;
	&#13;
	Data.uid = 1;&#13;
	&#13;
	Data.prototype = {&#13;
	&#13;
		cache: function( owner ) {&#13;
	&#13;
			// Check if the owner object already has a cache&#13;
			var value = owner[ this.expando ];&#13;
	&#13;
			// If not, create one&#13;
			if ( !value ) {&#13;
				value = {};&#13;
	&#13;
				// We can accept data for non-element nodes in modern browsers,&#13;
				// but we should not, see #8335.&#13;
				// Always return an empty object.&#13;
				if ( acceptData( owner ) ) {&#13;
	&#13;
					// If it is a node unlikely to be stringify-ed or looped over&#13;
					// use plain assignment&#13;
					if ( owner.nodeType ) {&#13;
						owner[ this.expando ] = value;&#13;
	&#13;
					// Otherwise secure it in a non-enumerable property&#13;
					// configurable must be true to allow the property to be&#13;
					// deleted when data is removed&#13;
					} else {&#13;
						Object.defineProperty( owner, this.expando, {&#13;
							value: value,&#13;
							configurable: true&#13;
						} );&#13;
					}&#13;
				}&#13;
			}&#13;
	&#13;
			return value;&#13;
		},&#13;
		set: function( owner, data, value ) {&#13;
			var prop,&#13;
				cache = this.cache( owner );&#13;
	&#13;
			// Handle: [ owner, key, value ] args&#13;
			// Always use camelCase key (gh-2257)&#13;
			if ( typeof data === "string" ) {&#13;
				cache[ camelCase( data ) ] = value;&#13;
	&#13;
			// Handle: [ owner, { properties } ] args&#13;
			} else {&#13;
	&#13;
				// Copy the properties one-by-one to the cache object&#13;
				for ( prop in data ) {&#13;
					cache[ camelCase( prop ) ] = data[ prop ];&#13;
				}&#13;
			}&#13;
			return cache;&#13;
		},&#13;
		get: function( owner, key ) {&#13;
			return key === undefined ?&#13;
				this.cache( owner ) :&#13;
	&#13;
				// Always use camelCase key (gh-2257)&#13;
				owner[ this.expando ] &amp;&amp; owner[ this.expando ][ camelCase( key ) ];&#13;
		},&#13;
		access: function( owner, key, value ) {&#13;
	&#13;
			// In cases where either:&#13;
			//&#13;
			//   1. No key was specified&#13;
			//   2. A string key was specified, but no value provided&#13;
			//&#13;
			// Take the "read" path and allow the get method to determine&#13;
			// which value to return, respectively either:&#13;
			//&#13;
			//   1. The entire cache object&#13;
			//   2. The data stored at the key&#13;
			//&#13;
			if ( key === undefined ||&#13;
					( ( key &amp;&amp; typeof key === "string" ) &amp;&amp; value === undefined ) ) {&#13;
	&#13;
				return this.get( owner, key );&#13;
			}&#13;
	&#13;
			// When the key is not a string, or both a key and value&#13;
			// are specified, set or extend (existing objects) with either:&#13;
			//&#13;
			//   1. An object of properties&#13;
			//   2. A key and value&#13;
			//&#13;
			this.set( owner, key, value );&#13;
	&#13;
			// Since the "set" path can have two possible entry points&#13;
			// return the expected data based on which path was taken[*]&#13;
			return value !== undefined ? value : key;&#13;
		},&#13;
		remove: function( owner, key ) {&#13;
			var i,&#13;
				cache = owner[ this.expando ];&#13;
	&#13;
			if ( cache === undefined ) {&#13;
				return;&#13;
			}&#13;
	&#13;
			if ( key !== undefined ) {&#13;
	&#13;
				// Support array or space separated string of keys&#13;
				if ( Array.isArray( key ) ) {&#13;
	&#13;
					// If key is an array of keys...&#13;
					// We always set camelCase keys, so remove that.&#13;
					key = key.map( camelCase );&#13;
				} else {&#13;
					key = camelCase( key );&#13;
	&#13;
					// If a key with the spaces exists, use it.&#13;
					// Otherwise, create an array by matching non-whitespace&#13;
					key = key in cache ?&#13;
						[ key ] :&#13;
						( key.match( rnothtmlwhite ) || [] );&#13;
				}&#13;
	&#13;
				i = key.length;&#13;
	&#13;
				while ( i-- ) {&#13;
					delete cache[ key[ i ] ];&#13;
				}&#13;
			}&#13;
	&#13;
			// Remove the expando if there's no more data&#13;
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {&#13;
	&#13;
				// Support: Chrome &lt;=35 - 45&#13;
				// Webkit &amp; Blink performance suffers when deleting properties&#13;
				// from DOM nodes, so set to undefined instead&#13;
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)&#13;
				if ( owner.nodeType ) {&#13;
					owner[ this.expando ] = undefined;&#13;
				} else {&#13;
					delete owner[ this.expando ];&#13;
				}&#13;
			}&#13;
		},&#13;
		hasData: function( owner ) {&#13;
			var cache = owner[ this.expando ];&#13;
			return cache !== undefined &amp;&amp; !jQuery.isEmptyObject( cache );&#13;
		}&#13;
	};&#13;
	var dataPriv = new Data();&#13;
	&#13;
	var dataUser = new Data();&#13;
	&#13;
	&#13;
	&#13;
	//	Implementation Summary&#13;
	//&#13;
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch&#13;
	//	2. Improve the module's maintainability by reducing the storage&#13;
	//		paths to a single mechanism.&#13;
	//	3. Use the same single mechanism to support "private" and "user" data.&#13;
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)&#13;
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)&#13;
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014&#13;
	&#13;
	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,&#13;
		rmultiDash = /[A-Z]/g;&#13;
	&#13;
	function getData( data ) {&#13;
		if ( data === "true" ) {&#13;
			return true;&#13;
		}&#13;
	&#13;
		if ( data === "false" ) {&#13;
			return false;&#13;
		}&#13;
	&#13;
		if ( data === "null" ) {&#13;
			return null;&#13;
		}&#13;
	&#13;
		// Only convert to a number if it doesn't change the string&#13;
		if ( data === +data + "" ) {&#13;
			return +data;&#13;
		}&#13;
	&#13;
		if ( rbrace.test( data ) ) {&#13;
			return JSON.parse( data );&#13;
		}&#13;
	&#13;
		return data;&#13;
	}&#13;
	&#13;
	function dataAttr( elem, key, data ) {&#13;
		var name;&#13;
	&#13;
		// If nothing was found internally, try to fetch any&#13;
		// data from the HTML5 data-* attribute&#13;
		if ( data === undefined &amp;&amp; elem.nodeType === 1 ) {&#13;
			name = "data-" + key.replace( rmultiDash, "-$&amp;" ).toLowerCase();&#13;
			data = elem.getAttribute( name );&#13;
	&#13;
			if ( typeof data === "string" ) {&#13;
				try {&#13;
					data = getData( data );&#13;
				} catch ( e ) {}&#13;
	&#13;
				// Make sure we set the data so it isn't changed later&#13;
				dataUser.set( elem, key, data );&#13;
			} else {&#13;
				data = undefined;&#13;
			}&#13;
		}&#13;
		return data;&#13;
	}&#13;
	&#13;
	jQuery.extend( {&#13;
		hasData: function( elem ) {&#13;
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );&#13;
		},&#13;
	&#13;
		data: function( elem, name, data ) {&#13;
			return dataUser.access( elem, name, data );&#13;
		},&#13;
	&#13;
		removeData: function( elem, name ) {&#13;
			dataUser.remove( elem, name );&#13;
		},&#13;
	&#13;
		// TODO: Now that all calls to _data and _removeData have been replaced&#13;
		// with direct calls to dataPriv methods, these can be deprecated.&#13;
		_data: function( elem, name, data ) {&#13;
			return dataPriv.access( elem, name, data );&#13;
		},&#13;
	&#13;
		_removeData: function( elem, name ) {&#13;
			dataPriv.remove( elem, name );&#13;
		}&#13;
	} );&#13;
	&#13;
	jQuery.fn.extend( {&#13;
		data: function( key, value ) {&#13;
			var i, name, data,&#13;
				elem = this[ 0 ],&#13;
				attrs = elem &amp;&amp; elem.attributes;&#13;
	&#13;
			// Gets all values&#13;
			if ( key === undefined ) {&#13;
				if ( this.length ) {&#13;
					data = dataUser.get( elem );&#13;
	&#13;
					if ( elem.nodeType === 1 &amp;&amp; !dataPriv.get( elem, "hasDataAttrs" ) ) {&#13;
						i = attrs.length;&#13;
						while ( i-- ) {&#13;
	&#13;
							// Support: IE 11 only&#13;
							// The attrs elements can be null (#14894)&#13;
							if ( attrs[ i ] ) {&#13;
								name = attrs[ i ].name;&#13;
								if ( name.indexOf( "data-" ) === 0 ) {&#13;
									name = camelCase( name.slice( 5 ) );&#13;
									dataAttr( elem, name, data[ name ] );&#13;
								}&#13;
							}&#13;
						}&#13;
						dataPriv.set( elem, "hasDataAttrs", true );&#13;
					}&#13;
				}&#13;
	&#13;
				return data;&#13;
			}&#13;
	&#13;
			// Sets multiple values&#13;
			if ( typeof key === "object" ) {&#13;
				return this.each( function() {&#13;
					dataUser.set( this, key );&#13;
				} );&#13;
			}&#13;
	&#13;
			return access( this, function( value ) {&#13;
				var data;&#13;
	&#13;
				// The calling jQuery object (element matches) is not empty&#13;
				// (and therefore has an element appears at this[ 0 ]) and the&#13;
				// `value` parameter was not undefined. An empty jQuery object&#13;
				// will result in `undefined` for elem = this[ 0 ] which will&#13;
				// throw an exception if an attempt to read a data cache is made.&#13;
				if ( elem &amp;&amp; value === undefined ) {&#13;
	&#13;
					// Attempt to get data from the cache&#13;
					// The key will always be camelCased in Data&#13;
					data = dataUser.get( elem, key );&#13;
					if ( data !== undefined ) {&#13;
						return data;&#13;
					}&#13;
	&#13;
					// Attempt to "discover" the data in&#13;
					// HTML5 custom data-* attrs&#13;
					data = dataAttr( elem, key );&#13;
					if ( data !== undefined ) {&#13;
						return data;&#13;
					}&#13;
	&#13;
					// We tried really hard, but the data doesn't exist.&#13;
					return;&#13;
				}&#13;
	&#13;
				// Set the data...&#13;
				this.each( function() {&#13;
	&#13;
					// We always store the camelCased key&#13;
					dataUser.set( this, key, value );&#13;
				} );&#13;
			}, null, value, arguments.length &gt; 1, null, true );&#13;
		},&#13;
	&#13;
		removeData: function( key ) {&#13;
			return this.each( function() {&#13;
				dataUser.remove( this, key );&#13;
			} );&#13;
		}&#13;
	} );&#13;
	&#13;
	&#13;
	jQuery.extend( {&#13;
		queue: function( elem, type, data ) {&#13;
			var queue;&#13;
	&#13;
			if ( elem ) {&#13;
				type = ( type || "fx" ) + "queue";&#13;
				queue = dataPriv.get( elem, type );&#13;
	&#13;
				// Speed up dequeue by getting out quickly if this is just a lookup&#13;
				if ( data ) {&#13;
					if ( !queue || Array.isArray( data ) ) {&#13;
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );&#13;
					} else {&#13;
						queue.push( data );&#13;
					}&#13;
				}&#13;
				return queue || [];&#13;
			}&#13;
		},&#13;
	&#13;
		dequeue: function( elem, type ) {&#13;
			type = type || "fx";&#13;
	&#13;
			var queue = jQuery.queue( elem, type ),&#13;
				startLength = queue.length,&#13;
				fn = queue.shift(),&#13;
				hooks = jQuery._queueHooks( elem, type ),&#13;
				next = function() {&#13;
					jQuery.dequeue( elem, type );&#13;
				};&#13;
	&#13;
			// If the fx queue is dequeued, always remove the progress sentinel&#13;
			if ( fn === "inprogress" ) {&#13;
				fn = queue.shift();&#13;
				startLength--;&#13;
			}&#13;
	&#13;
			if ( fn ) {&#13;
	&#13;
				// Add a progress sentinel to prevent the fx queue from being&#13;
				// automatically dequeued&#13;
				if ( type === "fx" ) {&#13;
					queue.unshift( "inprogress" );&#13;
				}&#13;
	&#13;
				// Clear up the last queue stop function&#13;
				delete hooks.stop;&#13;
				fn.call( elem, next, hooks );&#13;
			}&#13;
	&#13;
			if ( !startLength &amp;&amp; hooks ) {&#13;
				hooks.empty.fire();&#13;
			}&#13;
		},&#13;
	&#13;
		// Not public - generate a queueHooks object, or return the current one&#13;
		_queueHooks: function( elem, type ) {&#13;
			var key = type + "queueHooks";&#13;
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {&#13;
				empty: jQuery.Callbacks( "once memory" ).add( function() {&#13;
					dataPriv.remove( elem, [ type + "queue", key ] );&#13;
				} )&#13;
			} );&#13;
		}&#13;
	} );&#13;
	&#13;
	jQuery.fn.extend( {&#13;
		queue: function( type, data ) {&#13;
			var setter = 2;&#13;
	&#13;
			if ( typeof type !== "string" ) {&#13;
				data = type;&#13;
				type = "fx";&#13;
				setter--;&#13;
			}&#13;
	&#13;
			if ( arguments.length &lt; setter ) {&#13;
				return jQuery.queue( this[ 0 ], type );&#13;
			}&#13;
	&#13;
			return data === undefined ?&#13;
				this :&#13;
				this.each( function() {&#13;
					var queue = jQuery.queue( this, type, data );&#13;
	&#13;
					// Ensure a hooks for this queue&#13;
					jQuery._queueHooks( this, type );&#13;
	&#13;
					if ( type === "fx" &amp;&amp; queue[ 0 ] !== "inprogress" ) {&#13;
						jQuery.dequeue( this, type );&#13;
					}&#13;
				} );&#13;
		},&#13;
		dequeue: function( type ) {&#13;
			return this.each( function() {&#13;
				jQuery.dequeue( this, type );&#13;
			} );&#13;
		},&#13;
		clearQueue: function( type ) {&#13;
			return this.queue( type || "fx", [] );&#13;
		},&#13;
	&#13;
		// Get a promise resolved when queues of a certain type&#13;
		// are emptied (fx is the type by default)&#13;
		promise: function( type, obj ) {&#13;
			var tmp,&#13;
				count = 1,&#13;
				defer = jQuery.Deferred(),&#13;
				elements = this,&#13;
				i = this.length,&#13;
				resolve = function() {&#13;
					if ( !( --count ) ) {&#13;
						defer.resolveWith( elements, [ elements ] );&#13;
					}&#13;
				};&#13;
	&#13;
			if ( typeof type !== "string" ) {&#13;
				obj = type;&#13;
				type = undefined;&#13;
			}&#13;
			type = type || "fx";&#13;
	&#13;
			while ( i-- ) {&#13;
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );&#13;
				if ( tmp &amp;&amp; tmp.empty ) {&#13;
					count++;&#13;
					tmp.empty.add( resolve );&#13;
				}&#13;
			}&#13;
			resolve();&#13;
			return defer.promise( obj );&#13;
		}&#13;
	} );&#13;
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;&#13;
	&#13;
	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );&#13;
	&#13;
	&#13;
	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];&#13;
	&#13;
	var isHiddenWithinTree = function( elem, el ) {&#13;
	&#13;
			// isHiddenWithinTree might be called from jQuery#filter function;&#13;
			// in that case, element will be second argument&#13;
			elem = el || elem;&#13;
	&#13;
			// Inline style trumps all&#13;
			return elem.style.display === "none" ||&#13;
				elem.style.display === "" &amp;&amp;&#13;
	&#13;
				// Otherwise, check computed style&#13;
				// Support: Firefox &lt;=43 - 45&#13;
				// Disconnected elements can have computed display: none, so first confirm that elem is&#13;
				// in the document.&#13;
				jQuery.contains( elem.ownerDocument, elem ) &amp;&amp;&#13;
	&#13;
				jQuery.css( elem, "display" ) === "none";&#13;
		};&#13;
	&#13;
	var swap = function( elem, options, callback, args ) {&#13;
		var ret, name,&#13;
			old = {};&#13;
	&#13;
		// Remember the old values, and insert the new ones&#13;
		for ( name in options ) {&#13;
			old[ name ] = elem.style[ name ];&#13;
			elem.style[ name ] = options[ name ];&#13;
		}&#13;
	&#13;
		ret = callback.apply( elem, args || [] );&#13;
	&#13;
		// Revert the old values&#13;
		for ( name in options ) {&#13;
			elem.style[ name ] = old[ name ];&#13;
		}&#13;
	&#13;
		return ret;&#13;
	};&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	function adjustCSS( elem, prop, valueParts, tween ) {&#13;
		var adjusted, scale,&#13;
			maxIterations = 20,&#13;
			currentValue = tween ?&#13;
				function() {&#13;
					return tween.cur();&#13;
				} :&#13;
				function() {&#13;
					return jQuery.css( elem, prop, "" );&#13;
				},&#13;
			initial = currentValue(),&#13;
			unit = valueParts &amp;&amp; valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),&#13;
	&#13;
			// Starting value computation is required for potential unit mismatches&#13;
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" &amp;&amp; +initial ) &amp;&amp;&#13;
				rcssNum.exec( jQuery.css( elem, prop ) );&#13;
	&#13;
		if ( initialInUnit &amp;&amp; initialInUnit[ 3 ] !== unit ) {&#13;
	&#13;
			// Support: Firefox &lt;=54&#13;
			// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)&#13;
			initial = initial / 2;&#13;
	&#13;
			// Trust units reported by jQuery.css&#13;
			unit = unit || initialInUnit[ 3 ];&#13;
	&#13;
			// Iteratively approximate from a nonzero starting point&#13;
			initialInUnit = +initial || 1;&#13;
	&#13;
			while ( maxIterations-- ) {&#13;
	&#13;
				// Evaluate and update our best guess (doubling guesses that zero out).&#13;
				// Finish if the scale equals or crosses 1 (making the old*new product non-positive).&#13;
				jQuery.style( elem, prop, initialInUnit + unit );&#13;
				if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) &lt;= 0 ) {&#13;
					maxIterations = 0;&#13;
				}&#13;
				initialInUnit = initialInUnit / scale;&#13;
	&#13;
			}&#13;
	&#13;
			initialInUnit = initialInUnit * 2;&#13;
			jQuery.style( elem, prop, initialInUnit + unit );&#13;
	&#13;
			// Make sure we update the tween properties later on&#13;
			valueParts = valueParts || [];&#13;
		}&#13;
	&#13;
		if ( valueParts ) {&#13;
			initialInUnit = +initialInUnit || +initial || 0;&#13;
	&#13;
			// Apply relative offset (+=/-=) if specified&#13;
			adjusted = valueParts[ 1 ] ?&#13;
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :&#13;
				+valueParts[ 2 ];&#13;
			if ( tween ) {&#13;
				tween.unit = unit;&#13;
				tween.start = initialInUnit;&#13;
				tween.end = adjusted;&#13;
			}&#13;
		}&#13;
		return adjusted;&#13;
	}&#13;
	&#13;
	&#13;
	var defaultDisplayMap = {};&#13;
	&#13;
	function getDefaultDisplay( elem ) {&#13;
		var temp,&#13;
			doc = elem.ownerDocument,&#13;
			nodeName = elem.nodeName,&#13;
			display = defaultDisplayMap[ nodeName ];&#13;
	&#13;
		if ( display ) {&#13;
			return display;&#13;
		}&#13;
	&#13;
		temp = doc.body.appendChild( doc.createElement( nodeName ) );&#13;
		display = jQuery.css( temp, "display" );&#13;
	&#13;
		temp.parentNode.removeChild( temp );&#13;
	&#13;
		if ( display === "none" ) {&#13;
			display = "block";&#13;
		}&#13;
		defaultDisplayMap[ nodeName ] = display;&#13;
	&#13;
		return display;&#13;
	}&#13;
	&#13;
	function showHide( elements, show ) {&#13;
		var display, elem,&#13;
			values = [],&#13;
			index = 0,&#13;
			length = elements.length;&#13;
	&#13;
		// Determine new display value for elements that need to change&#13;
		for ( ; index &lt; length; index++ ) {&#13;
			elem = elements[ index ];&#13;
			if ( !elem.style ) {&#13;
				continue;&#13;
			}&#13;
	&#13;
			display = elem.style.display;&#13;
			if ( show ) {&#13;
	&#13;
				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)&#13;
				// check is required in this first loop unless we have a nonempty display value (either&#13;
				// inline or about-to-be-restored)&#13;
				if ( display === "none" ) {&#13;
					values[ index ] = dataPriv.get( elem, "display" ) || null;&#13;
					if ( !values[ index ] ) {&#13;
						elem.style.display = "";&#13;
					}&#13;
				}&#13;
				if ( elem.style.display === "" &amp;&amp; isHiddenWithinTree( elem ) ) {&#13;
					values[ index ] = getDefaultDisplay( elem );&#13;
				}&#13;
			} else {&#13;
				if ( display !== "none" ) {&#13;
					values[ index ] = "none";&#13;
	&#13;
					// Remember what we're overwriting&#13;
					dataPriv.set( elem, "display", display );&#13;
				}&#13;
			}&#13;
		}&#13;
	&#13;
		// Set the display of the elements in a second loop to avoid constant reflow&#13;
		for ( index = 0; index &lt; length; index++ ) {&#13;
			if ( values[ index ] != null ) {&#13;
				elements[ index ].style.display = values[ index ];&#13;
			}&#13;
		}&#13;
	&#13;
		return elements;&#13;
	}&#13;
	&#13;
	jQuery.fn.extend( {&#13;
		show: function() {&#13;
			return showHide( this, true );&#13;
		},&#13;
		hide: function() {&#13;
			return showHide( this );&#13;
		},&#13;
		toggle: function( state ) {&#13;
			if ( typeof state === "boolean" ) {&#13;
				return state ? this.show() : this.hide();&#13;
			}&#13;
	&#13;
			return this.each( function() {&#13;
				if ( isHiddenWithinTree( this ) ) {&#13;
					jQuery( this ).show();&#13;
				} else {&#13;
					jQuery( this ).hide();&#13;
				}&#13;
			} );&#13;
		}&#13;
	} );&#13;
	var rcheckableType = ( /^(?:checkbox|radio)$/i );&#13;
	&#13;
	var rtagName = ( /&lt;([a-z][^\/\0&gt;\x20\t\r\n\f]+)/i );&#13;
	&#13;
	var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );&#13;
	&#13;
	&#13;
	&#13;
	// We have to close these tags to support XHTML (#13200)&#13;
	var wrapMap = {&#13;
	&#13;
		// Support: IE &lt;=9 only&#13;
		option: [ 1, "&lt;select multiple='multiple'&gt;", "&lt;/select&gt;" ],&#13;
	&#13;
		// XHTML parsers do not magically insert elements in the&#13;
		// same way that tag soup parsers do. So we cannot shorten&#13;
		// this by omitting &lt;tbody&gt; or other required elements.&#13;
		thead: [ 1, "&lt;table&gt;", "&lt;/table&gt;" ],&#13;
		col: [ 2, "&lt;table&gt;&lt;colgroup&gt;", "&lt;/colgroup&gt;&lt;/table&gt;" ],&#13;
		tr: [ 2, "&lt;table&gt;&lt;tbody&gt;", "&lt;/tbody&gt;&lt;/table&gt;" ],&#13;
		td: [ 3, "&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;", "&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;" ],&#13;
	&#13;
		_default: [ 0, "", "" ]&#13;
	};&#13;
	&#13;
	// Support: IE &lt;=9 only&#13;
	wrapMap.optgroup = wrapMap.option;&#13;
	&#13;
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;&#13;
	wrapMap.th = wrapMap.td;&#13;
	&#13;
	&#13;
	function getAll( context, tag ) {&#13;
	&#13;
		// Support: IE &lt;=9 - 11 only&#13;
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)&#13;
		var ret;&#13;
	&#13;
		if ( typeof context.getElementsByTagName !== "undefined" ) {&#13;
			ret = context.getElementsByTagName( tag || "*" );&#13;
	&#13;
		} else if ( typeof context.querySelectorAll !== "undefined" ) {&#13;
			ret = context.querySelectorAll( tag || "*" );&#13;
	&#13;
		} else {&#13;
			ret = [];&#13;
		}&#13;
	&#13;
		if ( tag === undefined || tag &amp;&amp; nodeName( context, tag ) ) {&#13;
			return jQuery.merge( [ context ], ret );&#13;
		}&#13;
	&#13;
		return ret;&#13;
	}&#13;
	&#13;
	&#13;
	// Mark scripts as having already been evaluated&#13;
	function setGlobalEval( elems, refElements ) {&#13;
		var i = 0,&#13;
			l = elems.length;&#13;
	&#13;
		for ( ; i &lt; l; i++ ) {&#13;
			dataPriv.set(&#13;
				elems[ i ],&#13;
				"globalEval",&#13;
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )&#13;
			);&#13;
		}&#13;
	}&#13;
	&#13;
	&#13;
	var rhtml = /&lt;|&amp;#?\w+;/;&#13;
	&#13;
	function buildFragment( elems, context, scripts, selection, ignored ) {&#13;
		var elem, tmp, tag, wrap, contains, j,&#13;
			fragment = context.createDocumentFragment(),&#13;
			nodes = [],&#13;
			i = 0,&#13;
			l = elems.length;&#13;
	&#13;
		for ( ; i &lt; l; i++ ) {&#13;
			elem = elems[ i ];&#13;
	&#13;
			if ( elem || elem === 0 ) {&#13;
	&#13;
				// Add nodes directly&#13;
				if ( toType( elem ) === "object" ) {&#13;
	&#13;
					// Support: Android &lt;=4.0 only, PhantomJS 1 only&#13;
					// push.apply(_, arraylike) throws on ancient WebKit&#13;
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );&#13;
	&#13;
				// Convert non-html into a text node&#13;
				} else if ( !rhtml.test( elem ) ) {&#13;
					nodes.push( context.createTextNode( elem ) );&#13;
	&#13;
				// Convert html into DOM nodes&#13;
				} else {&#13;
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );&#13;
	&#13;
					// Deserialize a standard representation&#13;
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();&#13;
					wrap = wrapMap[ tag ] || wrapMap._default;&#13;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];&#13;
	&#13;
					// Descend through wrappers to the right content&#13;
					j = wrap[ 0 ];&#13;
					while ( j-- ) {&#13;
						tmp = tmp.lastChild;&#13;
					}&#13;
	&#13;
					// Support: Android &lt;=4.0 only, PhantomJS 1 only&#13;
					// push.apply(_, arraylike) throws on ancient WebKit&#13;
					jQuery.merge( nodes, tmp.childNodes );&#13;
	&#13;
					// Remember the top-level container&#13;
					tmp = fragment.firstChild;&#13;
	&#13;
					// Ensure the created nodes are orphaned (#12392)&#13;
					tmp.textContent = "";&#13;
				}&#13;
			}&#13;
		}&#13;
	&#13;
		// Remove wrapper from fragment&#13;
		fragment.textContent = "";&#13;
	&#13;
		i = 0;&#13;
		while ( ( elem = nodes[ i++ ] ) ) {&#13;
	&#13;
			// Skip elements already in the context collection (trac-4087)&#13;
			if ( selection &amp;&amp; jQuery.inArray( elem, selection ) &gt; -1 ) {&#13;
				if ( ignored ) {&#13;
					ignored.push( elem );&#13;
				}&#13;
				continue;&#13;
			}&#13;
	&#13;
			contains = jQuery.contains( elem.ownerDocument, elem );&#13;
	&#13;
			// Append to fragment&#13;
			tmp = getAll( fragment.appendChild( elem ), "script" );&#13;
	&#13;
			// Preserve script evaluation history&#13;
			if ( contains ) {&#13;
				setGlobalEval( tmp );&#13;
			}&#13;
	&#13;
			// Capture executables&#13;
			if ( scripts ) {&#13;
				j = 0;&#13;
				while ( ( elem = tmp[ j++ ] ) ) {&#13;
					if ( rscriptType.test( elem.type || "" ) ) {&#13;
						scripts.push( elem );&#13;
					}&#13;
				}&#13;
			}&#13;
		}&#13;
	&#13;
		return fragment;&#13;
	}&#13;
	&#13;
	&#13;
	( function() {&#13;
		var fragment = document.createDocumentFragment(),&#13;
			div = fragment.appendChild( document.createElement( "div" ) ),&#13;
			input = document.createElement( "input" );&#13;
	&#13;
		// Support: Android 4.0 - 4.3 only&#13;
		// Check state lost if the name is set (#11217)&#13;
		// Support: Windows Web Apps (WWA)&#13;
		// `name` and `type` must use .setAttribute for WWA (#14901)&#13;
		input.setAttribute( "type", "radio" );&#13;
		input.setAttribute( "checked", "checked" );&#13;
		input.setAttribute( "name", "t" );&#13;
	&#13;
		div.appendChild( input );&#13;
	&#13;
		// Support: Android &lt;=4.1 only&#13;
		// Older WebKit doesn't clone checked state correctly in fragments&#13;
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;&#13;
	&#13;
		// Support: IE &lt;=11 only&#13;
		// Make sure textarea (and checkbox) defaultValue is properly cloned&#13;
		div.innerHTML = "&lt;textarea&gt;x&lt;/textarea&gt;";&#13;
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;&#13;
	} )();&#13;
	var documentElement = document.documentElement;&#13;
	&#13;
	&#13;
	&#13;
	var&#13;
		rkeyEvent = /^key/,&#13;
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,&#13;
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;&#13;
	&#13;
	function returnTrue() {&#13;
		return true;&#13;
	}&#13;
	&#13;
	function returnFalse() {&#13;
		return false;&#13;
	}&#13;
	&#13;
	// Support: IE &lt;=9 only&#13;
	// See #13393 for more info&#13;
	function safeActiveElement() {&#13;
		try {&#13;
			return document.activeElement;&#13;
		} catch ( err ) { }&#13;
	}&#13;
	&#13;
	function on( elem, types, selector, data, fn, one ) {&#13;
		var origFn, type;&#13;
	&#13;
		// Types can be a map of types/handlers&#13;
		if ( typeof types === "object" ) {&#13;
	&#13;
			// ( types-Object, selector, data )&#13;
			if ( typeof selector !== "string" ) {&#13;
	&#13;
				// ( types-Object, data )&#13;
				data = data || selector;&#13;
				selector = undefined;&#13;
			}&#13;
			for ( type in types ) {&#13;
				on( elem, type, selector, data, types[ type ], one );&#13;
			}&#13;
			return elem;&#13;
		}&#13;
	&#13;
		if ( data == null &amp;&amp; fn == null ) {&#13;
	&#13;
			// ( types, fn )&#13;
			fn = selector;&#13;
			data = selector = undefined;&#13;
		} else if ( fn == null ) {&#13;
			if ( typeof selector === "string" ) {&#13;
	&#13;
				// ( types, selector, fn )&#13;
				fn = data;&#13;
				data = undefined;&#13;
			} else {&#13;
	&#13;
				// ( types, data, fn )&#13;
				fn = data;&#13;
				data = selector;&#13;
				selector = undefined;&#13;
			}&#13;
		}&#13;
		if ( fn === false ) {&#13;
			fn = returnFalse;&#13;
		} else if ( !fn ) {&#13;
			return elem;&#13;
		}&#13;
	&#13;
		if ( one === 1 ) {&#13;
			origFn = fn;&#13;
			fn = function( event ) {&#13;
	&#13;
				// Can use an empty set, since event contains the info&#13;
				jQuery().off( event );&#13;
				return origFn.apply( this, arguments );&#13;
			};&#13;
	&#13;
			// Use same guid so caller can remove using origFn&#13;
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );&#13;
		}&#13;
		return elem.each( function() {&#13;
			jQuery.event.add( this, types, fn, data, selector );&#13;
		} );&#13;
	}&#13;
	&#13;
	/*&#13;
	 * Helper functions for managing events -- not part of the public interface.&#13;
	 * Props to Dean Edwards' addEvent library for many of the ideas.&#13;
	 */&#13;
	jQuery.event = {&#13;
	&#13;
		global: {},&#13;
	&#13;
		add: function( elem, types, handler, data, selector ) {&#13;
	&#13;
			var handleObjIn, eventHandle, tmp,&#13;
				events, t, handleObj,&#13;
				special, handlers, type, namespaces, origType,&#13;
				elemData = dataPriv.get( elem );&#13;
	&#13;
			// Don't attach events to noData or text/comment nodes (but allow plain objects)&#13;
			if ( !elemData ) {&#13;
				return;&#13;
			}&#13;
	&#13;
			// Caller can pass in an object of custom data in lieu of the handler&#13;
			if ( handler.handler ) {&#13;
				handleObjIn = handler;&#13;
				handler = handleObjIn.handler;&#13;
				selector = handleObjIn.selector;&#13;
			}&#13;
	&#13;
			// Ensure that invalid selectors throw exceptions at attach time&#13;
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)&#13;
			if ( selector ) {&#13;
				jQuery.find.matchesSelector( documentElement, selector );&#13;
			}&#13;
	&#13;
			// Make sure that the handler has a unique ID, used to find/remove it later&#13;
			if ( !handler.guid ) {&#13;
				handler.guid = jQuery.guid++;&#13;
			}&#13;
	&#13;
			// Init the element's event structure and main handler, if this is the first&#13;
			if ( !( events = elemData.events ) ) {&#13;
				events = elemData.events = {};&#13;
			}&#13;
			if ( !( eventHandle = elemData.handle ) ) {&#13;
				eventHandle = elemData.handle = function( e ) {&#13;
	&#13;
					// Discard the second event of a jQuery.event.trigger() and&#13;
					// when an event is called after a page has unloaded&#13;
					return typeof jQuery !== "undefined" &amp;&amp; jQuery.event.triggered !== e.type ?&#13;
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;&#13;
				};&#13;
			}&#13;
	&#13;
			// Handle multiple events separated by a space&#13;
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];&#13;
			t = types.length;&#13;
			while ( t-- ) {&#13;
				tmp = rtypenamespace.exec( types[ t ] ) || [];&#13;
				type = origType = tmp[ 1 ];&#13;
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();&#13;
	&#13;
				// There *must* be a type, no attaching namespace-only handlers&#13;
				if ( !type ) {&#13;
					continue;&#13;
				}&#13;
	&#13;
				// If event changes its type, use the special event handlers for the changed type&#13;
				special = jQuery.event.special[ type ] || {};&#13;
	&#13;
				// If selector defined, determine special event api type, otherwise given type&#13;
				type = ( selector ? special.delegateType : special.bindType ) || type;&#13;
	&#13;
				// Update special based on newly reset type&#13;
				special = jQuery.event.special[ type ] || {};&#13;
	&#13;
				// handleObj is passed to all event handlers&#13;
				handleObj = jQuery.extend( {&#13;
					type: type,&#13;
					origType: origType,&#13;
					data: data,&#13;
					handler: handler,&#13;
					guid: handler.guid,&#13;
					selector: selector,&#13;
					needsContext: selector &amp;&amp; jQuery.expr.match.needsContext.test( selector ),&#13;
					namespace: namespaces.join( "." )&#13;
				}, handleObjIn );&#13;
	&#13;
				// Init the event handler queue if we're the first&#13;
				if ( !( handlers = events[ type ] ) ) {&#13;
					handlers = events[ type ] = [];&#13;
					handlers.delegateCount = 0;&#13;
	&#13;
					// Only use addEventListener if the special events handler returns false&#13;
					if ( !special.setup ||&#13;
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {&#13;
	&#13;
						if ( elem.addEventListener ) {&#13;
							elem.addEventListener( type, eventHandle );&#13;
						}&#13;
					}&#13;
				}&#13;
	&#13;
				if ( special.add ) {&#13;
					special.add.call( elem, handleObj );&#13;
	&#13;
					if ( !handleObj.handler.guid ) {&#13;
						handleObj.handler.guid = handler.guid;&#13;
					}&#13;
				}&#13;
	&#13;
				// Add to the element's handler list, delegates in front&#13;
				if ( selector ) {&#13;
					handlers.splice( handlers.delegateCount++, 0, handleObj );&#13;
				} else {&#13;
					handlers.push( handleObj );&#13;
				}&#13;
	&#13;
				// Keep track of which events have ever been used, for event optimization&#13;
				jQuery.event.global[ type ] = true;&#13;
			}&#13;
	&#13;
		},&#13;
	&#13;
		// Detach an event or set of events from an element&#13;
		remove: function( elem, types, handler, selector, mappedTypes ) {&#13;
	&#13;
			var j, origCount, tmp,&#13;
				events, t, handleObj,&#13;
				special, handlers, type, namespaces, origType,&#13;
				elemData = dataPriv.hasData( elem ) &amp;&amp; dataPriv.get( elem );&#13;
	&#13;
			if ( !elemData || !( events = elemData.events ) ) {&#13;
				return;&#13;
			}&#13;
	&#13;
			// Once for each type.namespace in types; type may be omitted&#13;
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];&#13;
			t = types.length;&#13;
			while ( t-- ) {&#13;
				tmp = rtypenamespace.exec( types[ t ] ) || [];&#13;
				type = origType = tmp[ 1 ];&#13;
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();&#13;
	&#13;
				// Unbind all events (on this namespace, if provided) for the element&#13;
				if ( !type ) {&#13;
					for ( type in events ) {&#13;
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );&#13;
					}&#13;
					continue;&#13;
				}&#13;
	&#13;
				special = jQuery.event.special[ type ] || {};&#13;
				type = ( selector ? special.delegateType : special.bindType ) || type;&#13;
				handlers = events[ type ] || [];&#13;
				tmp = tmp[ 2 ] &amp;&amp;&#13;
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );&#13;
	&#13;
				// Remove matching events&#13;
				origCount = j = handlers.length;&#13;
				while ( j-- ) {&#13;
					handleObj = handlers[ j ];&#13;
	&#13;
					if ( ( mappedTypes || origType === handleObj.origType ) &amp;&amp;&#13;
						( !handler || handler.guid === handleObj.guid ) &amp;&amp;&#13;
						( !tmp || tmp.test( handleObj.namespace ) ) &amp;&amp;&#13;
						( !selector || selector === handleObj.selector ||&#13;
							selector === "**" &amp;&amp; handleObj.selector ) ) {&#13;
						handlers.splice( j, 1 );&#13;
	&#13;
						if ( handleObj.selector ) {&#13;
							handlers.delegateCount--;&#13;
						}&#13;
						if ( special.remove ) {&#13;
							special.remove.call( elem, handleObj );&#13;
						}&#13;
					}&#13;
				}&#13;
	&#13;
				// Remove generic event handler if we removed something and no more handlers exist&#13;
				// (avoids potential for endless recursion during removal of special event handlers)&#13;
				if ( origCount &amp;&amp; !handlers.length ) {&#13;
					if ( !special.teardown ||&#13;
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {&#13;
	&#13;
						jQuery.removeEvent( elem, type, elemData.handle );&#13;
					}&#13;
	&#13;
					delete events[ type ];&#13;
				}&#13;
			}&#13;
	&#13;
			// Remove data and the expando if it's no longer used&#13;
			if ( jQuery.isEmptyObject( events ) ) {&#13;
				dataPriv.remove( elem, "handle events" );&#13;
			}&#13;
		},&#13;
	&#13;
		dispatch: function( nativeEvent ) {&#13;
	&#13;
			// Make a writable jQuery.Event from the native event object&#13;
			var event = jQuery.event.fix( nativeEvent );&#13;
	&#13;
			var i, j, ret, matched, handleObj, handlerQueue,&#13;
				args = new Array( arguments.length ),&#13;
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],&#13;
				special = jQuery.event.special[ event.type ] || {};&#13;
	&#13;
			// Use the fix-ed jQuery.Event rather than the (read-only) native event&#13;
			args[ 0 ] = event;&#13;
	&#13;
			for ( i = 1; i &lt; arguments.length; i++ ) {&#13;
				args[ i ] = arguments[ i ];&#13;
			}&#13;
	&#13;
			event.delegateTarget = this;&#13;
	&#13;
			// Call the preDispatch hook for the mapped type, and let it bail if desired&#13;
			if ( special.preDispatch &amp;&amp; special.preDispatch.call( this, event ) === false ) {&#13;
				return;&#13;
			}&#13;
	&#13;
			// Determine handlers&#13;
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );&#13;
	&#13;
			// Run delegates first; they may want to stop propagation beneath us&#13;
			i = 0;&#13;
			while ( ( matched = handlerQueue[ i++ ] ) &amp;&amp; !event.isPropagationStopped() ) {&#13;
				event.currentTarget = matched.elem;&#13;
	&#13;
				j = 0;&#13;
				while ( ( handleObj = matched.handlers[ j++ ] ) &amp;&amp;&#13;
					!event.isImmediatePropagationStopped() ) {&#13;
	&#13;
					// Triggered event must either 1) have no namespace, or 2) have namespace(s)&#13;
					// a subset or equal to those in the bound event (both can have no namespace).&#13;
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {&#13;
	&#13;
						event.handleObj = handleObj;&#13;
						event.data = handleObj.data;&#13;
	&#13;
						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||&#13;
							handleObj.handler ).apply( matched.elem, args );&#13;
	&#13;
						if ( ret !== undefined ) {&#13;
							if ( ( event.result = ret ) === false ) {&#13;
								event.preventDefault();&#13;
								event.stopPropagation();&#13;
							}&#13;
						}&#13;
					}&#13;
				}&#13;
			}&#13;
	&#13;
			// Call the postDispatch hook for the mapped type&#13;
			if ( special.postDispatch ) {&#13;
				special.postDispatch.call( this, event );&#13;
			}&#13;
	&#13;
			return event.result;&#13;
		},&#13;
	&#13;
		handlers: function( event, handlers ) {&#13;
			var i, handleObj, sel, matchedHandlers, matchedSelectors,&#13;
				handlerQueue = [],&#13;
				delegateCount = handlers.delegateCount,&#13;
				cur = event.target;&#13;
	&#13;
			// Find delegate handlers&#13;
			if ( delegateCount &amp;&amp;&#13;
	&#13;
				// Support: IE &lt;=9&#13;
				// Black-hole SVG &lt;use&gt; instance trees (trac-13180)&#13;
				cur.nodeType &amp;&amp;&#13;
	&#13;
				// Support: Firefox &lt;=42&#13;
				// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)&#13;
				// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click&#13;
				// Support: IE 11 only&#13;
				// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)&#13;
				!( event.type === "click" &amp;&amp; event.button &gt;= 1 ) ) {&#13;
	&#13;
				for ( ; cur !== this; cur = cur.parentNode || this ) {&#13;
	&#13;
					// Don't check non-elements (#13208)&#13;
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)&#13;
					if ( cur.nodeType === 1 &amp;&amp; !( event.type === "click" &amp;&amp; cur.disabled === true ) ) {&#13;
						matchedHandlers = [];&#13;
						matchedSelectors = {};&#13;
						for ( i = 0; i &lt; delegateCount; i++ ) {&#13;
							handleObj = handlers[ i ];&#13;
	&#13;
							// Don't conflict with Object.prototype properties (#13203)&#13;
							sel = handleObj.selector + " ";&#13;
	&#13;
							if ( matchedSelectors[ sel ] === undefined ) {&#13;
								matchedSelectors[ sel ] = handleObj.needsContext ?&#13;
									jQuery( sel, this ).index( cur ) &gt; -1 :&#13;
									jQuery.find( sel, this, null, [ cur ] ).length;&#13;
							}&#13;
							if ( matchedSelectors[ sel ] ) {&#13;
								matchedHandlers.push( handleObj );&#13;
							}&#13;
						}&#13;
						if ( matchedHandlers.length ) {&#13;
							handlerQueue.push( { elem: cur, handlers: matchedHandlers } );&#13;
						}&#13;
					}&#13;
				}&#13;
			}&#13;
	&#13;
			// Add the remaining (directly-bound) handlers&#13;
			cur = this;&#13;
			if ( delegateCount &lt; handlers.length ) {&#13;
				handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );&#13;
			}&#13;
	&#13;
			return handlerQueue;&#13;
		},&#13;
	&#13;
		addProp: function( name, hook ) {&#13;
			Object.defineProperty( jQuery.Event.prototype, name, {&#13;
				enumerable: true,&#13;
				configurable: true,&#13;
	&#13;
				get: isFunction( hook ) ?&#13;
					function() {&#13;
						if ( this.originalEvent ) {&#13;
								return hook( this.originalEvent );&#13;
						}&#13;
					} :&#13;
					function() {&#13;
						if ( this.originalEvent ) {&#13;
								return this.originalEvent[ name ];&#13;
						}&#13;
					},&#13;
	&#13;
				set: function( value ) {&#13;
					Object.defineProperty( this, name, {&#13;
						enumerable: true,&#13;
						configurable: true,&#13;
						writable: true,&#13;
						value: value&#13;
					} );&#13;
				}&#13;
			} );&#13;
		},&#13;
	&#13;
		fix: function( originalEvent ) {&#13;
			return originalEvent[ jQuery.expando ] ?&#13;
				originalEvent :&#13;
				new jQuery.Event( originalEvent );&#13;
		},&#13;
	&#13;
		special: {&#13;
			load: {&#13;
	&#13;
				// Prevent triggered image.load events from bubbling to window.load&#13;
				noBubble: true&#13;
			},&#13;
			focus: {&#13;
	&#13;
				// Fire native event if possible so blur/focus sequence is correct&#13;
				trigger: function() {&#13;
					if ( this !== safeActiveElement() &amp;&amp; this.focus ) {&#13;
						this.focus();&#13;
						return false;&#13;
					}&#13;
				},&#13;
				delegateType: "focusin"&#13;
			},&#13;
			blur: {&#13;
				trigger: function() {&#13;
					if ( this === safeActiveElement() &amp;&amp; this.blur ) {&#13;
						this.blur();&#13;
						return false;&#13;
					}&#13;
				},&#13;
				delegateType: "focusout"&#13;
			},&#13;
			click: {&#13;
	&#13;
				// For checkbox, fire native event so checked state will be right&#13;
				trigger: function() {&#13;
					if ( this.type === "checkbox" &amp;&amp; this.click &amp;&amp; nodeName( this, "input" ) ) {&#13;
						this.click();&#13;
						return false;&#13;
					}&#13;
				},&#13;
	&#13;
				// For cross-browser consistency, don't fire native .click() on links&#13;
				_default: function( event ) {&#13;
					return nodeName( event.target, "a" );&#13;
				}&#13;
			},&#13;
	&#13;
			beforeunload: {&#13;
				postDispatch: function( event ) {&#13;
	&#13;
					// Support: Firefox 20+&#13;
					// Firefox doesn't alert if the returnValue field is not set.&#13;
					if ( event.result !== undefined &amp;&amp; event.originalEvent ) {&#13;
						event.originalEvent.returnValue = event.result;&#13;
					}&#13;
				}&#13;
			}&#13;
		}&#13;
	};&#13;
	&#13;
	jQuery.removeEvent = function( elem, type, handle ) {&#13;
	&#13;
		// This "if" is needed for plain objects&#13;
		if ( elem.removeEventListener ) {&#13;
			elem.removeEventListener( type, handle );&#13;
		}&#13;
	};&#13;
	&#13;
	jQuery.Event = function( src, props ) {&#13;
	&#13;
		// Allow instantiation without the 'new' keyword&#13;
		if ( !( this instanceof jQuery.Event ) ) {&#13;
			return new jQuery.Event( src, props );&#13;
		}&#13;
	&#13;
		// Event object&#13;
		if ( src &amp;&amp; src.type ) {&#13;
			this.originalEvent = src;&#13;
			this.type = src.type;&#13;
	&#13;
			// Events bubbling up the document may have been marked as prevented&#13;
			// by a handler lower down the tree; reflect the correct value.&#13;
			this.isDefaultPrevented = src.defaultPrevented ||&#13;
					src.defaultPrevented === undefined &amp;&amp;&#13;
	&#13;
					// Support: Android &lt;=2.3 only&#13;
					src.returnValue === false ?&#13;
				returnTrue :&#13;
				returnFalse;&#13;
	&#13;
			// Create target properties&#13;
			// Support: Safari &lt;=6 - 7 only&#13;
			// Target should not be a text node (#504, #13143)&#13;
			this.target = ( src.target &amp;&amp; src.target.nodeType === 3 ) ?&#13;
				src.target.parentNode :&#13;
				src.target;&#13;
	&#13;
			this.currentTarget = src.currentTarget;&#13;
			this.relatedTarget = src.relatedTarget;&#13;
	&#13;
		// Event type&#13;
		} else {&#13;
			this.type = src;&#13;
		}&#13;
	&#13;
		// Put explicitly provided properties onto the event object&#13;
		if ( props ) {&#13;
			jQuery.extend( this, props );&#13;
		}&#13;
	&#13;
		// Create a timestamp if incoming event doesn't have one&#13;
		this.timeStamp = src &amp;&amp; src.timeStamp || Date.now();&#13;
	&#13;
		// Mark it as fixed&#13;
		this[ jQuery.expando ] = true;&#13;
	};&#13;
	&#13;
	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding&#13;
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html&#13;
	jQuery.Event.prototype = {&#13;
		constructor: jQuery.Event,&#13;
		isDefaultPrevented: returnFalse,&#13;
		isPropagationStopped: returnFalse,&#13;
		isImmediatePropagationStopped: returnFalse,&#13;
		isSimulated: false,&#13;
	&#13;
		preventDefault: function() {&#13;
			var e = this.originalEvent;&#13;
	&#13;
			this.isDefaultPrevented = returnTrue;&#13;
	&#13;
			if ( e &amp;&amp; !this.isSimulated ) {&#13;
				e.preventDefault();&#13;
			}&#13;
		},&#13;
		stopPropagation: function() {&#13;
			var e = this.originalEvent;&#13;
	&#13;
			this.isPropagationStopped = returnTrue;&#13;
	&#13;
			if ( e &amp;&amp; !this.isSimulated ) {&#13;
				e.stopPropagation();&#13;
			}&#13;
		},&#13;
		stopImmediatePropagation: function() {&#13;
			var e = this.originalEvent;&#13;
	&#13;
			this.isImmediatePropagationStopped = returnTrue;&#13;
	&#13;
			if ( e &amp;&amp; !this.isSimulated ) {&#13;
				e.stopImmediatePropagation();&#13;
			}&#13;
	&#13;
			this.stopPropagation();&#13;
		}&#13;
	};&#13;
	&#13;
	// Includes all common event props including KeyEvent and MouseEvent specific props&#13;
	jQuery.each( {&#13;
		altKey: true,&#13;
		bubbles: true,&#13;
		cancelable: true,&#13;
		changedTouches: true,&#13;
		ctrlKey: true,&#13;
		detail: true,&#13;
		eventPhase: true,&#13;
		metaKey: true,&#13;
		pageX: true,&#13;
		pageY: true,&#13;
		shiftKey: true,&#13;
		view: true,&#13;
		"char": true,&#13;
		charCode: true,&#13;
		key: true,&#13;
		keyCode: true,&#13;
		button: true,&#13;
		buttons: true,&#13;
		clientX: true,&#13;
		clientY: true,&#13;
		offsetX: true,&#13;
		offsetY: true,&#13;
		pointerId: true,&#13;
		pointerType: true,&#13;
		screenX: true,&#13;
		screenY: true,&#13;
		targetTouches: true,&#13;
		toElement: true,&#13;
		touches: true,&#13;
	&#13;
		which: function( event ) {&#13;
			var button = event.button;&#13;
	&#13;
			// Add which for key events&#13;
			if ( event.which == null &amp;&amp; rkeyEvent.test( event.type ) ) {&#13;
				return event.charCode != null ? event.charCode : event.keyCode;&#13;
			}&#13;
	&#13;
			// Add which for click: 1 === left; 2 === middle; 3 === right&#13;
			if ( !event.which &amp;&amp; button !== undefined &amp;&amp; rmouseEvent.test( event.type ) ) {&#13;
				if ( button &amp; 1 ) {&#13;
					return 1;&#13;
				}&#13;
	&#13;
				if ( button &amp; 2 ) {&#13;
					return 3;&#13;
				}&#13;
	&#13;
				if ( button &amp; 4 ) {&#13;
					return 2;&#13;
				}&#13;
	&#13;
				return 0;&#13;
			}&#13;
	&#13;
			return event.which;&#13;
		}&#13;
	}, jQuery.event.addProp );&#13;
	&#13;
	// Create mouseenter/leave events using mouseover/out and event-time checks&#13;
	// so that event delegation works in jQuery.&#13;
	// Do the same for pointerenter/pointerleave and pointerover/pointerout&#13;
	//&#13;
	// Support: Safari 7 only&#13;
	// Safari sends mouseenter too often; see:&#13;
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258&#13;
	// for the description of the bug (it existed in older Chrome versions as well).&#13;
	jQuery.each( {&#13;
		mouseenter: "mouseover",&#13;
		mouseleave: "mouseout",&#13;
		pointerenter: "pointerover",&#13;
		pointerleave: "pointerout"&#13;
	}, function( orig, fix ) {&#13;
		jQuery.event.special[ orig ] = {&#13;
			delegateType: fix,&#13;
			bindType: fix,&#13;
	&#13;
			handle: function( event ) {&#13;
				var ret,&#13;
					target = this,&#13;
					related = event.relatedTarget,&#13;
					handleObj = event.handleObj;&#13;
	&#13;
				// For mouseenter/leave call the handler if related is outside the target.&#13;
				// NB: No relatedTarget if the mouse left/entered the browser window&#13;
				if ( !related || ( related !== target &amp;&amp; !jQuery.contains( target, related ) ) ) {&#13;
					event.type = handleObj.origType;&#13;
					ret = handleObj.handler.apply( this, arguments );&#13;
					event.type = fix;&#13;
				}&#13;
				return ret;&#13;
			}&#13;
		};&#13;
	} );&#13;
	&#13;
	jQuery.fn.extend( {&#13;
	&#13;
		on: function( types, selector, data, fn ) {&#13;
			return on( this, types, selector, data, fn );&#13;
		},&#13;
		one: function( types, selector, data, fn ) {&#13;
			return on( this, types, selector, data, fn, 1 );&#13;
		},&#13;
		off: function( types, selector, fn ) {&#13;
			var handleObj, type;&#13;
			if ( types &amp;&amp; types.preventDefault &amp;&amp; types.handleObj ) {&#13;
	&#13;
				// ( event )  dispatched jQuery.Event&#13;
				handleObj = types.handleObj;&#13;
				jQuery( types.delegateTarget ).off(&#13;
					handleObj.namespace ?&#13;
						handleObj.origType + "." + handleObj.namespace :&#13;
						handleObj.origType,&#13;
					handleObj.selector,&#13;
					handleObj.handler&#13;
				);&#13;
				return this;&#13;
			}&#13;
			if ( typeof types === "object" ) {&#13;
	&#13;
				// ( types-object [, selector] )&#13;
				for ( type in types ) {&#13;
					this.off( type, selector, types[ type ] );&#13;
				}&#13;
				return this;&#13;
			}&#13;
			if ( selector === false || typeof selector === "function" ) {&#13;
	&#13;
				// ( types [, fn] )&#13;
				fn = selector;&#13;
				selector = undefined;&#13;
			}&#13;
			if ( fn === false ) {&#13;
				fn = returnFalse;&#13;
			}&#13;
			return this.each( function() {&#13;
				jQuery.event.remove( this, types, fn, selector );&#13;
			} );&#13;
		}&#13;
	} );&#13;
	&#13;
	&#13;
	var&#13;
	&#13;
		/* eslint-disable max-len */&#13;
	&#13;
		// See https://github.com/eslint/eslint/issues/3229&#13;
		rxhtmlTag = /&lt;(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0&gt;\x20\t\r\n\f]*)[^&gt;]*)\/&gt;/gi,&#13;
	&#13;
		/* eslint-enable */&#13;
	&#13;
		// Support: IE &lt;=10 - 11, Edge 12 - 13 only&#13;
		// In IE/Edge using regex groups here causes severe slowdowns.&#13;
		// See https://connect.microsoft.com/IE/feedback/details/1736512/&#13;
		rnoInnerhtml = /&lt;script|&lt;style|&lt;link/i,&#13;
	&#13;
		// checked="checked" or checked&#13;
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,&#13;
		rcleanScript = /^\s*&lt;!(?:\[CDATA\[|--)|(?:\]\]|--)&gt;\s*$/g;&#13;
	&#13;
	// Prefer a tbody over its parent table for containing new rows&#13;
	function manipulationTarget( elem, content ) {&#13;
		if ( nodeName( elem, "table" ) &amp;&amp;&#13;
			nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {&#13;
	&#13;
			return jQuery( elem ).children( "tbody" )[ 0 ] || elem;&#13;
		}&#13;
	&#13;
		return elem;&#13;
	}&#13;
	&#13;
	// Replace/restore the type attribute of script elements for safe DOM manipulation&#13;
	function disableScript( elem ) {&#13;
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;&#13;
		return elem;&#13;
	}&#13;
	function restoreScript( elem ) {&#13;
		if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {&#13;
			elem.type = elem.type.slice( 5 );&#13;
		} else {&#13;
			elem.removeAttribute( "type" );&#13;
		}&#13;
	&#13;
		return elem;&#13;
	}&#13;
	&#13;
	function cloneCopyEvent( src, dest ) {&#13;
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;&#13;
	&#13;
		if ( dest.nodeType !== 1 ) {&#13;
			return;&#13;
		}&#13;
	&#13;
		// 1. Copy private data: events, handlers, etc.&#13;
		if ( dataPriv.hasData( src ) ) {&#13;
			pdataOld = dataPriv.access( src );&#13;
			pdataCur = dataPriv.set( dest, pdataOld );&#13;
			events = pdataOld.events;&#13;
	&#13;
			if ( events ) {&#13;
				delete pdataCur.handle;&#13;
				pdataCur.events = {};&#13;
	&#13;
				for ( type in events ) {&#13;
					for ( i = 0, l = events[ type ].length; i &lt; l; i++ ) {&#13;
						jQuery.event.add( dest, type, events[ type ][ i ] );&#13;
					}&#13;
				}&#13;
			}&#13;
		}&#13;
	&#13;
		// 2. Copy user data&#13;
		if ( dataUser.hasData( src ) ) {&#13;
			udataOld = dataUser.access( src );&#13;
			udataCur = jQuery.extend( {}, udataOld );&#13;
	&#13;
			dataUser.set( dest, udataCur );&#13;
		}&#13;
	}&#13;
	&#13;
	// Fix IE bugs, see support tests&#13;
	function fixInput( src, dest ) {&#13;
		var nodeName = dest.nodeName.toLowerCase();&#13;
	&#13;
		// Fails to persist the checked state of a cloned checkbox or radio button.&#13;
		if ( nodeName === "input" &amp;&amp; rcheckableType.test( src.type ) ) {&#13;
			dest.checked = src.checked;&#13;
	&#13;
		// Fails to return the selected option to the default selected state when cloning options&#13;
		} else if ( nodeName === "input" || nodeName === "textarea" ) {&#13;
			dest.defaultValue = src.defaultValue;&#13;
		}&#13;
	}&#13;
	&#13;
	function domManip( collection, args, callback, ignored ) {&#13;
	&#13;
		// Flatten any nested arrays&#13;
		args = concat.apply( [], args );&#13;
	&#13;
		var fragment, first, scripts, hasScripts, node, doc,&#13;
			i = 0,&#13;
			l = collection.length,&#13;
			iNoClone = l - 1,&#13;
			value = args[ 0 ],&#13;
			valueIsFunction = isFunction( value );&#13;
	&#13;
		// We can't cloneNode fragments that contain checked, in WebKit&#13;
		if ( valueIsFunction ||&#13;
				( l &gt; 1 &amp;&amp; typeof value === "string" &amp;&amp;&#13;
					!support.checkClone &amp;&amp; rchecked.test( value ) ) ) {&#13;
			return collection.each( function( index ) {&#13;
				var self = collection.eq( index );&#13;
				if ( valueIsFunction ) {&#13;
					args[ 0 ] = value.call( this, index, self.html() );&#13;
				}&#13;
				domManip( self, args, callback, ignored );&#13;
			} );&#13;
		}&#13;
	&#13;
		if ( l ) {&#13;
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );&#13;
			first = fragment.firstChild;&#13;
	&#13;
			if ( fragment.childNodes.length === 1 ) {&#13;
				fragment = first;&#13;
			}&#13;
	&#13;
			// Require either new content or an interest in ignored elements to invoke the callback&#13;
			if ( first || ignored ) {&#13;
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );&#13;
				hasScripts = scripts.length;&#13;
	&#13;
				// Use the original fragment for the last item&#13;
				// instead of the first because it can end up&#13;
				// being emptied incorrectly in certain situations (#8070).&#13;
				for ( ; i &lt; l; i++ ) {&#13;
					node = fragment;&#13;
	&#13;
					if ( i !== iNoClone ) {&#13;
						node = jQuery.clone( node, true, true );&#13;
	&#13;
						// Keep references to cloned scripts for later restoration&#13;
						if ( hasScripts ) {&#13;
	&#13;
							// Support: Android &lt;=4.0 only, PhantomJS 1 only&#13;
							// push.apply(_, arraylike) throws on ancient WebKit&#13;
							jQuery.merge( scripts, getAll( node, "script" ) );&#13;
						}&#13;
					}&#13;
	&#13;
					callback.call( collection[ i ], node, i );&#13;
				}&#13;
	&#13;
				if ( hasScripts ) {&#13;
					doc = scripts[ scripts.length - 1 ].ownerDocument;&#13;
	&#13;
					// Reenable scripts&#13;
					jQuery.map( scripts, restoreScript );&#13;
	&#13;
					// Evaluate executable scripts on first document insertion&#13;
					for ( i = 0; i &lt; hasScripts; i++ ) {&#13;
						node = scripts[ i ];&#13;
						if ( rscriptType.test( node.type || "" ) &amp;&amp;&#13;
							!dataPriv.access( node, "globalEval" ) &amp;&amp;&#13;
							jQuery.contains( doc, node ) ) {&#13;
	&#13;
							if ( node.src &amp;&amp; ( node.type || "" ).toLowerCase()  !== "module" ) {&#13;
	&#13;
								// Optional AJAX dependency, but won't run scripts if not present&#13;
								if ( jQuery._evalUrl ) {&#13;
									jQuery._evalUrl( node.src );&#13;
								}&#13;
							} else {&#13;
								DOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );&#13;
							}&#13;
						}&#13;
					}&#13;
				}&#13;
			}&#13;
		}&#13;
	&#13;
		return collection;&#13;
	}&#13;
	&#13;
	function remove( elem, selector, keepData ) {&#13;
		var node,&#13;
			nodes = selector ? jQuery.filter( selector, elem ) : elem,&#13;
			i = 0;&#13;
	&#13;
		for ( ; ( node = nodes[ i ] ) != null; i++ ) {&#13;
			if ( !keepData &amp;&amp; node.nodeType === 1 ) {&#13;
				jQuery.cleanData( getAll( node ) );&#13;
			}&#13;
	&#13;
			if ( node.parentNode ) {&#13;
				if ( keepData &amp;&amp; jQuery.contains( node.ownerDocument, node ) ) {&#13;
					setGlobalEval( getAll( node, "script" ) );&#13;
				}&#13;
				node.parentNode.removeChild( node );&#13;
			}&#13;
		}&#13;
	&#13;
		return elem;&#13;
	}&#13;
	&#13;
	jQuery.extend( {&#13;
		htmlPrefilter: function( html ) {&#13;
			return html.replace( rxhtmlTag, "&lt;$1&gt;&lt;/$2&gt;" );&#13;
		},&#13;
	&#13;
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {&#13;
			var i, l, srcElements, destElements,&#13;
				clone = elem.cloneNode( true ),&#13;
				inPage = jQuery.contains( elem.ownerDocument, elem );&#13;
	&#13;
			// Fix IE cloning issues&#13;
			if ( !support.noCloneChecked &amp;&amp; ( elem.nodeType === 1 || elem.nodeType === 11 ) &amp;&amp;&#13;
					!jQuery.isXMLDoc( elem ) ) {&#13;
	&#13;
				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2&#13;
				destElements = getAll( clone );&#13;
				srcElements = getAll( elem );&#13;
	&#13;
				for ( i = 0, l = srcElements.length; i &lt; l; i++ ) {&#13;
					fixInput( srcElements[ i ], destElements[ i ] );&#13;
				}&#13;
			}&#13;
	&#13;
			// Copy the events from the original to the clone&#13;
			if ( dataAndEvents ) {&#13;
				if ( deepDataAndEvents ) {&#13;
					srcElements = srcElements || getAll( elem );&#13;
					destElements = destElements || getAll( clone );&#13;
	&#13;
					for ( i = 0, l = srcElements.length; i &lt; l; i++ ) {&#13;
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );&#13;
					}&#13;
				} else {&#13;
					cloneCopyEvent( elem, clone );&#13;
				}&#13;
			}&#13;
	&#13;
			// Preserve script evaluation history&#13;
			destElements = getAll( clone, "script" );&#13;
			if ( destElements.length &gt; 0 ) {&#13;
				setGlobalEval( destElements, !inPage &amp;&amp; getAll( elem, "script" ) );&#13;
			}&#13;
	&#13;
			// Return the cloned set&#13;
			return clone;&#13;
		},&#13;
	&#13;
		cleanData: function( elems ) {&#13;
			var data, elem, type,&#13;
				special = jQuery.event.special,&#13;
				i = 0;&#13;
	&#13;
			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {&#13;
				if ( acceptData( elem ) ) {&#13;
					if ( ( data = elem[ dataPriv.expando ] ) ) {&#13;
						if ( data.events ) {&#13;
							for ( type in data.events ) {&#13;
								if ( special[ type ] ) {&#13;
									jQuery.event.remove( elem, type );&#13;
	&#13;
								// This is a shortcut to avoid jQuery.event.remove's overhead&#13;
								} else {&#13;
									jQuery.removeEvent( elem, type, data.handle );&#13;
								}&#13;
							}&#13;
						}&#13;
	&#13;
						// Support: Chrome &lt;=35 - 45+&#13;
						// Assign undefined instead of using delete, see Data#remove&#13;
						elem[ dataPriv.expando ] = undefined;&#13;
					}&#13;
					if ( elem[ dataUser.expando ] ) {&#13;
	&#13;
						// Support: Chrome &lt;=35 - 45+&#13;
						// Assign undefined instead of using delete, see Data#remove&#13;
						elem[ dataUser.expando ] = undefined;&#13;
					}&#13;
				}&#13;
			}&#13;
		}&#13;
	} );&#13;
	&#13;
	jQuery.fn.extend( {&#13;
		detach: function( selector ) {&#13;
			return remove( this, selector, true );&#13;
		},&#13;
	&#13;
		remove: function( selector ) {&#13;
			return remove( this, selector );&#13;
		},&#13;
	&#13;
		text: function( value ) {&#13;
			return access( this, function( value ) {&#13;
				return value === undefined ?&#13;
					jQuery.text( this ) :&#13;
					this.empty().each( function() {&#13;
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {&#13;
							this.textContent = value;&#13;
						}&#13;
					} );&#13;
			}, null, value, arguments.length );&#13;
		},&#13;
	&#13;
		append: function() {&#13;
			return domManip( this, arguments, function( elem ) {&#13;
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {&#13;
					var target = manipulationTarget( this, elem );&#13;
					target.appendChild( elem );&#13;
				}&#13;
			} );&#13;
		},&#13;
	&#13;
		prepend: function() {&#13;
			return domManip( this, arguments, function( elem ) {&#13;
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {&#13;
					var target = manipulationTarget( this, elem );&#13;
					target.insertBefore( elem, target.firstChild );&#13;
				}&#13;
			} );&#13;
		},&#13;
	&#13;
		before: function() {&#13;
			return domManip( this, arguments, function( elem ) {&#13;
				if ( this.parentNode ) {&#13;
					this.parentNode.insertBefore( elem, this );&#13;
				}&#13;
			} );&#13;
		},&#13;
	&#13;
		after: function() {&#13;
			return domManip( this, arguments, function( elem ) {&#13;
				if ( this.parentNode ) {&#13;
					this.parentNode.insertBefore( elem, this.nextSibling );&#13;
				}&#13;
			} );&#13;
		},&#13;
	&#13;
		empty: function() {&#13;
			var elem,&#13;
				i = 0;&#13;
	&#13;
			for ( ; ( elem = this[ i ] ) != null; i++ ) {&#13;
				if ( elem.nodeType === 1 ) {&#13;
	&#13;
					// Prevent memory leaks&#13;
					jQuery.cleanData( getAll( elem, false ) );&#13;
	&#13;
					// Remove any remaining nodes&#13;
					elem.textContent = "";&#13;
				}&#13;
			}&#13;
	&#13;
			return this;&#13;
		},&#13;
	&#13;
		clone: function( dataAndEvents, deepDataAndEvents ) {&#13;
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;&#13;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;&#13;
	&#13;
			return this.map( function() {&#13;
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );&#13;
			} );&#13;
		},&#13;
	&#13;
		html: function( value ) {&#13;
			return access( this, function( value ) {&#13;
				var elem = this[ 0 ] || {},&#13;
					i = 0,&#13;
					l = this.length;&#13;
	&#13;
				if ( value === undefined &amp;&amp; elem.nodeType === 1 ) {&#13;
					return elem.innerHTML;&#13;
				}&#13;
	&#13;
				// See if we can take a shortcut and just use innerHTML&#13;
				if ( typeof value === "string" &amp;&amp; !rnoInnerhtml.test( value ) &amp;&amp;&#13;
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {&#13;
	&#13;
					value = jQuery.htmlPrefilter( value );&#13;
	&#13;
					try {&#13;
						for ( ; i &lt; l; i++ ) {&#13;
							elem = this[ i ] || {};&#13;
	&#13;
							// Remove element nodes and prevent memory leaks&#13;
							if ( elem.nodeType === 1 ) {&#13;
								jQuery.cleanData( getAll( elem, false ) );&#13;
								elem.innerHTML = value;&#13;
							}&#13;
						}&#13;
	&#13;
						elem = 0;&#13;
	&#13;
					// If using innerHTML throws an exception, use the fallback method&#13;
					} catch ( e ) {}&#13;
				}&#13;
	&#13;
				if ( elem ) {&#13;
					this.empty().append( value );&#13;
				}&#13;
			}, null, value, arguments.length );&#13;
		},&#13;
	&#13;
		replaceWith: function() {&#13;
			var ignored = [];&#13;
	&#13;
			// Make the changes, replacing each non-ignored context element with the new content&#13;
			return domManip( this, arguments, function( elem ) {&#13;
				var parent = this.parentNode;&#13;
	&#13;
				if ( jQuery.inArray( this, ignored ) &lt; 0 ) {&#13;
					jQuery.cleanData( getAll( this ) );&#13;
					if ( parent ) {&#13;
						parent.replaceChild( elem, this );&#13;
					}&#13;
				}&#13;
	&#13;
			// Force callback invocation&#13;
			}, ignored );&#13;
		}&#13;
	} );&#13;
	&#13;
	jQuery.each( {&#13;
		appendTo: "append",&#13;
		prependTo: "prepend",&#13;
		insertBefore: "before",&#13;
		insertAfter: "after",&#13;
		replaceAll: "replaceWith"&#13;
	}, function( name, original ) {&#13;
		jQuery.fn[ name ] = function( selector ) {&#13;
			var elems,&#13;
				ret = [],&#13;
				insert = jQuery( selector ),&#13;
				last = insert.length - 1,&#13;
				i = 0;&#13;
	&#13;
			for ( ; i &lt;= last; i++ ) {&#13;
				elems = i === last ? this : this.clone( true );&#13;
				jQuery( insert[ i ] )[ original ]( elems );&#13;
	&#13;
				// Support: Android &lt;=4.0 only, PhantomJS 1 only&#13;
				// .get() because push.apply(_, arraylike) throws on ancient WebKit&#13;
				push.apply( ret, elems.get() );&#13;
			}&#13;
	&#13;
			return this.pushStack( ret );&#13;
		};&#13;
	} );&#13;
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );&#13;
	&#13;
	var getStyles = function( elem ) {&#13;
	&#13;
			// Support: IE &lt;=11 only, Firefox &lt;=30 (#15098, #14150)&#13;
			// IE throws on elements created in popups&#13;
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"&#13;
			var view = elem.ownerDocument.defaultView;&#13;
	&#13;
			if ( !view || !view.opener ) {&#13;
				view = window;&#13;
			}&#13;
	&#13;
			return view.getComputedStyle( elem );&#13;
		};&#13;
	&#13;
	var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );&#13;
	&#13;
	&#13;
	&#13;
	( function() {&#13;
	&#13;
		// Executing both pixelPosition &amp; boxSizingReliable tests require only one layout&#13;
		// so they're executed at the same time to save the second computation.&#13;
		function computeStyleTests() {&#13;
	&#13;
			// This is a singleton, we need to execute it only once&#13;
			if ( !div ) {&#13;
				return;&#13;
			}&#13;
	&#13;
			container.style.cssText = "position:absolute;left:-11111px;width:60px;" +&#13;
				"margin-top:1px;padding:0;border:0";&#13;
			div.style.cssText =&#13;
				"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +&#13;
				"margin:auto;border:1px;padding:1px;" +&#13;
				"width:60%;top:1%";&#13;
			documentElement.appendChild( container ).appendChild( div );&#13;
	&#13;
			var divStyle = window.getComputedStyle( div );&#13;
			pixelPositionVal = divStyle.top !== "1%";&#13;
	&#13;
			// Support: Android 4.0 - 4.3 only, Firefox &lt;=3 - 44&#13;
			reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;&#13;
	&#13;
			// Support: Android 4.0 - 4.3 only, Safari &lt;=9.1 - 10.1, iOS &lt;=7.0 - 9.3&#13;
			// Some styles come back with percentage values, even though they shouldn't&#13;
			div.style.right = "60%";&#13;
			pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;&#13;
	&#13;
			// Support: IE 9 - 11 only&#13;
			// Detect misreporting of content dimensions for box-sizing:border-box elements&#13;
			boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;&#13;
	&#13;
			// Support: IE 9 only&#13;
			// Detect overflow:scroll screwiness (gh-3699)&#13;
			div.style.position = "absolute";&#13;
			scrollboxSizeVal = div.offsetWidth === 36 || "absolute";&#13;
	&#13;
			documentElement.removeChild( container );&#13;
	&#13;
			// Nullify the div so it wouldn't be stored in the memory and&#13;
			// it will also be a sign that checks already performed&#13;
			div = null;&#13;
		}&#13;
	&#13;
		function roundPixelMeasures( measure ) {&#13;
			return Math.round( parseFloat( measure ) );&#13;
		}&#13;
	&#13;
		var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,&#13;
			reliableMarginLeftVal,&#13;
			container = document.createElement( "div" ),&#13;
			div = document.createElement( "div" );&#13;
	&#13;
		// Finish early in limited (non-browser) environments&#13;
		if ( !div.style ) {&#13;
			return;&#13;
		}&#13;
	&#13;
		// Support: IE &lt;=9 - 11 only&#13;
		// Style of cloned element affects source element cloned (#8908)&#13;
		div.style.backgroundClip = "content-box";&#13;
		div.cloneNode( true ).style.backgroundClip = "";&#13;
		support.clearCloneStyle = div.style.backgroundClip === "content-box";&#13;
	&#13;
		jQuery.extend( support, {&#13;
			boxSizingReliable: function() {&#13;
				computeStyleTests();&#13;
				return boxSizingReliableVal;&#13;
			},&#13;
			pixelBoxStyles: function() {&#13;
				computeStyleTests();&#13;
				return pixelBoxStylesVal;&#13;
			},&#13;
			pixelPosition: function() {&#13;
				computeStyleTests();&#13;
				return pixelPositionVal;&#13;
			},&#13;
			reliableMarginLeft: function() {&#13;
				computeStyleTests();&#13;
				return reliableMarginLeftVal;&#13;
			},&#13;
			scrollboxSize: function() {&#13;
				computeStyleTests();&#13;
				return scrollboxSizeVal;&#13;
			}&#13;
		} );&#13;
	} )();&#13;
	&#13;
	&#13;
	function curCSS( elem, name, computed ) {&#13;
		var width, minWidth, maxWidth, ret,&#13;
	&#13;
			// Support: Firefox 51+&#13;
			// Retrieving style before computed somehow&#13;
			// fixes an issue with getting wrong values&#13;
			// on detached elements&#13;
			style = elem.style;&#13;
	&#13;
		computed = computed || getStyles( elem );&#13;
	&#13;
		// getPropertyValue is needed for:&#13;
		//   .css('filter') (IE 9 only, #12537)&#13;
		//   .css('--customProperty) (#3144)&#13;
		if ( computed ) {&#13;
			ret = computed.getPropertyValue( name ) || computed[ name ];&#13;
	&#13;
			if ( ret === "" &amp;&amp; !jQuery.contains( elem.ownerDocument, elem ) ) {&#13;
				ret = jQuery.style( elem, name );&#13;
			}&#13;
	&#13;
			// A tribute to the "awesome hack by Dean Edwards"&#13;
			// Android Browser returns percentage for some values,&#13;
			// but width seems to be reliably pixels.&#13;
			// This is against the CSSOM draft spec:&#13;
			// https://drafts.csswg.org/cssom/#resolved-values&#13;
			if ( !support.pixelBoxStyles() &amp;&amp; rnumnonpx.test( ret ) &amp;&amp; rboxStyle.test( name ) ) {&#13;
	&#13;
				// Remember the original values&#13;
				width = style.width;&#13;
				minWidth = style.minWidth;&#13;
				maxWidth = style.maxWidth;&#13;
	&#13;
				// Put in the new values to get a computed value out&#13;
				style.minWidth = style.maxWidth = style.width = ret;&#13;
				ret = computed.width;&#13;
	&#13;
				// Revert the changed values&#13;
				style.width = width;&#13;
				style.minWidth = minWidth;&#13;
				style.maxWidth = maxWidth;&#13;
			}&#13;
		}&#13;
	&#13;
		return ret !== undefined ?&#13;
	&#13;
			// Support: IE &lt;=9 - 11 only&#13;
			// IE returns zIndex value as an integer.&#13;
			ret + "" :&#13;
			ret;&#13;
	}&#13;
	&#13;
	&#13;
	function addGetHookIf( conditionFn, hookFn ) {&#13;
	&#13;
		// Define the hook, we'll check on the first run if it's really needed.&#13;
		return {&#13;
			get: function() {&#13;
				if ( conditionFn() ) {&#13;
	&#13;
					// Hook not needed (or it's not possible to use it due&#13;
					// to missing dependency), remove it.&#13;
					delete this.get;&#13;
					return;&#13;
				}&#13;
	&#13;
				// Hook needed; redefine it so that the support test is not executed again.&#13;
				return ( this.get = hookFn ).apply( this, arguments );&#13;
			}&#13;
		};&#13;
	}&#13;
	&#13;
	&#13;
	var&#13;
	&#13;
		// Swappable if display is none or starts with table&#13;
		// except "table", "table-cell", or "table-caption"&#13;
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display&#13;
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,&#13;
		rcustomProp = /^--/,&#13;
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },&#13;
		cssNormalTransform = {&#13;
			letterSpacing: "0",&#13;
			fontWeight: "400"&#13;
		},&#13;
	&#13;
		cssPrefixes = [ "Webkit", "Moz", "ms" ],&#13;
		emptyStyle = document.createElement( "div" ).style;&#13;
	&#13;
	// Return a css property mapped to a potentially vendor prefixed property&#13;
	function vendorPropName( name ) {&#13;
	&#13;
		// Shortcut for names that are not vendor prefixed&#13;
		if ( name in emptyStyle ) {&#13;
			return name;&#13;
		}&#13;
	&#13;
		// Check for vendor prefixed names&#13;
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),&#13;
			i = cssPrefixes.length;&#13;
	&#13;
		while ( i-- ) {&#13;
			name = cssPrefixes[ i ] + capName;&#13;
			if ( name in emptyStyle ) {&#13;
				return name;&#13;
			}&#13;
		}&#13;
	}&#13;
	&#13;
	// Return a property mapped along what jQuery.cssProps suggests or to&#13;
	// a vendor prefixed property.&#13;
	function finalPropName( name ) {&#13;
		var ret = jQuery.cssProps[ name ];&#13;
		if ( !ret ) {&#13;
			ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;&#13;
		}&#13;
		return ret;&#13;
	}&#13;
	&#13;
	function setPositiveNumber( elem, value, subtract ) {&#13;
	&#13;
		// Any relative (+/-) values have already been&#13;
		// normalized at this point&#13;
		var matches = rcssNum.exec( value );&#13;
		return matches ?&#13;
	&#13;
			// Guard against undefined "subtract", e.g., when used as in cssHooks&#13;
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :&#13;
			value;&#13;
	}&#13;
	&#13;
	function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {&#13;
		var i = dimension === "width" ? 1 : 0,&#13;
			extra = 0,&#13;
			delta = 0;&#13;
	&#13;
		// Adjustment may not be necessary&#13;
		if ( box === ( isBorderBox ? "border" : "content" ) ) {&#13;
			return 0;&#13;
		}&#13;
	&#13;
		for ( ; i &lt; 4; i += 2 ) {&#13;
	&#13;
			// Both box models exclude margin&#13;
			if ( box === "margin" ) {&#13;
				delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );&#13;
			}&#13;
	&#13;
			// If we get here with a content-box, we're seeking "padding" or "border" or "margin"&#13;
			if ( !isBorderBox ) {&#13;
	&#13;
				// Add padding&#13;
				delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );&#13;
	&#13;
				// For "border" or "margin", add border&#13;
				if ( box !== "padding" ) {&#13;
					delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );&#13;
	&#13;
				// But still keep track of it otherwise&#13;
				} else {&#13;
					extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );&#13;
				}&#13;
	&#13;
			// If we get here with a border-box (content + padding + border), we're seeking "content" or&#13;
			// "padding" or "margin"&#13;
			} else {&#13;
	&#13;
				// For "content", subtract padding&#13;
				if ( box === "content" ) {&#13;
					delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );&#13;
				}&#13;
	&#13;
				// For "content" or "padding", subtract border&#13;
				if ( box !== "margin" ) {&#13;
					delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );&#13;
				}&#13;
			}&#13;
		}&#13;
	&#13;
		// Account for positive content-box scroll gutter when requested by providing computedVal&#13;
		if ( !isBorderBox &amp;&amp; computedVal &gt;= 0 ) {&#13;
	&#13;
			// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border&#13;
			// Assuming integer scroll gutter, subtract the rest and round down&#13;
			delta += Math.max( 0, Math.ceil(&#13;
				elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -&#13;
				computedVal -&#13;
				delta -&#13;
				extra -&#13;
				0.5&#13;
			) );&#13;
		}&#13;
	&#13;
		return delta;&#13;
	}&#13;
	&#13;
	function getWidthOrHeight( elem, dimension, extra ) {&#13;
	&#13;
		// Start with computed style&#13;
		var styles = getStyles( elem ),&#13;
			val = curCSS( elem, dimension, styles ),&#13;
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",&#13;
			valueIsBorderBox = isBorderBox;&#13;
	&#13;
		// Support: Firefox &lt;=54&#13;
		// Return a confounding non-pixel value or feign ignorance, as appropriate.&#13;
		if ( rnumnonpx.test( val ) ) {&#13;
			if ( !extra ) {&#13;
				return val;&#13;
			}&#13;
			val = "auto";&#13;
		}&#13;
	&#13;
		// Check for style in case a browser which returns unreliable values&#13;
		// for getComputedStyle silently falls back to the reliable elem.style&#13;
		valueIsBorderBox = valueIsBorderBox &amp;&amp;&#13;
			( support.boxSizingReliable() || val === elem.style[ dimension ] );&#13;
	&#13;
		// Fall back to offsetWidth/offsetHeight when value is "auto"&#13;
		// This happens for inline elements with no explicit setting (gh-3571)&#13;
		// Support: Android &lt;=4.1 - 4.3 only&#13;
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)&#13;
		if ( val === "auto" ||&#13;
			!parseFloat( val ) &amp;&amp; jQuery.css( elem, "display", false, styles ) === "inline" ) {&#13;
	&#13;
			val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];&#13;
	&#13;
			// offsetWidth/offsetHeight provide border-box values&#13;
			valueIsBorderBox = true;&#13;
		}&#13;
	&#13;
		// Normalize "" and auto&#13;
		val = parseFloat( val ) || 0;&#13;
	&#13;
		// Adjust for the element's box model&#13;
		return ( val +&#13;
			boxModelAdjustment(&#13;
				elem,&#13;
				dimension,&#13;
				extra || ( isBorderBox ? "border" : "content" ),&#13;
				valueIsBorderBox,&#13;
				styles,&#13;
	&#13;
				// Provide the current computed size to request scroll gutter calculation (gh-3589)&#13;
				val&#13;
			)&#13;
		) + "px";&#13;
	}&#13;
	&#13;
	jQuery.extend( {&#13;
	&#13;
		// Add in style property hooks for overriding the default&#13;
		// behavior of getting and setting a style property&#13;
		cssHooks: {&#13;
			opacity: {&#13;
				get: function( elem, computed ) {&#13;
					if ( computed ) {&#13;
	&#13;
						// We should always get a number back from opacity&#13;
						var ret = curCSS( elem, "opacity" );&#13;
						return ret === "" ? "1" : ret;&#13;
					}&#13;
				}&#13;
			}&#13;
		},&#13;
	&#13;
		// Don't automatically add "px" to these possibly-unitless properties&#13;
		cssNumber: {&#13;
			"animationIterationCount": true,&#13;
			"columnCount": true,&#13;
			"fillOpacity": true,&#13;
			"flexGrow": true,&#13;
			"flexShrink": true,&#13;
			"fontWeight": true,&#13;
			"lineHeight": true,&#13;
			"opacity": true,&#13;
			"order": true,&#13;
			"orphans": true,&#13;
			"widows": true,&#13;
			"zIndex": true,&#13;
			"zoom": true&#13;
		},&#13;
	&#13;
		// Add in properties whose names you wish to fix before&#13;
		// setting or getting the value&#13;
		cssProps: {},&#13;
	&#13;
		// Get and set the style property on a DOM Node&#13;
		style: function( elem, name, value, extra ) {&#13;
	&#13;
			// Don't set styles on text and comment nodes&#13;
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {&#13;
				return;&#13;
			}&#13;
	&#13;
			// Make sure that we're working with the right name&#13;
			var ret, type, hooks,&#13;
				origName = camelCase( name ),&#13;
				isCustomProp = rcustomProp.test( name ),&#13;
				style = elem.style;&#13;
	&#13;
			// Make sure that we're working with the right name. We don't&#13;
			// want to query the value if it is a CSS custom property&#13;
			// since they are user-defined.&#13;
			if ( !isCustomProp ) {&#13;
				name = finalPropName( origName );&#13;
			}&#13;
	&#13;
			// Gets hook for the prefixed version, then unprefixed version&#13;
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];&#13;
	&#13;
			// Check if we're setting a value&#13;
			if ( value !== undefined ) {&#13;
				type = typeof value;&#13;
	&#13;
				// Convert "+=" or "-=" to relative numbers (#7345)&#13;
				if ( type === "string" &amp;&amp; ( ret = rcssNum.exec( value ) ) &amp;&amp; ret[ 1 ] ) {&#13;
					value = adjustCSS( elem, name, ret );&#13;
	&#13;
					// Fixes bug #9237&#13;
					type = "number";&#13;
				}&#13;
	&#13;
				// Make sure that null and NaN values aren't set (#7116)&#13;
				if ( value == null || value !== value ) {&#13;
					return;&#13;
				}&#13;
	&#13;
				// If a number was passed in, add the unit (except for certain CSS properties)&#13;
				if ( type === "number" ) {&#13;
					value += ret &amp;&amp; ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );&#13;
				}&#13;
	&#13;
				// background-* props affect original clone's values&#13;
				if ( !support.clearCloneStyle &amp;&amp; value === "" &amp;&amp; name.indexOf( "background" ) === 0 ) {&#13;
					style[ name ] = "inherit";&#13;
				}&#13;
	&#13;
				// If a hook was provided, use that value, otherwise just set the specified value&#13;
				if ( !hooks || !( "set" in hooks ) ||&#13;
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {&#13;
	&#13;
					if ( isCustomProp ) {&#13;
						style.setProperty( name, value );&#13;
					} else {&#13;
						style[ name ] = value;&#13;
					}&#13;
				}&#13;
	&#13;
			} else {&#13;
	&#13;
				// If a hook was provided get the non-computed value from there&#13;
				if ( hooks &amp;&amp; "get" in hooks &amp;&amp;&#13;
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {&#13;
	&#13;
					return ret;&#13;
				}&#13;
	&#13;
				// Otherwise just get the value from the style object&#13;
				return style[ name ];&#13;
			}&#13;
		},&#13;
	&#13;
		css: function( elem, name, extra, styles ) {&#13;
			var val, num, hooks,&#13;
				origName = camelCase( name ),&#13;
				isCustomProp = rcustomProp.test( name );&#13;
	&#13;
			// Make sure that we're working with the right name. We don't&#13;
			// want to modify the value if it is a CSS custom property&#13;
			// since they are user-defined.&#13;
			if ( !isCustomProp ) {&#13;
				name = finalPropName( origName );&#13;
			}&#13;
	&#13;
			// Try prefixed name followed by the unprefixed name&#13;
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];&#13;
	&#13;
			// If a hook was provided get the computed value from there&#13;
			if ( hooks &amp;&amp; "get" in hooks ) {&#13;
				val = hooks.get( elem, true, extra );&#13;
			}&#13;
	&#13;
			// Otherwise, if a way to get the computed value exists, use that&#13;
			if ( val === undefined ) {&#13;
				val = curCSS( elem, name, styles );&#13;
			}&#13;
	&#13;
			// Convert "normal" to computed value&#13;
			if ( val === "normal" &amp;&amp; name in cssNormalTransform ) {&#13;
				val = cssNormalTransform[ name ];&#13;
			}&#13;
	&#13;
			// Make numeric if forced or a qualifier was provided and val looks numeric&#13;
			if ( extra === "" || extra ) {&#13;
				num = parseFloat( val );&#13;
				return extra === true || isFinite( num ) ? num || 0 : val;&#13;
			}&#13;
	&#13;
			return val;&#13;
		}&#13;
	} );&#13;
	&#13;
	jQuery.each( [ "height", "width" ], function( i, dimension ) {&#13;
		jQuery.cssHooks[ dimension ] = {&#13;
			get: function( elem, computed, extra ) {&#13;
				if ( computed ) {&#13;
	&#13;
					// Certain elements can have dimension info if we invisibly show them&#13;
					// but it must have a current display style that would benefit&#13;
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &amp;&amp;&#13;
	&#13;
						// Support: Safari 8+&#13;
						// Table columns in Safari have non-zero offsetWidth &amp; zero&#13;
						// getBoundingClientRect().width unless display is changed.&#13;
						// Support: IE &lt;=11 only&#13;
						// Running getBoundingClientRect on a disconnected node&#13;
						// in IE throws an error.&#13;
						( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?&#13;
							swap( elem, cssShow, function() {&#13;
								return getWidthOrHeight( elem, dimension, extra );&#13;
							} ) :&#13;
							getWidthOrHeight( elem, dimension, extra );&#13;
				}&#13;
			},&#13;
	&#13;
			set: function( elem, value, extra ) {&#13;
				var matches,&#13;
					styles = getStyles( elem ),&#13;
					isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",&#13;
					subtract = extra &amp;&amp; boxModelAdjustment(&#13;
						elem,&#13;
						dimension,&#13;
						extra,&#13;
						isBorderBox,&#13;
						styles&#13;
					);&#13;
	&#13;
				// Account for unreliable border-box dimensions by comparing offset* to computed and&#13;
				// faking a content-box to get border and padding (gh-3699)&#13;
				if ( isBorderBox &amp;&amp; support.scrollboxSize() === styles.position ) {&#13;
					subtract -= Math.ceil(&#13;
						elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -&#13;
						parseFloat( styles[ dimension ] ) -&#13;
						boxModelAdjustment( elem, dimension, "border", false, styles ) -&#13;
						0.5&#13;
					);&#13;
				}&#13;
	&#13;
				// Convert to pixels if value adjustment is needed&#13;
				if ( subtract &amp;&amp; ( matches = rcssNum.exec( value ) ) &amp;&amp;&#13;
					( matches[ 3 ] || "px" ) !== "px" ) {&#13;
	&#13;
					elem.style[ dimension ] = value;&#13;
					value = jQuery.css( elem, dimension );&#13;
				}&#13;
	&#13;
				return setPositiveNumber( elem, value, subtract );&#13;
			}&#13;
		};&#13;
	} );&#13;
	&#13;
	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,&#13;
		function( elem, computed ) {&#13;
			if ( computed ) {&#13;
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||&#13;
					elem.getBoundingClientRect().left -&#13;
						swap( elem, { marginLeft: 0 }, function() {&#13;
							return elem.getBoundingClientRect().left;&#13;
						} )&#13;
					) + "px";&#13;
			}&#13;
		}&#13;
	);&#13;
	&#13;
	// These hooks are used by animate to expand properties&#13;
	jQuery.each( {&#13;
		margin: "",&#13;
		padding: "",&#13;
		border: "Width"&#13;
	}, function( prefix, suffix ) {&#13;
		jQuery.cssHooks[ prefix + suffix ] = {&#13;
			expand: function( value ) {&#13;
				var i = 0,&#13;
					expanded = {},&#13;
	&#13;
					// Assumes a single number if not a string&#13;
					parts = typeof value === "string" ? value.split( " " ) : [ value ];&#13;
	&#13;
				for ( ; i &lt; 4; i++ ) {&#13;
					expanded[ prefix + cssExpand[ i ] + suffix ] =&#13;
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];&#13;
				}&#13;
	&#13;
				return expanded;&#13;
			}&#13;
		};&#13;
	&#13;
		if ( prefix !== "margin" ) {&#13;
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;&#13;
		}&#13;
	} );&#13;
	&#13;
	jQuery.fn.extend( {&#13;
		css: function( name, value ) {&#13;
			return access( this, function( elem, name, value ) {&#13;
				var styles, len,&#13;
					map = {},&#13;
					i = 0;&#13;
	&#13;
				if ( Array.isArray( name ) ) {&#13;
					styles = getStyles( elem );&#13;
					len = name.length;&#13;
	&#13;
					for ( ; i &lt; len; i++ ) {&#13;
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );&#13;
					}&#13;
	&#13;
					return map;&#13;
				}&#13;
	&#13;
				return value !== undefined ?&#13;
					jQuery.style( elem, name, value ) :&#13;
					jQuery.css( elem, name );&#13;
			}, name, value, arguments.length &gt; 1 );&#13;
		}&#13;
	} );&#13;
	&#13;
	&#13;
	function Tween( elem, options, prop, end, easing ) {&#13;
		return new Tween.prototype.init( elem, options, prop, end, easing );&#13;
	}&#13;
	jQuery.Tween = Tween;&#13;
	&#13;
	Tween.prototype = {&#13;
		constructor: Tween,&#13;
		init: function( elem, options, prop, end, easing, unit ) {&#13;
			this.elem = elem;&#13;
			this.prop = prop;&#13;
			this.easing = easing || jQuery.easing._default;&#13;
			this.options = options;&#13;
			this.start = this.now = this.cur();&#13;
			this.end = end;&#13;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );&#13;
		},&#13;
		cur: function() {&#13;
			var hooks = Tween.propHooks[ this.prop ];&#13;
	&#13;
			return hooks &amp;&amp; hooks.get ?&#13;
				hooks.get( this ) :&#13;
				Tween.propHooks._default.get( this );&#13;
		},&#13;
		run: function( percent ) {&#13;
			var eased,&#13;
				hooks = Tween.propHooks[ this.prop ];&#13;
	&#13;
			if ( this.options.duration ) {&#13;
				this.pos = eased = jQuery.easing[ this.easing ](&#13;
					percent, this.options.duration * percent, 0, 1, this.options.duration&#13;
				);&#13;
			} else {&#13;
				this.pos = eased = percent;&#13;
			}&#13;
			this.now = ( this.end - this.start ) * eased + this.start;&#13;
	&#13;
			if ( this.options.step ) {&#13;
				this.options.step.call( this.elem, this.now, this );&#13;
			}&#13;
	&#13;
			if ( hooks &amp;&amp; hooks.set ) {&#13;
				hooks.set( this );&#13;
			} else {&#13;
				Tween.propHooks._default.set( this );&#13;
			}&#13;
			return this;&#13;
		}&#13;
	};&#13;
	&#13;
	Tween.prototype.init.prototype = Tween.prototype;&#13;
	&#13;
	Tween.propHooks = {&#13;
		_default: {&#13;
			get: function( tween ) {&#13;
				var result;&#13;
	&#13;
				// Use a property on the element directly when it is not a DOM element,&#13;
				// or when there is no matching style property that exists.&#13;
				if ( tween.elem.nodeType !== 1 ||&#13;
					tween.elem[ tween.prop ] != null &amp;&amp; tween.elem.style[ tween.prop ] == null ) {&#13;
					return tween.elem[ tween.prop ];&#13;
				}&#13;
	&#13;
				// Passing an empty string as a 3rd parameter to .css will automatically&#13;
				// attempt a parseFloat and fallback to a string if the parse fails.&#13;
				// Simple values such as "10px" are parsed to Float;&#13;
				// complex values such as "rotate(1rad)" are returned as-is.&#13;
				result = jQuery.css( tween.elem, tween.prop, "" );&#13;
	&#13;
				// Empty strings, null, undefined and "auto" are converted to 0.&#13;
				return !result || result === "auto" ? 0 : result;&#13;
			},&#13;
			set: function( tween ) {&#13;
	&#13;
				// Use step hook for back compat.&#13;
				// Use cssHook if its there.&#13;
				// Use .style if available and use plain properties where available.&#13;
				if ( jQuery.fx.step[ tween.prop ] ) {&#13;
					jQuery.fx.step[ tween.prop ]( tween );&#13;
				} else if ( tween.elem.nodeType === 1 &amp;&amp;&#13;
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||&#13;
						jQuery.cssHooks[ tween.prop ] ) ) {&#13;
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );&#13;
				} else {&#13;
					tween.elem[ tween.prop ] = tween.now;&#13;
				}&#13;
			}&#13;
		}&#13;
	};&#13;
	&#13;
	// Support: IE &lt;=9 only&#13;
	// Panic based approach to setting things on disconnected nodes&#13;
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {&#13;
		set: function( tween ) {&#13;
			if ( tween.elem.nodeType &amp;&amp; tween.elem.parentNode ) {&#13;
				tween.elem[ tween.prop ] = tween.now;&#13;
			}&#13;
		}&#13;
	};&#13;
	&#13;
	jQuery.easing = {&#13;
		linear: function( p ) {&#13;
			return p;&#13;
		},&#13;
		swing: function( p ) {&#13;
			return 0.5 - Math.cos( p * Math.PI ) / 2;&#13;
		},&#13;
		_default: "swing"&#13;
	};&#13;
	&#13;
	jQuery.fx = Tween.prototype.init;&#13;
	&#13;
	// Back compat &lt;1.8 extension point&#13;
	jQuery.fx.step = {};&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	var&#13;
		fxNow, inProgress,&#13;
		rfxtypes = /^(?:toggle|show|hide)$/,&#13;
		rrun = /queueHooks$/;&#13;
	&#13;
	function schedule() {&#13;
		if ( inProgress ) {&#13;
			if ( document.hidden === false &amp;&amp; window.requestAnimationFrame ) {&#13;
				window.requestAnimationFrame( schedule );&#13;
			} else {&#13;
				window.setTimeout( schedule, jQuery.fx.interval );&#13;
			}&#13;
	&#13;
			jQuery.fx.tick();&#13;
		}&#13;
	}&#13;
	&#13;
	// Animations created synchronously will run synchronously&#13;
	function createFxNow() {&#13;
		window.setTimeout( function() {&#13;
			fxNow = undefined;&#13;
		} );&#13;
		return ( fxNow = Date.now() );&#13;
	}&#13;
	&#13;
	// Generate parameters to create a standard animation&#13;
	function genFx( type, includeWidth ) {&#13;
		var which,&#13;
			i = 0,&#13;
			attrs = { height: type };&#13;
	&#13;
		// If we include width, step value is 1 to do all cssExpand values,&#13;
		// otherwise step value is 2 to skip over Left and Right&#13;
		includeWidth = includeWidth ? 1 : 0;&#13;
		for ( ; i &lt; 4; i += 2 - includeWidth ) {&#13;
			which = cssExpand[ i ];&#13;
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;&#13;
		}&#13;
	&#13;
		if ( includeWidth ) {&#13;
			attrs.opacity = attrs.width = type;&#13;
		}&#13;
	&#13;
		return attrs;&#13;
	}&#13;
	&#13;
	function createTween( value, prop, animation ) {&#13;
		var tween,&#13;
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),&#13;
			index = 0,&#13;
			length = collection.length;&#13;
		for ( ; index &lt; length; index++ ) {&#13;
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {&#13;
	&#13;
				// We're done with this property&#13;
				return tween;&#13;
			}&#13;
		}&#13;
	}&#13;
	&#13;
	function defaultPrefilter( elem, props, opts ) {&#13;
		var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,&#13;
			isBox = "width" in props || "height" in props,&#13;
			anim = this,&#13;
			orig = {},&#13;
			style = elem.style,&#13;
			hidden = elem.nodeType &amp;&amp; isHiddenWithinTree( elem ),&#13;
			dataShow = dataPriv.get( elem, "fxshow" );&#13;
	&#13;
		// Queue-skipping animations hijack the fx hooks&#13;
		if ( !opts.queue ) {&#13;
			hooks = jQuery._queueHooks( elem, "fx" );&#13;
			if ( hooks.unqueued == null ) {&#13;
				hooks.unqueued = 0;&#13;
				oldfire = hooks.empty.fire;&#13;
				hooks.empty.fire = function() {&#13;
					if ( !hooks.unqueued ) {&#13;
						oldfire();&#13;
					}&#13;
				};&#13;
			}&#13;
			hooks.unqueued++;&#13;
	&#13;
			anim.always( function() {&#13;
	&#13;
				// Ensure the complete handler is called before this completes&#13;
				anim.always( function() {&#13;
					hooks.unqueued--;&#13;
					if ( !jQuery.queue( elem, "fx" ).length ) {&#13;
						hooks.empty.fire();&#13;
					}&#13;
				} );&#13;
			} );&#13;
		}&#13;
	&#13;
		// Detect show/hide animations&#13;
		for ( prop in props ) {&#13;
			value = props[ prop ];&#13;
			if ( rfxtypes.test( value ) ) {&#13;
				delete props[ prop ];&#13;
				toggle = toggle || value === "toggle";&#13;
				if ( value === ( hidden ? "hide" : "show" ) ) {&#13;
	&#13;
					// Pretend to be hidden if this is a "show" and&#13;
					// there is still data from a stopped show/hide&#13;
					if ( value === "show" &amp;&amp; dataShow &amp;&amp; dataShow[ prop ] !== undefined ) {&#13;
						hidden = true;&#13;
	&#13;
					// Ignore all other no-op show/hide data&#13;
					} else {&#13;
						continue;&#13;
					}&#13;
				}&#13;
				orig[ prop ] = dataShow &amp;&amp; dataShow[ prop ] || jQuery.style( elem, prop );&#13;
			}&#13;
		}&#13;
	&#13;
		// Bail out if this is a no-op like .hide().hide()&#13;
		propTween = !jQuery.isEmptyObject( props );&#13;
		if ( !propTween &amp;&amp; jQuery.isEmptyObject( orig ) ) {&#13;
			return;&#13;
		}&#13;
	&#13;
		// Restrict "overflow" and "display" styles during box animations&#13;
		if ( isBox &amp;&amp; elem.nodeType === 1 ) {&#13;
	&#13;
			// Support: IE &lt;=9 - 11, Edge 12 - 15&#13;
			// Record all 3 overflow attributes because IE does not infer the shorthand&#13;
			// from identically-valued overflowX and overflowY and Edge just mirrors&#13;
			// the overflowX value there.&#13;
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];&#13;
	&#13;
			// Identify a display type, preferring old show/hide data over the CSS cascade&#13;
			restoreDisplay = dataShow &amp;&amp; dataShow.display;&#13;
			if ( restoreDisplay == null ) {&#13;
				restoreDisplay = dataPriv.get( elem, "display" );&#13;
			}&#13;
			display = jQuery.css( elem, "display" );&#13;
			if ( display === "none" ) {&#13;
				if ( restoreDisplay ) {&#13;
					display = restoreDisplay;&#13;
				} else {&#13;
	&#13;
					// Get nonempty value(s) by temporarily forcing visibility&#13;
					showHide( [ elem ], true );&#13;
					restoreDisplay = elem.style.display || restoreDisplay;&#13;
					display = jQuery.css( elem, "display" );&#13;
					showHide( [ elem ] );&#13;
				}&#13;
			}&#13;
	&#13;
			// Animate inline elements as inline-block&#13;
			if ( display === "inline" || display === "inline-block" &amp;&amp; restoreDisplay != null ) {&#13;
				if ( jQuery.css( elem, "float" ) === "none" ) {&#13;
	&#13;
					// Restore the original display value at the end of pure show/hide animations&#13;
					if ( !propTween ) {&#13;
						anim.done( function() {&#13;
							style.display = restoreDisplay;&#13;
						} );&#13;
						if ( restoreDisplay == null ) {&#13;
							display = style.display;&#13;
							restoreDisplay = display === "none" ? "" : display;&#13;
						}&#13;
					}&#13;
					style.display = "inline-block";&#13;
				}&#13;
			}&#13;
		}&#13;
	&#13;
		if ( opts.overflow ) {&#13;
			style.overflow = "hidden";&#13;
			anim.always( function() {&#13;
				style.overflow = opts.overflow[ 0 ];&#13;
				style.overflowX = opts.overflow[ 1 ];&#13;
				style.overflowY = opts.overflow[ 2 ];&#13;
			} );&#13;
		}&#13;
	&#13;
		// Implement show/hide animations&#13;
		propTween = false;&#13;
		for ( prop in orig ) {&#13;
	&#13;
			// General show/hide setup for this element animation&#13;
			if ( !propTween ) {&#13;
				if ( dataShow ) {&#13;
					if ( "hidden" in dataShow ) {&#13;
						hidden = dataShow.hidden;&#13;
					}&#13;
				} else {&#13;
					dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );&#13;
				}&#13;
	&#13;
				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"&#13;
				if ( toggle ) {&#13;
					dataShow.hidden = !hidden;&#13;
				}&#13;
	&#13;
				// Show elements before animating them&#13;
				if ( hidden ) {&#13;
					showHide( [ elem ], true );&#13;
				}&#13;
	&#13;
				/* eslint-disable no-loop-func */&#13;
	&#13;
				anim.done( function() {&#13;
	&#13;
				/* eslint-enable no-loop-func */&#13;
	&#13;
					// The final step of a "hide" animation is actually hiding the element&#13;
					if ( !hidden ) {&#13;
						showHide( [ elem ] );&#13;
					}&#13;
					dataPriv.remove( elem, "fxshow" );&#13;
					for ( prop in orig ) {&#13;
						jQuery.style( elem, prop, orig[ prop ] );&#13;
					}&#13;
				} );&#13;
			}&#13;
	&#13;
			// Per-property setup&#13;
			propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );&#13;
			if ( !( prop in dataShow ) ) {&#13;
				dataShow[ prop ] = propTween.start;&#13;
				if ( hidden ) {&#13;
					propTween.end = propTween.start;&#13;
					propTween.start = 0;&#13;
				}&#13;
			}&#13;
		}&#13;
	}&#13;
	&#13;
	function propFilter( props, specialEasing ) {&#13;
		var index, name, easing, value, hooks;&#13;
	&#13;
		// camelCase, specialEasing and expand cssHook pass&#13;
		for ( index in props ) {&#13;
			name = camelCase( index );&#13;
			easing = specialEasing[ name ];&#13;
			value = props[ index ];&#13;
			if ( Array.isArray( value ) ) {&#13;
				easing = value[ 1 ];&#13;
				value = props[ index ] = value[ 0 ];&#13;
			}&#13;
	&#13;
			if ( index !== name ) {&#13;
				props[ name ] = value;&#13;
				delete props[ index ];&#13;
			}&#13;
	&#13;
			hooks = jQuery.cssHooks[ name ];&#13;
			if ( hooks &amp;&amp; "expand" in hooks ) {&#13;
				value = hooks.expand( value );&#13;
				delete props[ name ];&#13;
	&#13;
				// Not quite $.extend, this won't overwrite existing keys.&#13;
				// Reusing 'index' because we have the correct "name"&#13;
				for ( index in value ) {&#13;
					if ( !( index in props ) ) {&#13;
						props[ index ] = value[ index ];&#13;
						specialEasing[ index ] = easing;&#13;
					}&#13;
				}&#13;
			} else {&#13;
				specialEasing[ name ] = easing;&#13;
			}&#13;
		}&#13;
	}&#13;
	&#13;
	function Animation( elem, properties, options ) {&#13;
		var result,&#13;
			stopped,&#13;
			index = 0,&#13;
			length = Animation.prefilters.length,&#13;
			deferred = jQuery.Deferred().always( function() {&#13;
	&#13;
				// Don't match elem in the :animated selector&#13;
				delete tick.elem;&#13;
			} ),&#13;
			tick = function() {&#13;
				if ( stopped ) {&#13;
					return false;&#13;
				}&#13;
				var currentTime = fxNow || createFxNow(),&#13;
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),&#13;
	&#13;
					// Support: Android 2.3 only&#13;
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)&#13;
					temp = remaining / animation.duration || 0,&#13;
					percent = 1 - temp,&#13;
					index = 0,&#13;
					length = animation.tweens.length;&#13;
	&#13;
				for ( ; index &lt; length; index++ ) {&#13;
					animation.tweens[ index ].run( percent );&#13;
				}&#13;
	&#13;
				deferred.notifyWith( elem, [ animation, percent, remaining ] );&#13;
	&#13;
				// If there's more to do, yield&#13;
				if ( percent &lt; 1 &amp;&amp; length ) {&#13;
					return remaining;&#13;
				}&#13;
	&#13;
				// If this was an empty animation, synthesize a final progress notification&#13;
				if ( !length ) {&#13;
					deferred.notifyWith( elem, [ animation, 1, 0 ] );&#13;
				}&#13;
	&#13;
				// Resolve the animation and report its conclusion&#13;
				deferred.resolveWith( elem, [ animation ] );&#13;
				return false;&#13;
			},&#13;
			animation = deferred.promise( {&#13;
				elem: elem,&#13;
				props: jQuery.extend( {}, properties ),&#13;
				opts: jQuery.extend( true, {&#13;
					specialEasing: {},&#13;
					easing: jQuery.easing._default&#13;
				}, options ),&#13;
				originalProperties: properties,&#13;
				originalOptions: options,&#13;
				startTime: fxNow || createFxNow(),&#13;
				duration: options.duration,&#13;
				tweens: [],&#13;
				createTween: function( prop, end ) {&#13;
					var tween = jQuery.Tween( elem, animation.opts, prop, end,&#13;
							animation.opts.specialEasing[ prop ] || animation.opts.easing );&#13;
					animation.tweens.push( tween );&#13;
					return tween;&#13;
				},&#13;
				stop: function( gotoEnd ) {&#13;
					var index = 0,&#13;
	&#13;
						// If we are going to the end, we want to run all the tweens&#13;
						// otherwise we skip this part&#13;
						length = gotoEnd ? animation.tweens.length : 0;&#13;
					if ( stopped ) {&#13;
						return this;&#13;
					}&#13;
					stopped = true;&#13;
					for ( ; index &lt; length; index++ ) {&#13;
						animation.tweens[ index ].run( 1 );&#13;
					}&#13;
	&#13;
					// Resolve when we played the last frame; otherwise, reject&#13;
					if ( gotoEnd ) {&#13;
						deferred.notifyWith( elem, [ animation, 1, 0 ] );&#13;
						deferred.resolveWith( elem, [ animation, gotoEnd ] );&#13;
					} else {&#13;
						deferred.rejectWith( elem, [ animation, gotoEnd ] );&#13;
					}&#13;
					return this;&#13;
				}&#13;
			} ),&#13;
			props = animation.props;&#13;
	&#13;
		propFilter( props, animation.opts.specialEasing );&#13;
	&#13;
		for ( ; index &lt; length; index++ ) {&#13;
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );&#13;
			if ( result ) {&#13;
				if ( isFunction( result.stop ) ) {&#13;
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =&#13;
						result.stop.bind( result );&#13;
				}&#13;
				return result;&#13;
			}&#13;
		}&#13;
	&#13;
		jQuery.map( props, createTween, animation );&#13;
	&#13;
		if ( isFunction( animation.opts.start ) ) {&#13;
			animation.opts.start.call( elem, animation );&#13;
		}&#13;
	&#13;
		// Attach callbacks from options&#13;
		animation&#13;
			.progress( animation.opts.progress )&#13;
			.done( animation.opts.done, animation.opts.complete )&#13;
			.fail( animation.opts.fail )&#13;
			.always( animation.opts.always );&#13;
	&#13;
		jQuery.fx.timer(&#13;
			jQuery.extend( tick, {&#13;
				elem: elem,&#13;
				anim: animation,&#13;
				queue: animation.opts.queue&#13;
			} )&#13;
		);&#13;
	&#13;
		return animation;&#13;
	}&#13;
	&#13;
	jQuery.Animation = jQuery.extend( Animation, {&#13;
	&#13;
		tweeners: {&#13;
			"*": [ function( prop, value ) {&#13;
				var tween = this.createTween( prop, value );&#13;
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );&#13;
				return tween;&#13;
			} ]&#13;
		},&#13;
	&#13;
		tweener: function( props, callback ) {&#13;
			if ( isFunction( props ) ) {&#13;
				callback = props;&#13;
				props = [ "*" ];&#13;
			} else {&#13;
				props = props.match( rnothtmlwhite );&#13;
			}&#13;
	&#13;
			var prop,&#13;
				index = 0,&#13;
				length = props.length;&#13;
	&#13;
			for ( ; index &lt; length; index++ ) {&#13;
				prop = props[ index ];&#13;
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];&#13;
				Animation.tweeners[ prop ].unshift( callback );&#13;
			}&#13;
		},&#13;
	&#13;
		prefilters: [ defaultPrefilter ],&#13;
	&#13;
		prefilter: function( callback, prepend ) {&#13;
			if ( prepend ) {&#13;
				Animation.prefilters.unshift( callback );&#13;
			} else {&#13;
				Animation.prefilters.push( callback );&#13;
			}&#13;
		}&#13;
	} );&#13;
	&#13;
	jQuery.speed = function( speed, easing, fn ) {&#13;
		var opt = speed &amp;&amp; typeof speed === "object" ? jQuery.extend( {}, speed ) : {&#13;
			complete: fn || !fn &amp;&amp; easing ||&#13;
				isFunction( speed ) &amp;&amp; speed,&#13;
			duration: speed,&#13;
			easing: fn &amp;&amp; easing || easing &amp;&amp; !isFunction( easing ) &amp;&amp; easing&#13;
		};&#13;
	&#13;
		// Go to the end state if fx are off&#13;
		if ( jQuery.fx.off ) {&#13;
			opt.duration = 0;&#13;
	&#13;
		} else {&#13;
			if ( typeof opt.duration !== "number" ) {&#13;
				if ( opt.duration in jQuery.fx.speeds ) {&#13;
					opt.duration = jQuery.fx.speeds[ opt.duration ];&#13;
	&#13;
				} else {&#13;
					opt.duration = jQuery.fx.speeds._default;&#13;
				}&#13;
			}&#13;
		}&#13;
	&#13;
		// Normalize opt.queue - true/undefined/null -&gt; "fx"&#13;
		if ( opt.queue == null || opt.queue === true ) {&#13;
			opt.queue = "fx";&#13;
		}&#13;
	&#13;
		// Queueing&#13;
		opt.old = opt.complete;&#13;
	&#13;
		opt.complete = function() {&#13;
			if ( isFunction( opt.old ) ) {&#13;
				opt.old.call( this );&#13;
			}&#13;
	&#13;
			if ( opt.queue ) {&#13;
				jQuery.dequeue( this, opt.queue );&#13;
			}&#13;
		};&#13;
	&#13;
		return opt;&#13;
	};&#13;
	&#13;
	jQuery.fn.extend( {&#13;
		fadeTo: function( speed, to, easing, callback ) {&#13;
	&#13;
			// Show any hidden elements after setting opacity to 0&#13;
			return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()&#13;
	&#13;
				// Animate to the value specified&#13;
				.end().animate( { opacity: to }, speed, easing, callback );&#13;
		},&#13;
		animate: function( prop, speed, easing, callback ) {&#13;
			var empty = jQuery.isEmptyObject( prop ),&#13;
				optall = jQuery.speed( speed, easing, callback ),&#13;
				doAnimation = function() {&#13;
	&#13;
					// Operate on a copy of prop so per-property easing won't be lost&#13;
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );&#13;
	&#13;
					// Empty animations, or finishing resolves immediately&#13;
					if ( empty || dataPriv.get( this, "finish" ) ) {&#13;
						anim.stop( true );&#13;
					}&#13;
				};&#13;
				doAnimation.finish = doAnimation;&#13;
	&#13;
			return empty || optall.queue === false ?&#13;
				this.each( doAnimation ) :&#13;
				this.queue( optall.queue, doAnimation );&#13;
		},&#13;
		stop: function( type, clearQueue, gotoEnd ) {&#13;
			var stopQueue = function( hooks ) {&#13;
				var stop = hooks.stop;&#13;
				delete hooks.stop;&#13;
				stop( gotoEnd );&#13;
			};&#13;
	&#13;
			if ( typeof type !== "string" ) {&#13;
				gotoEnd = clearQueue;&#13;
				clearQueue = type;&#13;
				type = undefined;&#13;
			}&#13;
			if ( clearQueue &amp;&amp; type !== false ) {&#13;
				this.queue( type || "fx", [] );&#13;
			}&#13;
	&#13;
			return this.each( function() {&#13;
				var dequeue = true,&#13;
					index = type != null &amp;&amp; type + "queueHooks",&#13;
					timers = jQuery.timers,&#13;
					data = dataPriv.get( this );&#13;
	&#13;
				if ( index ) {&#13;
					if ( data[ index ] &amp;&amp; data[ index ].stop ) {&#13;
						stopQueue( data[ index ] );&#13;
					}&#13;
				} else {&#13;
					for ( index in data ) {&#13;
						if ( data[ index ] &amp;&amp; data[ index ].stop &amp;&amp; rrun.test( index ) ) {&#13;
							stopQueue( data[ index ] );&#13;
						}&#13;
					}&#13;
				}&#13;
	&#13;
				for ( index = timers.length; index--; ) {&#13;
					if ( timers[ index ].elem === this &amp;&amp;&#13;
						( type == null || timers[ index ].queue === type ) ) {&#13;
	&#13;
						timers[ index ].anim.stop( gotoEnd );&#13;
						dequeue = false;&#13;
						timers.splice( index, 1 );&#13;
					}&#13;
				}&#13;
	&#13;
				// Start the next in the queue if the last step wasn't forced.&#13;
				// Timers currently will call their complete callbacks, which&#13;
				// will dequeue but only if they were gotoEnd.&#13;
				if ( dequeue || !gotoEnd ) {&#13;
					jQuery.dequeue( this, type );&#13;
				}&#13;
			} );&#13;
		},&#13;
		finish: function( type ) {&#13;
			if ( type !== false ) {&#13;
				type = type || "fx";&#13;
			}&#13;
			return this.each( function() {&#13;
				var index,&#13;
					data = dataPriv.get( this ),&#13;
					queue = data[ type + "queue" ],&#13;
					hooks = data[ type + "queueHooks" ],&#13;
					timers = jQuery.timers,&#13;
					length = queue ? queue.length : 0;&#13;
	&#13;
				// Enable finishing flag on private data&#13;
				data.finish = true;&#13;
	&#13;
				// Empty the queue first&#13;
				jQuery.queue( this, type, [] );&#13;
	&#13;
				if ( hooks &amp;&amp; hooks.stop ) {&#13;
					hooks.stop.call( this, true );&#13;
				}&#13;
	&#13;
				// Look for any active animations, and finish them&#13;
				for ( index = timers.length; index--; ) {&#13;
					if ( timers[ index ].elem === this &amp;&amp; timers[ index ].queue === type ) {&#13;
						timers[ index ].anim.stop( true );&#13;
						timers.splice( index, 1 );&#13;
					}&#13;
				}&#13;
	&#13;
				// Look for any animations in the old queue and finish them&#13;
				for ( index = 0; index &lt; length; index++ ) {&#13;
					if ( queue[ index ] &amp;&amp; queue[ index ].finish ) {&#13;
						queue[ index ].finish.call( this );&#13;
					}&#13;
				}&#13;
	&#13;
				// Turn off finishing flag&#13;
				delete data.finish;&#13;
			} );&#13;
		}&#13;
	} );&#13;
	&#13;
	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {&#13;
		var cssFn = jQuery.fn[ name ];&#13;
		jQuery.fn[ name ] = function( speed, easing, callback ) {&#13;
			return speed == null || typeof speed === "boolean" ?&#13;
				cssFn.apply( this, arguments ) :&#13;
				this.animate( genFx( name, true ), speed, easing, callback );&#13;
		};&#13;
	} );&#13;
	&#13;
	// Generate shortcuts for custom animations&#13;
	jQuery.each( {&#13;
		slideDown: genFx( "show" ),&#13;
		slideUp: genFx( "hide" ),&#13;
		slideToggle: genFx( "toggle" ),&#13;
		fadeIn: { opacity: "show" },&#13;
		fadeOut: { opacity: "hide" },&#13;
		fadeToggle: { opacity: "toggle" }&#13;
	}, function( name, props ) {&#13;
		jQuery.fn[ name ] = function( speed, easing, callback ) {&#13;
			return this.animate( props, speed, easing, callback );&#13;
		};&#13;
	} );&#13;
	&#13;
	jQuery.timers = [];&#13;
	jQuery.fx.tick = function() {&#13;
		var timer,&#13;
			i = 0,&#13;
			timers = jQuery.timers;&#13;
	&#13;
		fxNow = Date.now();&#13;
	&#13;
		for ( ; i &lt; timers.length; i++ ) {&#13;
			timer = timers[ i ];&#13;
	&#13;
			// Run the timer and safely remove it when done (allowing for external removal)&#13;
			if ( !timer() &amp;&amp; timers[ i ] === timer ) {&#13;
				timers.splice( i--, 1 );&#13;
			}&#13;
		}&#13;
	&#13;
		if ( !timers.length ) {&#13;
			jQuery.fx.stop();&#13;
		}&#13;
		fxNow = undefined;&#13;
	};&#13;
	&#13;
	jQuery.fx.timer = function( timer ) {&#13;
		jQuery.timers.push( timer );&#13;
		jQuery.fx.start();&#13;
	};&#13;
	&#13;
	jQuery.fx.interval = 13;&#13;
	jQuery.fx.start = function() {&#13;
		if ( inProgress ) {&#13;
			return;&#13;
		}&#13;
	&#13;
		inProgress = true;&#13;
		schedule();&#13;
	};&#13;
	&#13;
	jQuery.fx.stop = function() {&#13;
		inProgress = null;&#13;
	};&#13;
	&#13;
	jQuery.fx.speeds = {&#13;
		slow: 600,&#13;
		fast: 200,&#13;
	&#13;
		// Default speed&#13;
		_default: 400&#13;
	};&#13;
	&#13;
	&#13;
	// Based off of the plugin by Clint Helfers, with permission.&#13;
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/&#13;
	jQuery.fn.delay = function( time, type ) {&#13;
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;&#13;
		type = type || "fx";&#13;
	&#13;
		return this.queue( type, function( next, hooks ) {&#13;
			var timeout = window.setTimeout( next, time );&#13;
			hooks.stop = function() {&#13;
				window.clearTimeout( timeout );&#13;
			};&#13;
		} );&#13;
	};&#13;
	&#13;
	&#13;
	( function() {&#13;
		var input = document.createElement( "input" ),&#13;
			select = document.createElement( "select" ),&#13;
			opt = select.appendChild( document.createElement( "option" ) );&#13;
	&#13;
		input.type = "checkbox";&#13;
	&#13;
		// Support: Android &lt;=4.3 only&#13;
		// Default value for a checkbox should be "on"&#13;
		support.checkOn = input.value !== "";&#13;
	&#13;
		// Support: IE &lt;=11 only&#13;
		// Must access selectedIndex to make default options select&#13;
		support.optSelected = opt.selected;&#13;
	&#13;
		// Support: IE &lt;=11 only&#13;
		// An input loses its value after becoming a radio&#13;
		input = document.createElement( "input" );&#13;
		input.value = "t";&#13;
		input.type = "radio";&#13;
		support.radioValue = input.value === "t";&#13;
	} )();&#13;
	&#13;
	&#13;
	var boolHook,&#13;
		attrHandle = jQuery.expr.attrHandle;&#13;
	&#13;
	jQuery.fn.extend( {&#13;
		attr: function( name, value ) {&#13;
			return access( this, jQuery.attr, name, value, arguments.length &gt; 1 );&#13;
		},&#13;
	&#13;
		removeAttr: function( name ) {&#13;
			return this.each( function() {&#13;
				jQuery.removeAttr( this, name );&#13;
			} );&#13;
		}&#13;
	} );&#13;
	&#13;
	jQuery.extend( {&#13;
		attr: function( elem, name, value ) {&#13;
			var ret, hooks,&#13;
				nType = elem.nodeType;&#13;
	&#13;
			// Don't get/set attributes on text, comment and attribute nodes&#13;
			if ( nType === 3 || nType === 8 || nType === 2 ) {&#13;
				return;&#13;
			}&#13;
	&#13;
			// Fallback to prop when attributes are not supported&#13;
			if ( typeof elem.getAttribute === "undefined" ) {&#13;
				return jQuery.prop( elem, name, value );&#13;
			}&#13;
	&#13;
			// Attribute hooks are determined by the lowercase version&#13;
			// Grab necessary hook if one is defined&#13;
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {&#13;
				hooks = jQuery.attrHooks[ name.toLowerCase() ] ||&#13;
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );&#13;
			}&#13;
	&#13;
			if ( value !== undefined ) {&#13;
				if ( value === null ) {&#13;
					jQuery.removeAttr( elem, name );&#13;
					return;&#13;
				}&#13;
	&#13;
				if ( hooks &amp;&amp; "set" in hooks &amp;&amp;&#13;
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {&#13;
					return ret;&#13;
				}&#13;
	&#13;
				elem.setAttribute( name, value + "" );&#13;
				return value;&#13;
			}&#13;
	&#13;
			if ( hooks &amp;&amp; "get" in hooks &amp;&amp; ( ret = hooks.get( elem, name ) ) !== null ) {&#13;
				return ret;&#13;
			}&#13;
	&#13;
			ret = jQuery.find.attr( elem, name );&#13;
	&#13;
			// Non-existent attributes return null, we normalize to undefined&#13;
			return ret == null ? undefined : ret;&#13;
		},&#13;
	&#13;
		attrHooks: {&#13;
			type: {&#13;
				set: function( elem, value ) {&#13;
					if ( !support.radioValue &amp;&amp; value === "radio" &amp;&amp;&#13;
						nodeName( elem, "input" ) ) {&#13;
						var val = elem.value;&#13;
						elem.setAttribute( "type", value );&#13;
						if ( val ) {&#13;
							elem.value = val;&#13;
						}&#13;
						return value;&#13;
					}&#13;
				}&#13;
			}&#13;
		},&#13;
	&#13;
		removeAttr: function( elem, value ) {&#13;
			var name,&#13;
				i = 0,&#13;
	&#13;
				// Attribute names can contain non-HTML whitespace characters&#13;
				// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2&#13;
				attrNames = value &amp;&amp; value.match( rnothtmlwhite );&#13;
	&#13;
			if ( attrNames &amp;&amp; elem.nodeType === 1 ) {&#13;
				while ( ( name = attrNames[ i++ ] ) ) {&#13;
					elem.removeAttribute( name );&#13;
				}&#13;
			}&#13;
		}&#13;
	} );&#13;
	&#13;
	// Hooks for boolean attributes&#13;
	boolHook = {&#13;
		set: function( elem, value, name ) {&#13;
			if ( value === false ) {&#13;
	&#13;
				// Remove boolean attributes when set to false&#13;
				jQuery.removeAttr( elem, name );&#13;
			} else {&#13;
				elem.setAttribute( name, name );&#13;
			}&#13;
			return name;&#13;
		}&#13;
	};&#13;
	&#13;
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {&#13;
		var getter = attrHandle[ name ] || jQuery.find.attr;&#13;
	&#13;
		attrHandle[ name ] = function( elem, name, isXML ) {&#13;
			var ret, handle,&#13;
				lowercaseName = name.toLowerCase();&#13;
	&#13;
			if ( !isXML ) {&#13;
	&#13;
				// Avoid an infinite loop by temporarily removing this function from the getter&#13;
				handle = attrHandle[ lowercaseName ];&#13;
				attrHandle[ lowercaseName ] = ret;&#13;
				ret = getter( elem, name, isXML ) != null ?&#13;
					lowercaseName :&#13;
					null;&#13;
				attrHandle[ lowercaseName ] = handle;&#13;
			}&#13;
			return ret;&#13;
		};&#13;
	} );&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	var rfocusable = /^(?:input|select|textarea|button)$/i,&#13;
		rclickable = /^(?:a|area)$/i;&#13;
	&#13;
	jQuery.fn.extend( {&#13;
		prop: function( name, value ) {&#13;
			return access( this, jQuery.prop, name, value, arguments.length &gt; 1 );&#13;
		},&#13;
	&#13;
		removeProp: function( name ) {&#13;
			return this.each( function() {&#13;
				delete this[ jQuery.propFix[ name ] || name ];&#13;
			} );&#13;
		}&#13;
	} );&#13;
	&#13;
	jQuery.extend( {&#13;
		prop: function( elem, name, value ) {&#13;
			var ret, hooks,&#13;
				nType = elem.nodeType;&#13;
	&#13;
			// Don't get/set properties on text, comment and attribute nodes&#13;
			if ( nType === 3 || nType === 8 || nType === 2 ) {&#13;
				return;&#13;
			}&#13;
	&#13;
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {&#13;
	&#13;
				// Fix name and attach hooks&#13;
				name = jQuery.propFix[ name ] || name;&#13;
				hooks = jQuery.propHooks[ name ];&#13;
			}&#13;
	&#13;
			if ( value !== undefined ) {&#13;
				if ( hooks &amp;&amp; "set" in hooks &amp;&amp;&#13;
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {&#13;
					return ret;&#13;
				}&#13;
	&#13;
				return ( elem[ name ] = value );&#13;
			}&#13;
	&#13;
			if ( hooks &amp;&amp; "get" in hooks &amp;&amp; ( ret = hooks.get( elem, name ) ) !== null ) {&#13;
				return ret;&#13;
			}&#13;
	&#13;
			return elem[ name ];&#13;
		},&#13;
	&#13;
		propHooks: {&#13;
			tabIndex: {&#13;
				get: function( elem ) {&#13;
	&#13;
					// Support: IE &lt;=9 - 11 only&#13;
					// elem.tabIndex doesn't always return the&#13;
					// correct value when it hasn't been explicitly set&#13;
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/&#13;
					// Use proper attribute retrieval(#12072)&#13;
					var tabindex = jQuery.find.attr( elem, "tabindex" );&#13;
	&#13;
					if ( tabindex ) {&#13;
						return parseInt( tabindex, 10 );&#13;
					}&#13;
	&#13;
					if (&#13;
						rfocusable.test( elem.nodeName ) ||&#13;
						rclickable.test( elem.nodeName ) &amp;&amp;&#13;
						elem.href&#13;
					) {&#13;
						return 0;&#13;
					}&#13;
	&#13;
					return -1;&#13;
				}&#13;
			}&#13;
		},&#13;
	&#13;
		propFix: {&#13;
			"for": "htmlFor",&#13;
			"class": "className"&#13;
		}&#13;
	} );&#13;
	&#13;
	// Support: IE &lt;=11 only&#13;
	// Accessing the selectedIndex property&#13;
	// forces the browser to respect setting selected&#13;
	// on the option&#13;
	// The getter ensures a default option is selected&#13;
	// when in an optgroup&#13;
	// eslint rule "no-unused-expressions" is disabled for this code&#13;
	// since it considers such accessions noop&#13;
	if ( !support.optSelected ) {&#13;
		jQuery.propHooks.selected = {&#13;
			get: function( elem ) {&#13;
	&#13;
				/* eslint no-unused-expressions: "off" */&#13;
	&#13;
				var parent = elem.parentNode;&#13;
				if ( parent &amp;&amp; parent.parentNode ) {&#13;
					parent.parentNode.selectedIndex;&#13;
				}&#13;
				return null;&#13;
			},&#13;
			set: function( elem ) {&#13;
	&#13;
				/* eslint no-unused-expressions: "off" */&#13;
	&#13;
				var parent = elem.parentNode;&#13;
				if ( parent ) {&#13;
					parent.selectedIndex;&#13;
	&#13;
					if ( parent.parentNode ) {&#13;
						parent.parentNode.selectedIndex;&#13;
					}&#13;
				}&#13;
			}&#13;
		};&#13;
	}&#13;
	&#13;
	jQuery.each( [&#13;
		"tabIndex",&#13;
		"readOnly",&#13;
		"maxLength",&#13;
		"cellSpacing",&#13;
		"cellPadding",&#13;
		"rowSpan",&#13;
		"colSpan",&#13;
		"useMap",&#13;
		"frameBorder",&#13;
		"contentEditable"&#13;
	], function() {&#13;
		jQuery.propFix[ this.toLowerCase() ] = this;&#13;
	} );&#13;
	&#13;
	&#13;
	&#13;
	&#13;
		// Strip and collapse whitespace according to HTML spec&#13;
		// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace&#13;
		function stripAndCollapse( value ) {&#13;
			var tokens = value.match( rnothtmlwhite ) || [];&#13;
			return tokens.join( " " );&#13;
		}&#13;
	&#13;
	&#13;
	function getClass( elem ) {&#13;
		return elem.getAttribute &amp;&amp; elem.getAttribute( "class" ) || "";&#13;
	}&#13;
	&#13;
	function classesToArray( value ) {&#13;
		if ( Array.isArray( value ) ) {&#13;
			return value;&#13;
		}&#13;
		if ( typeof value === "string" ) {&#13;
			return value.match( rnothtmlwhite ) || [];&#13;
		}&#13;
		return [];&#13;
	}&#13;
	&#13;
	jQuery.fn.extend( {&#13;
		addClass: function( value ) {&#13;
			var classes, elem, cur, curValue, clazz, j, finalValue,&#13;
				i = 0;&#13;
	&#13;
			if ( isFunction( value ) ) {&#13;
				return this.each( function( j ) {&#13;
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );&#13;
				} );&#13;
			}&#13;
	&#13;
			classes = classesToArray( value );&#13;
	&#13;
			if ( classes.length ) {&#13;
				while ( ( elem = this[ i++ ] ) ) {&#13;
					curValue = getClass( elem );&#13;
					cur = elem.nodeType === 1 &amp;&amp; ( " " + stripAndCollapse( curValue ) + " " );&#13;
	&#13;
					if ( cur ) {&#13;
						j = 0;&#13;
						while ( ( clazz = classes[ j++ ] ) ) {&#13;
							if ( cur.indexOf( " " + clazz + " " ) &lt; 0 ) {&#13;
								cur += clazz + " ";&#13;
							}&#13;
						}&#13;
	&#13;
						// Only assign if different to avoid unneeded rendering.&#13;
						finalValue = stripAndCollapse( cur );&#13;
						if ( curValue !== finalValue ) {&#13;
							elem.setAttribute( "class", finalValue );&#13;
						}&#13;
					}&#13;
				}&#13;
			}&#13;
	&#13;
			return this;&#13;
		},&#13;
	&#13;
		removeClass: function( value ) {&#13;
			var classes, elem, cur, curValue, clazz, j, finalValue,&#13;
				i = 0;&#13;
	&#13;
			if ( isFunction( value ) ) {&#13;
				return this.each( function( j ) {&#13;
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );&#13;
				} );&#13;
			}&#13;
	&#13;
			if ( !arguments.length ) {&#13;
				return this.attr( "class", "" );&#13;
			}&#13;
	&#13;
			classes = classesToArray( value );&#13;
	&#13;
			if ( classes.length ) {&#13;
				while ( ( elem = this[ i++ ] ) ) {&#13;
					curValue = getClass( elem );&#13;
	&#13;
					// This expression is here for better compressibility (see addClass)&#13;
					cur = elem.nodeType === 1 &amp;&amp; ( " " + stripAndCollapse( curValue ) + " " );&#13;
	&#13;
					if ( cur ) {&#13;
						j = 0;&#13;
						while ( ( clazz = classes[ j++ ] ) ) {&#13;
	&#13;
							// Remove *all* instances&#13;
							while ( cur.indexOf( " " + clazz + " " ) &gt; -1 ) {&#13;
								cur = cur.replace( " " + clazz + " ", " " );&#13;
							}&#13;
						}&#13;
	&#13;
						// Only assign if different to avoid unneeded rendering.&#13;
						finalValue = stripAndCollapse( cur );&#13;
						if ( curValue !== finalValue ) {&#13;
							elem.setAttribute( "class", finalValue );&#13;
						}&#13;
					}&#13;
				}&#13;
			}&#13;
	&#13;
			return this;&#13;
		},&#13;
	&#13;
		toggleClass: function( value, stateVal ) {&#13;
			var type = typeof value,&#13;
				isValidValue = type === "string" || Array.isArray( value );&#13;
	&#13;
			if ( typeof stateVal === "boolean" &amp;&amp; isValidValue ) {&#13;
				return stateVal ? this.addClass( value ) : this.removeClass( value );&#13;
			}&#13;
	&#13;
			if ( isFunction( value ) ) {&#13;
				return this.each( function( i ) {&#13;
					jQuery( this ).toggleClass(&#13;
						value.call( this, i, getClass( this ), stateVal ),&#13;
						stateVal&#13;
					);&#13;
				} );&#13;
			}&#13;
	&#13;
			return this.each( function() {&#13;
				var className, i, self, classNames;&#13;
	&#13;
				if ( isValidValue ) {&#13;
	&#13;
					// Toggle individual class names&#13;
					i = 0;&#13;
					self = jQuery( this );&#13;
					classNames = classesToArray( value );&#13;
	&#13;
					while ( ( className = classNames[ i++ ] ) ) {&#13;
	&#13;
						// Check each className given, space separated list&#13;
						if ( self.hasClass( className ) ) {&#13;
							self.removeClass( className );&#13;
						} else {&#13;
							self.addClass( className );&#13;
						}&#13;
					}&#13;
	&#13;
				// Toggle whole class name&#13;
				} else if ( value === undefined || type === "boolean" ) {&#13;
					className = getClass( this );&#13;
					if ( className ) {&#13;
	&#13;
						// Store className if set&#13;
						dataPriv.set( this, "__className__", className );&#13;
					}&#13;
	&#13;
					// If the element has a class name or if we're passed `false`,&#13;
					// then remove the whole classname (if there was one, the above saved it).&#13;
					// Otherwise bring back whatever was previously saved (if anything),&#13;
					// falling back to the empty string if nothing was stored.&#13;
					if ( this.setAttribute ) {&#13;
						this.setAttribute( "class",&#13;
							className || value === false ?&#13;
							"" :&#13;
							dataPriv.get( this, "__className__" ) || ""&#13;
						);&#13;
					}&#13;
				}&#13;
			} );&#13;
		},&#13;
	&#13;
		hasClass: function( selector ) {&#13;
			var className, elem,&#13;
				i = 0;&#13;
	&#13;
			className = " " + selector + " ";&#13;
			while ( ( elem = this[ i++ ] ) ) {&#13;
				if ( elem.nodeType === 1 &amp;&amp;&#13;
					( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) &gt; -1 ) {&#13;
						return true;&#13;
				}&#13;
			}&#13;
	&#13;
			return false;&#13;
		}&#13;
	} );&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	var rreturn = /\r/g;&#13;
	&#13;
	jQuery.fn.extend( {&#13;
		val: function( value ) {&#13;
			var hooks, ret, valueIsFunction,&#13;
				elem = this[ 0 ];&#13;
	&#13;
			if ( !arguments.length ) {&#13;
				if ( elem ) {&#13;
					hooks = jQuery.valHooks[ elem.type ] ||&#13;
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];&#13;
	&#13;
					if ( hooks &amp;&amp;&#13;
						"get" in hooks &amp;&amp;&#13;
						( ret = hooks.get( elem, "value" ) ) !== undefined&#13;
					) {&#13;
						return ret;&#13;
					}&#13;
	&#13;
					ret = elem.value;&#13;
	&#13;
					// Handle most common string cases&#13;
					if ( typeof ret === "string" ) {&#13;
						return ret.replace( rreturn, "" );&#13;
					}&#13;
	&#13;
					// Handle cases where value is null/undef or number&#13;
					return ret == null ? "" : ret;&#13;
				}&#13;
	&#13;
				return;&#13;
			}&#13;
	&#13;
			valueIsFunction = isFunction( value );&#13;
	&#13;
			return this.each( function( i ) {&#13;
				var val;&#13;
	&#13;
				if ( this.nodeType !== 1 ) {&#13;
					return;&#13;
				}&#13;
	&#13;
				if ( valueIsFunction ) {&#13;
					val = value.call( this, i, jQuery( this ).val() );&#13;
				} else {&#13;
					val = value;&#13;
				}&#13;
	&#13;
				// Treat null/undefined as ""; convert numbers to string&#13;
				if ( val == null ) {&#13;
					val = "";&#13;
	&#13;
				} else if ( typeof val === "number" ) {&#13;
					val += "";&#13;
	&#13;
				} else if ( Array.isArray( val ) ) {&#13;
					val = jQuery.map( val, function( value ) {&#13;
						return value == null ? "" : value + "";&#13;
					} );&#13;
				}&#13;
	&#13;
				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];&#13;
	&#13;
				// If set returns undefined, fall back to normal setting&#13;
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {&#13;
					this.value = val;&#13;
				}&#13;
			} );&#13;
		}&#13;
	} );&#13;
	&#13;
	jQuery.extend( {&#13;
		valHooks: {&#13;
			option: {&#13;
				get: function( elem ) {&#13;
	&#13;
					var val = jQuery.find.attr( elem, "value" );&#13;
					return val != null ?&#13;
						val :&#13;
	&#13;
						// Support: IE &lt;=10 - 11 only&#13;
						// option.text throws exceptions (#14686, #14858)&#13;
						// Strip and collapse whitespace&#13;
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace&#13;
						stripAndCollapse( jQuery.text( elem ) );&#13;
				}&#13;
			},&#13;
			select: {&#13;
				get: function( elem ) {&#13;
					var value, option, i,&#13;
						options = elem.options,&#13;
						index = elem.selectedIndex,&#13;
						one = elem.type === "select-one",&#13;
						values = one ? null : [],&#13;
						max = one ? index + 1 : options.length;&#13;
	&#13;
					if ( index &lt; 0 ) {&#13;
						i = max;&#13;
	&#13;
					} else {&#13;
						i = one ? index : 0;&#13;
					}&#13;
	&#13;
					// Loop through all the selected options&#13;
					for ( ; i &lt; max; i++ ) {&#13;
						option = options[ i ];&#13;
	&#13;
						// Support: IE &lt;=9 only&#13;
						// IE8-9 doesn't update selected after form reset (#2551)&#13;
						if ( ( option.selected || i === index ) &amp;&amp;&#13;
	&#13;
								// Don't return options that are disabled or in a disabled optgroup&#13;
								!option.disabled &amp;&amp;&#13;
								( !option.parentNode.disabled ||&#13;
									!nodeName( option.parentNode, "optgroup" ) ) ) {&#13;
	&#13;
							// Get the specific value for the option&#13;
							value = jQuery( option ).val();&#13;
	&#13;
							// We don't need an array for one selects&#13;
							if ( one ) {&#13;
								return value;&#13;
							}&#13;
	&#13;
							// Multi-Selects return an array&#13;
							values.push( value );&#13;
						}&#13;
					}&#13;
	&#13;
					return values;&#13;
				},&#13;
	&#13;
				set: function( elem, value ) {&#13;
					var optionSet, option,&#13;
						options = elem.options,&#13;
						values = jQuery.makeArray( value ),&#13;
						i = options.length;&#13;
	&#13;
					while ( i-- ) {&#13;
						option = options[ i ];&#13;
	&#13;
						/* eslint-disable no-cond-assign */&#13;
	&#13;
						if ( option.selected =&#13;
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) &gt; -1&#13;
						) {&#13;
							optionSet = true;&#13;
						}&#13;
	&#13;
						/* eslint-enable no-cond-assign */&#13;
					}&#13;
	&#13;
					// Force browsers to behave consistently when non-matching value is set&#13;
					if ( !optionSet ) {&#13;
						elem.selectedIndex = -1;&#13;
					}&#13;
					return values;&#13;
				}&#13;
			}&#13;
		}&#13;
	} );&#13;
	&#13;
	// Radios and checkboxes getter/setter&#13;
	jQuery.each( [ "radio", "checkbox" ], function() {&#13;
		jQuery.valHooks[ this ] = {&#13;
			set: function( elem, value ) {&#13;
				if ( Array.isArray( value ) ) {&#13;
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) &gt; -1 );&#13;
				}&#13;
			}&#13;
		};&#13;
		if ( !support.checkOn ) {&#13;
			jQuery.valHooks[ this ].get = function( elem ) {&#13;
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;&#13;
			};&#13;
		}&#13;
	} );&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	// Return jQuery for attributes-only inclusion&#13;
	&#13;
	&#13;
	support.focusin = "onfocusin" in window;&#13;
	&#13;
	&#13;
	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,&#13;
		stopPropagationCallback = function( e ) {&#13;
			e.stopPropagation();&#13;
		};&#13;
	&#13;
	jQuery.extend( jQuery.event, {&#13;
	&#13;
		trigger: function( event, data, elem, onlyHandlers ) {&#13;
	&#13;
			var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,&#13;
				eventPath = [ elem || document ],&#13;
				type = hasOwn.call( event, "type" ) ? event.type : event,&#13;
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];&#13;
	&#13;
			cur = lastElement = tmp = elem = elem || document;&#13;
	&#13;
			// Don't do events on text and comment nodes&#13;
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {&#13;
				return;&#13;
			}&#13;
	&#13;
			// focus/blur morphs to focusin/out; ensure we're not firing them right now&#13;
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {&#13;
				return;&#13;
			}&#13;
	&#13;
			if ( type.indexOf( "." ) &gt; -1 ) {&#13;
	&#13;
				// Namespaced trigger; create a regexp to match event type in handle()&#13;
				namespaces = type.split( "." );&#13;
				type = namespaces.shift();&#13;
				namespaces.sort();&#13;
			}&#13;
			ontype = type.indexOf( ":" ) &lt; 0 &amp;&amp; "on" + type;&#13;
	&#13;
			// Caller can pass in a jQuery.Event object, Object, or just an event type string&#13;
			event = event[ jQuery.expando ] ?&#13;
				event :&#13;
				new jQuery.Event( type, typeof event === "object" &amp;&amp; event );&#13;
	&#13;
			// Trigger bitmask: &amp; 1 for native handlers; &amp; 2 for jQuery (always true)&#13;
			event.isTrigger = onlyHandlers ? 2 : 3;&#13;
			event.namespace = namespaces.join( "." );&#13;
			event.rnamespace = event.namespace ?&#13;
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :&#13;
				null;&#13;
	&#13;
			// Clean up the event in case it is being reused&#13;
			event.result = undefined;&#13;
			if ( !event.target ) {&#13;
				event.target = elem;&#13;
			}&#13;
	&#13;
			// Clone any incoming data and prepend the event, creating the handler arg list&#13;
			data = data == null ?&#13;
				[ event ] :&#13;
				jQuery.makeArray( data, [ event ] );&#13;
	&#13;
			// Allow special events to draw outside the lines&#13;
			special = jQuery.event.special[ type ] || {};&#13;
			if ( !onlyHandlers &amp;&amp; special.trigger &amp;&amp; special.trigger.apply( elem, data ) === false ) {&#13;
				return;&#13;
			}&#13;
	&#13;
			// Determine event propagation path in advance, per W3C events spec (#9951)&#13;
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)&#13;
			if ( !onlyHandlers &amp;&amp; !special.noBubble &amp;&amp; !isWindow( elem ) ) {&#13;
	&#13;
				bubbleType = special.delegateType || type;&#13;
				if ( !rfocusMorph.test( bubbleType + type ) ) {&#13;
					cur = cur.parentNode;&#13;
				}&#13;
				for ( ; cur; cur = cur.parentNode ) {&#13;
					eventPath.push( cur );&#13;
					tmp = cur;&#13;
				}&#13;
	&#13;
				// Only add window if we got to document (e.g., not plain obj or detached DOM)&#13;
				if ( tmp === ( elem.ownerDocument || document ) ) {&#13;
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );&#13;
				}&#13;
			}&#13;
	&#13;
			// Fire handlers on the event path&#13;
			i = 0;&#13;
			while ( ( cur = eventPath[ i++ ] ) &amp;&amp; !event.isPropagationStopped() ) {&#13;
				lastElement = cur;&#13;
				event.type = i &gt; 1 ?&#13;
					bubbleType :&#13;
					special.bindType || type;&#13;
	&#13;
				// jQuery handler&#13;
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &amp;&amp;&#13;
					dataPriv.get( cur, "handle" );&#13;
				if ( handle ) {&#13;
					handle.apply( cur, data );&#13;
				}&#13;
	&#13;
				// Native handler&#13;
				handle = ontype &amp;&amp; cur[ ontype ];&#13;
				if ( handle &amp;&amp; handle.apply &amp;&amp; acceptData( cur ) ) {&#13;
					event.result = handle.apply( cur, data );&#13;
					if ( event.result === false ) {&#13;
						event.preventDefault();&#13;
					}&#13;
				}&#13;
			}&#13;
			event.type = type;&#13;
	&#13;
			// If nobody prevented the default action, do it now&#13;
			if ( !onlyHandlers &amp;&amp; !event.isDefaultPrevented() ) {&#13;
	&#13;
				if ( ( !special._default ||&#13;
					special._default.apply( eventPath.pop(), data ) === false ) &amp;&amp;&#13;
					acceptData( elem ) ) {&#13;
	&#13;
					// Call a native DOM method on the target with the same name as the event.&#13;
					// Don't do default actions on window, that's where global variables be (#6170)&#13;
					if ( ontype &amp;&amp; isFunction( elem[ type ] ) &amp;&amp; !isWindow( elem ) ) {&#13;
	&#13;
						// Don't re-trigger an onFOO event when we call its FOO() method&#13;
						tmp = elem[ ontype ];&#13;
	&#13;
						if ( tmp ) {&#13;
							elem[ ontype ] = null;&#13;
						}&#13;
	&#13;
						// Prevent re-triggering of the same event, since we already bubbled it above&#13;
						jQuery.event.triggered = type;&#13;
	&#13;
						if ( event.isPropagationStopped() ) {&#13;
							lastElement.addEventListener( type, stopPropagationCallback );&#13;
						}&#13;
	&#13;
						elem[ type ]();&#13;
	&#13;
						if ( event.isPropagationStopped() ) {&#13;
							lastElement.removeEventListener( type, stopPropagationCallback );&#13;
						}&#13;
	&#13;
						jQuery.event.triggered = undefined;&#13;
	&#13;
						if ( tmp ) {&#13;
							elem[ ontype ] = tmp;&#13;
						}&#13;
					}&#13;
				}&#13;
			}&#13;
	&#13;
			return event.result;&#13;
		},&#13;
	&#13;
		// Piggyback on a donor event to simulate a different one&#13;
		// Used only for `focus(in | out)` events&#13;
		simulate: function( type, elem, event ) {&#13;
			var e = jQuery.extend(&#13;
				new jQuery.Event(),&#13;
				event,&#13;
				{&#13;
					type: type,&#13;
					isSimulated: true&#13;
				}&#13;
			);&#13;
	&#13;
			jQuery.event.trigger( e, null, elem );&#13;
		}&#13;
	&#13;
	} );&#13;
	&#13;
	jQuery.fn.extend( {&#13;
	&#13;
		trigger: function( type, data ) {&#13;
			return this.each( function() {&#13;
				jQuery.event.trigger( type, data, this );&#13;
			} );&#13;
		},&#13;
		triggerHandler: function( type, data ) {&#13;
			var elem = this[ 0 ];&#13;
			if ( elem ) {&#13;
				return jQuery.event.trigger( type, data, elem, true );&#13;
			}&#13;
		}&#13;
	} );&#13;
	&#13;
	&#13;
	// Support: Firefox &lt;=44&#13;
	// Firefox doesn't have focus(in | out) events&#13;
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787&#13;
	//&#13;
	// Support: Chrome &lt;=48 - 49, Safari &lt;=9.0 - 9.1&#13;
	// focus(in | out) events fire after focus &amp; blur events,&#13;
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order&#13;
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857&#13;
	if ( !support.focusin ) {&#13;
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {&#13;
	&#13;
			// Attach a single capturing handler on the document while someone wants focusin/focusout&#13;
			var handler = function( event ) {&#13;
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );&#13;
			};&#13;
	&#13;
			jQuery.event.special[ fix ] = {&#13;
				setup: function() {&#13;
					var doc = this.ownerDocument || this,&#13;
						attaches = dataPriv.access( doc, fix );&#13;
	&#13;
					if ( !attaches ) {&#13;
						doc.addEventListener( orig, handler, true );&#13;
					}&#13;
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );&#13;
				},&#13;
				teardown: function() {&#13;
					var doc = this.ownerDocument || this,&#13;
						attaches = dataPriv.access( doc, fix ) - 1;&#13;
	&#13;
					if ( !attaches ) {&#13;
						doc.removeEventListener( orig, handler, true );&#13;
						dataPriv.remove( doc, fix );&#13;
	&#13;
					} else {&#13;
						dataPriv.access( doc, fix, attaches );&#13;
					}&#13;
				}&#13;
			};&#13;
		} );&#13;
	}&#13;
	var location = window.location;&#13;
	&#13;
	var nonce = Date.now();&#13;
	&#13;
	var rquery = ( /\?/ );&#13;
	&#13;
	&#13;
	&#13;
	// Cross-browser xml parsing&#13;
	jQuery.parseXML = function( data ) {&#13;
		var xml;&#13;
		if ( !data || typeof data !== "string" ) {&#13;
			return null;&#13;
		}&#13;
	&#13;
		// Support: IE 9 - 11 only&#13;
		// IE throws on parseFromString with invalid input.&#13;
		try {&#13;
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );&#13;
		} catch ( e ) {&#13;
			xml = undefined;&#13;
		}&#13;
	&#13;
		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {&#13;
			jQuery.error( "Invalid XML: " + data );&#13;
		}&#13;
		return xml;&#13;
	};&#13;
	&#13;
	&#13;
	var&#13;
		rbracket = /\[\]$/,&#13;
		rCRLF = /\r?\n/g,&#13;
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,&#13;
		rsubmittable = /^(?:input|select|textarea|keygen)/i;&#13;
	&#13;
	function buildParams( prefix, obj, traditional, add ) {&#13;
		var name;&#13;
	&#13;
		if ( Array.isArray( obj ) ) {&#13;
	&#13;
			// Serialize array item.&#13;
			jQuery.each( obj, function( i, v ) {&#13;
				if ( traditional || rbracket.test( prefix ) ) {&#13;
	&#13;
					// Treat each array item as a scalar.&#13;
					add( prefix, v );&#13;
	&#13;
				} else {&#13;
	&#13;
					// Item is non-scalar (array or object), encode its numeric index.&#13;
					buildParams(&#13;
						prefix + "[" + ( typeof v === "object" &amp;&amp; v != null ? i : "" ) + "]",&#13;
						v,&#13;
						traditional,&#13;
						add&#13;
					);&#13;
				}&#13;
			} );&#13;
	&#13;
		} else if ( !traditional &amp;&amp; toType( obj ) === "object" ) {&#13;
	&#13;
			// Serialize object item.&#13;
			for ( name in obj ) {&#13;
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );&#13;
			}&#13;
	&#13;
		} else {&#13;
	&#13;
			// Serialize scalar item.&#13;
			add( prefix, obj );&#13;
		}&#13;
	}&#13;
	&#13;
	// Serialize an array of form elements or a set of&#13;
	// key/values into a query string&#13;
	jQuery.param = function( a, traditional ) {&#13;
		var prefix,&#13;
			s = [],&#13;
			add = function( key, valueOrFunction ) {&#13;
	&#13;
				// If value is a function, invoke it and use its return value&#13;
				var value = isFunction( valueOrFunction ) ?&#13;
					valueOrFunction() :&#13;
					valueOrFunction;&#13;
	&#13;
				s[ s.length ] = encodeURIComponent( key ) + "=" +&#13;
					encodeURIComponent( value == null ? "" : value );&#13;
			};&#13;
	&#13;
		// If an array was passed in, assume that it is an array of form elements.&#13;
		if ( Array.isArray( a ) || ( a.jquery &amp;&amp; !jQuery.isPlainObject( a ) ) ) {&#13;
	&#13;
			// Serialize the form elements&#13;
			jQuery.each( a, function() {&#13;
				add( this.name, this.value );&#13;
			} );&#13;
	&#13;
		} else {&#13;
	&#13;
			// If traditional, encode the "old" way (the way 1.3.2 or older&#13;
			// did it), otherwise encode params recursively.&#13;
			for ( prefix in a ) {&#13;
				buildParams( prefix, a[ prefix ], traditional, add );&#13;
			}&#13;
		}&#13;
	&#13;
		// Return the resulting serialization&#13;
		return s.join( "&amp;" );&#13;
	};&#13;
	&#13;
	jQuery.fn.extend( {&#13;
		serialize: function() {&#13;
			return jQuery.param( this.serializeArray() );&#13;
		},&#13;
		serializeArray: function() {&#13;
			return this.map( function() {&#13;
	&#13;
				// Can add propHook for "elements" to filter or add form elements&#13;
				var elements = jQuery.prop( this, "elements" );&#13;
				return elements ? jQuery.makeArray( elements ) : this;&#13;
			} )&#13;
			.filter( function() {&#13;
				var type = this.type;&#13;
	&#13;
				// Use .is( ":disabled" ) so that fieldset[disabled] works&#13;
				return this.name &amp;&amp; !jQuery( this ).is( ":disabled" ) &amp;&amp;&#13;
					rsubmittable.test( this.nodeName ) &amp;&amp; !rsubmitterTypes.test( type ) &amp;&amp;&#13;
					( this.checked || !rcheckableType.test( type ) );&#13;
			} )&#13;
			.map( function( i, elem ) {&#13;
				var val = jQuery( this ).val();&#13;
	&#13;
				if ( val == null ) {&#13;
					return null;&#13;
				}&#13;
	&#13;
				if ( Array.isArray( val ) ) {&#13;
					return jQuery.map( val, function( val ) {&#13;
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };&#13;
					} );&#13;
				}&#13;
	&#13;
				return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };&#13;
			} ).get();&#13;
		}&#13;
	} );&#13;
	&#13;
	&#13;
	var&#13;
		r20 = /%20/g,&#13;
		rhash = /#.*$/,&#13;
		rantiCache = /([?&amp;])_=[^&amp;]*/,&#13;
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,&#13;
	&#13;
		// #7653, #8125, #8152: local protocol detection&#13;
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,&#13;
		rnoContent = /^(?:GET|HEAD)$/,&#13;
		rprotocol = /^\/\//,&#13;
	&#13;
		/* Prefilters&#13;
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)&#13;
		 * 2) These are called:&#13;
		 *    - BEFORE asking for a transport&#13;
		 *    - AFTER param serialization (s.data is a string if s.processData is true)&#13;
		 * 3) key is the dataType&#13;
		 * 4) the catchall symbol "*" can be used&#13;
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed&#13;
		 */&#13;
		prefilters = {},&#13;
	&#13;
		/* Transports bindings&#13;
		 * 1) key is the dataType&#13;
		 * 2) the catchall symbol "*" can be used&#13;
		 * 3) selection will start with transport dataType and THEN go to "*" if needed&#13;
		 */&#13;
		transports = {},&#13;
	&#13;
		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression&#13;
		allTypes = "*/".concat( "*" ),&#13;
	&#13;
		// Anchor tag for parsing the document origin&#13;
		originAnchor = document.createElement( "a" );&#13;
		originAnchor.href = location.href;&#13;
	&#13;
	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport&#13;
	function addToPrefiltersOrTransports( structure ) {&#13;
	&#13;
		// dataTypeExpression is optional and defaults to "*"&#13;
		return function( dataTypeExpression, func ) {&#13;
	&#13;
			if ( typeof dataTypeExpression !== "string" ) {&#13;
				func = dataTypeExpression;&#13;
				dataTypeExpression = "*";&#13;
			}&#13;
	&#13;
			var dataType,&#13;
				i = 0,&#13;
				dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];&#13;
	&#13;
			if ( isFunction( func ) ) {&#13;
	&#13;
				// For each dataType in the dataTypeExpression&#13;
				while ( ( dataType = dataTypes[ i++ ] ) ) {&#13;
	&#13;
					// Prepend if requested&#13;
					if ( dataType[ 0 ] === "+" ) {&#13;
						dataType = dataType.slice( 1 ) || "*";&#13;
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );&#13;
	&#13;
					// Otherwise append&#13;
					} else {&#13;
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );&#13;
					}&#13;
				}&#13;
			}&#13;
		};&#13;
	}&#13;
	&#13;
	// Base inspection function for prefilters and transports&#13;
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {&#13;
	&#13;
		var inspected = {},&#13;
			seekingTransport = ( structure === transports );&#13;
	&#13;
		function inspect( dataType ) {&#13;
			var selected;&#13;
			inspected[ dataType ] = true;&#13;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {&#13;
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );&#13;
				if ( typeof dataTypeOrTransport === "string" &amp;&amp;&#13;
					!seekingTransport &amp;&amp; !inspected[ dataTypeOrTransport ] ) {&#13;
	&#13;
					options.dataTypes.unshift( dataTypeOrTransport );&#13;
					inspect( dataTypeOrTransport );&#13;
					return false;&#13;
				} else if ( seekingTransport ) {&#13;
					return !( selected = dataTypeOrTransport );&#13;
				}&#13;
			} );&#13;
			return selected;&#13;
		}&#13;
	&#13;
		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] &amp;&amp; inspect( "*" );&#13;
	}&#13;
	&#13;
	// A special extend for ajax options&#13;
	// that takes "flat" options (not to be deep extended)&#13;
	// Fixes #9887&#13;
	function ajaxExtend( target, src ) {&#13;
		var key, deep,&#13;
			flatOptions = jQuery.ajaxSettings.flatOptions || {};&#13;
	&#13;
		for ( key in src ) {&#13;
			if ( src[ key ] !== undefined ) {&#13;
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];&#13;
			}&#13;
		}&#13;
		if ( deep ) {&#13;
			jQuery.extend( true, target, deep );&#13;
		}&#13;
	&#13;
		return target;&#13;
	}&#13;
	&#13;
	/* Handles responses to an ajax request:&#13;
	 * - finds the right dataType (mediates between content-type and expected dataType)&#13;
	 * - returns the corresponding response&#13;
	 */&#13;
	function ajaxHandleResponses( s, jqXHR, responses ) {&#13;
	&#13;
		var ct, type, finalDataType, firstDataType,&#13;
			contents = s.contents,&#13;
			dataTypes = s.dataTypes;&#13;
	&#13;
		// Remove auto dataType and get content-type in the process&#13;
		while ( dataTypes[ 0 ] === "*" ) {&#13;
			dataTypes.shift();&#13;
			if ( ct === undefined ) {&#13;
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );&#13;
			}&#13;
		}&#13;
	&#13;
		// Check if we're dealing with a known content-type&#13;
		if ( ct ) {&#13;
			for ( type in contents ) {&#13;
				if ( contents[ type ] &amp;&amp; contents[ type ].test( ct ) ) {&#13;
					dataTypes.unshift( type );&#13;
					break;&#13;
				}&#13;
			}&#13;
		}&#13;
	&#13;
		// Check to see if we have a response for the expected dataType&#13;
		if ( dataTypes[ 0 ] in responses ) {&#13;
			finalDataType = dataTypes[ 0 ];&#13;
		} else {&#13;
	&#13;
			// Try convertible dataTypes&#13;
			for ( type in responses ) {&#13;
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {&#13;
					finalDataType = type;&#13;
					break;&#13;
				}&#13;
				if ( !firstDataType ) {&#13;
					firstDataType = type;&#13;
				}&#13;
			}&#13;
	&#13;
			// Or just use first one&#13;
			finalDataType = finalDataType || firstDataType;&#13;
		}&#13;
	&#13;
		// If we found a dataType&#13;
		// We add the dataType to the list if needed&#13;
		// and return the corresponding response&#13;
		if ( finalDataType ) {&#13;
			if ( finalDataType !== dataTypes[ 0 ] ) {&#13;
				dataTypes.unshift( finalDataType );&#13;
			}&#13;
			return responses[ finalDataType ];&#13;
		}&#13;
	}&#13;
	&#13;
	/* Chain conversions given the request and the original response&#13;
	 * Also sets the responseXXX fields on the jqXHR instance&#13;
	 */&#13;
	function ajaxConvert( s, response, jqXHR, isSuccess ) {&#13;
		var conv2, current, conv, tmp, prev,&#13;
			converters = {},&#13;
	&#13;
			// Work with a copy of dataTypes in case we need to modify it for conversion&#13;
			dataTypes = s.dataTypes.slice();&#13;
	&#13;
		// Create converters map with lowercased keys&#13;
		if ( dataTypes[ 1 ] ) {&#13;
			for ( conv in s.converters ) {&#13;
				converters[ conv.toLowerCase() ] = s.converters[ conv ];&#13;
			}&#13;
		}&#13;
	&#13;
		current = dataTypes.shift();&#13;
	&#13;
		// Convert to each sequential dataType&#13;
		while ( current ) {&#13;
	&#13;
			if ( s.responseFields[ current ] ) {&#13;
				jqXHR[ s.responseFields[ current ] ] = response;&#13;
			}&#13;
	&#13;
			// Apply the dataFilter if provided&#13;
			if ( !prev &amp;&amp; isSuccess &amp;&amp; s.dataFilter ) {&#13;
				response = s.dataFilter( response, s.dataType );&#13;
			}&#13;
	&#13;
			prev = current;&#13;
			current = dataTypes.shift();&#13;
	&#13;
			if ( current ) {&#13;
	&#13;
				// There's only work to do if current dataType is non-auto&#13;
				if ( current === "*" ) {&#13;
	&#13;
					current = prev;&#13;
	&#13;
				// Convert response if prev dataType is non-auto and differs from current&#13;
				} else if ( prev !== "*" &amp;&amp; prev !== current ) {&#13;
	&#13;
					// Seek a direct converter&#13;
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];&#13;
	&#13;
					// If none found, seek a pair&#13;
					if ( !conv ) {&#13;
						for ( conv2 in converters ) {&#13;
	&#13;
							// If conv2 outputs current&#13;
							tmp = conv2.split( " " );&#13;
							if ( tmp[ 1 ] === current ) {&#13;
	&#13;
								// If prev can be converted to accepted input&#13;
								conv = converters[ prev + " " + tmp[ 0 ] ] ||&#13;
									converters[ "* " + tmp[ 0 ] ];&#13;
								if ( conv ) {&#13;
	&#13;
									// Condense equivalence converters&#13;
									if ( conv === true ) {&#13;
										conv = converters[ conv2 ];&#13;
	&#13;
									// Otherwise, insert the intermediate dataType&#13;
									} else if ( converters[ conv2 ] !== true ) {&#13;
										current = tmp[ 0 ];&#13;
										dataTypes.unshift( tmp[ 1 ] );&#13;
									}&#13;
									break;&#13;
								}&#13;
							}&#13;
						}&#13;
					}&#13;
	&#13;
					// Apply converter (if not an equivalence)&#13;
					if ( conv !== true ) {&#13;
	&#13;
						// Unless errors are allowed to bubble, catch and return them&#13;
						if ( conv &amp;&amp; s.throws ) {&#13;
							response = conv( response );&#13;
						} else {&#13;
							try {&#13;
								response = conv( response );&#13;
							} catch ( e ) {&#13;
								return {&#13;
									state: "parsererror",&#13;
									error: conv ? e : "No conversion from " + prev + " to " + current&#13;
								};&#13;
							}&#13;
						}&#13;
					}&#13;
				}&#13;
			}&#13;
		}&#13;
	&#13;
		return { state: "success", data: response };&#13;
	}&#13;
	&#13;
	jQuery.extend( {&#13;
	&#13;
		// Counter for holding the number of active queries&#13;
		active: 0,&#13;
	&#13;
		// Last-Modified header cache for next request&#13;
		lastModified: {},&#13;
		etag: {},&#13;
	&#13;
		ajaxSettings: {&#13;
			url: location.href,&#13;
			type: "GET",&#13;
			isLocal: rlocalProtocol.test( location.protocol ),&#13;
			global: true,&#13;
			processData: true,&#13;
			async: true,&#13;
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",&#13;
	&#13;
			/*&#13;
			timeout: 0,&#13;
			data: null,&#13;
			dataType: null,&#13;
			username: null,&#13;
			password: null,&#13;
			cache: null,&#13;
			throws: false,&#13;
			traditional: false,&#13;
			headers: {},&#13;
			*/&#13;
	&#13;
			accepts: {&#13;
				"*": allTypes,&#13;
				text: "text/plain",&#13;
				html: "text/html",&#13;
				xml: "application/xml, text/xml",&#13;
				json: "application/json, text/javascript"&#13;
			},&#13;
	&#13;
			contents: {&#13;
				xml: /\bxml\b/,&#13;
				html: /\bhtml/,&#13;
				json: /\bjson\b/&#13;
			},&#13;
	&#13;
			responseFields: {&#13;
				xml: "responseXML",&#13;
				text: "responseText",&#13;
				json: "responseJSON"&#13;
			},&#13;
	&#13;
			// Data converters&#13;
			// Keys separate source (or catchall "*") and destination types with a single space&#13;
			converters: {&#13;
	&#13;
				// Convert anything to text&#13;
				"* text": String,&#13;
	&#13;
				// Text to html (true = no transformation)&#13;
				"text html": true,&#13;
	&#13;
				// Evaluate text as a json expression&#13;
				"text json": JSON.parse,&#13;
	&#13;
				// Parse text as xml&#13;
				"text xml": jQuery.parseXML&#13;
			},&#13;
	&#13;
			// For options that shouldn't be deep extended:&#13;
			// you can add your own custom options here if&#13;
			// and when you create one that shouldn't be&#13;
			// deep extended (see ajaxExtend)&#13;
			flatOptions: {&#13;
				url: true,&#13;
				context: true&#13;
			}&#13;
		},&#13;
	&#13;
		// Creates a full fledged settings object into target&#13;
		// with both ajaxSettings and settings fields.&#13;
		// If target is omitted, writes into ajaxSettings.&#13;
		ajaxSetup: function( target, settings ) {&#13;
			return settings ?&#13;
	&#13;
				// Building a settings object&#13;
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :&#13;
	&#13;
				// Extending ajaxSettings&#13;
				ajaxExtend( jQuery.ajaxSettings, target );&#13;
		},&#13;
	&#13;
		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),&#13;
		ajaxTransport: addToPrefiltersOrTransports( transports ),&#13;
	&#13;
		// Main method&#13;
		ajax: function( url, options ) {&#13;
	&#13;
			// If url is an object, simulate pre-1.5 signature&#13;
			if ( typeof url === "object" ) {&#13;
				options = url;&#13;
				url = undefined;&#13;
			}&#13;
	&#13;
			// Force options to be an object&#13;
			options = options || {};&#13;
	&#13;
			var transport,&#13;
	&#13;
				// URL without anti-cache param&#13;
				cacheURL,&#13;
	&#13;
				// Response headers&#13;
				responseHeadersString,&#13;
				responseHeaders,&#13;
	&#13;
				// timeout handle&#13;
				timeoutTimer,&#13;
	&#13;
				// Url cleanup var&#13;
				urlAnchor,&#13;
	&#13;
				// Request state (becomes false upon send and true upon completion)&#13;
				completed,&#13;
	&#13;
				// To know if global events are to be dispatched&#13;
				fireGlobals,&#13;
	&#13;
				// Loop variable&#13;
				i,&#13;
	&#13;
				// uncached part of the url&#13;
				uncached,&#13;
	&#13;
				// Create the final options object&#13;
				s = jQuery.ajaxSetup( {}, options ),&#13;
	&#13;
				// Callbacks context&#13;
				callbackContext = s.context || s,&#13;
	&#13;
				// Context for global events is callbackContext if it is a DOM node or jQuery collection&#13;
				globalEventContext = s.context &amp;&amp;&#13;
					( callbackContext.nodeType || callbackContext.jquery ) ?&#13;
						jQuery( callbackContext ) :&#13;
						jQuery.event,&#13;
	&#13;
				// Deferreds&#13;
				deferred = jQuery.Deferred(),&#13;
				completeDeferred = jQuery.Callbacks( "once memory" ),&#13;
	&#13;
				// Status-dependent callbacks&#13;
				statusCode = s.statusCode || {},&#13;
	&#13;
				// Headers (they are sent all at once)&#13;
				requestHeaders = {},&#13;
				requestHeadersNames = {},&#13;
	&#13;
				// Default abort message&#13;
				strAbort = "canceled",&#13;
	&#13;
				// Fake xhr&#13;
				jqXHR = {&#13;
					readyState: 0,&#13;
	&#13;
					// Builds headers hashtable if needed&#13;
					getResponseHeader: function( key ) {&#13;
						var match;&#13;
						if ( completed ) {&#13;
							if ( !responseHeaders ) {&#13;
								responseHeaders = {};&#13;
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {&#13;
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];&#13;
								}&#13;
							}&#13;
							match = responseHeaders[ key.toLowerCase() ];&#13;
						}&#13;
						return match == null ? null : match;&#13;
					},&#13;
	&#13;
					// Raw string&#13;
					getAllResponseHeaders: function() {&#13;
						return completed ? responseHeadersString : null;&#13;
					},&#13;
	&#13;
					// Caches the header&#13;
					setRequestHeader: function( name, value ) {&#13;
						if ( completed == null ) {&#13;
							name = requestHeadersNames[ name.toLowerCase() ] =&#13;
								requestHeadersNames[ name.toLowerCase() ] || name;&#13;
							requestHeaders[ name ] = value;&#13;
						}&#13;
						return this;&#13;
					},&#13;
	&#13;
					// Overrides response content-type header&#13;
					overrideMimeType: function( type ) {&#13;
						if ( completed == null ) {&#13;
							s.mimeType = type;&#13;
						}&#13;
						return this;&#13;
					},&#13;
	&#13;
					// Status-dependent callbacks&#13;
					statusCode: function( map ) {&#13;
						var code;&#13;
						if ( map ) {&#13;
							if ( completed ) {&#13;
	&#13;
								// Execute the appropriate callbacks&#13;
								jqXHR.always( map[ jqXHR.status ] );&#13;
							} else {&#13;
	&#13;
								// Lazy-add the new callbacks in a way that preserves old ones&#13;
								for ( code in map ) {&#13;
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];&#13;
								}&#13;
							}&#13;
						}&#13;
						return this;&#13;
					},&#13;
	&#13;
					// Cancel the request&#13;
					abort: function( statusText ) {&#13;
						var finalText = statusText || strAbort;&#13;
						if ( transport ) {&#13;
							transport.abort( finalText );&#13;
						}&#13;
						done( 0, finalText );&#13;
						return this;&#13;
					}&#13;
				};&#13;
	&#13;
			// Attach deferreds&#13;
			deferred.promise( jqXHR );&#13;
	&#13;
			// Add protocol if not provided (prefilters might expect it)&#13;
			// Handle falsy url in the settings object (#10093: consistency with old signature)&#13;
			// We also use the url parameter if available&#13;
			s.url = ( ( url || s.url || location.href ) + "" )&#13;
				.replace( rprotocol, location.protocol + "//" );&#13;
	&#13;
			// Alias method option to type as per ticket #12004&#13;
			s.type = options.method || options.type || s.method || s.type;&#13;
	&#13;
			// Extract dataTypes list&#13;
			s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];&#13;
	&#13;
			// A cross-domain request is in order when the origin doesn't match the current origin.&#13;
			if ( s.crossDomain == null ) {&#13;
				urlAnchor = document.createElement( "a" );&#13;
	&#13;
				// Support: IE &lt;=8 - 11, Edge 12 - 15&#13;
				// IE throws exception on accessing the href property if url is malformed,&#13;
				// e.g. http://example.com:80x/&#13;
				try {&#13;
					urlAnchor.href = s.url;&#13;
	&#13;
					// Support: IE &lt;=8 - 11 only&#13;
					// Anchor's host property isn't correctly set when s.url is relative&#13;
					urlAnchor.href = urlAnchor.href;&#13;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==&#13;
						urlAnchor.protocol + "//" + urlAnchor.host;&#13;
				} catch ( e ) {&#13;
	&#13;
					// If there is an error parsing the URL, assume it is crossDomain,&#13;
					// it can be rejected by the transport if it is invalid&#13;
					s.crossDomain = true;&#13;
				}&#13;
			}&#13;
	&#13;
			// Convert data if not already a string&#13;
			if ( s.data &amp;&amp; s.processData &amp;&amp; typeof s.data !== "string" ) {&#13;
				s.data = jQuery.param( s.data, s.traditional );&#13;
			}&#13;
	&#13;
			// Apply prefilters&#13;
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );&#13;
	&#13;
			// If request was aborted inside a prefilter, stop there&#13;
			if ( completed ) {&#13;
				return jqXHR;&#13;
			}&#13;
	&#13;
			// We can fire global events as of now if asked to&#13;
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)&#13;
			fireGlobals = jQuery.event &amp;&amp; s.global;&#13;
	&#13;
			// Watch for a new set of requests&#13;
			if ( fireGlobals &amp;&amp; jQuery.active++ === 0 ) {&#13;
				jQuery.event.trigger( "ajaxStart" );&#13;
			}&#13;
	&#13;
			// Uppercase the type&#13;
			s.type = s.type.toUpperCase();&#13;
	&#13;
			// Determine if request has content&#13;
			s.hasContent = !rnoContent.test( s.type );&#13;
	&#13;
			// Save the URL in case we're toying with the If-Modified-Since&#13;
			// and/or If-None-Match header later on&#13;
			// Remove hash to simplify url manipulation&#13;
			cacheURL = s.url.replace( rhash, "" );&#13;
	&#13;
			// More options handling for requests with no content&#13;
			if ( !s.hasContent ) {&#13;
	&#13;
				// Remember the hash so we can put it back&#13;
				uncached = s.url.slice( cacheURL.length );&#13;
	&#13;
				// If data is available and should be processed, append data to url&#13;
				if ( s.data &amp;&amp; ( s.processData || typeof s.data === "string" ) ) {&#13;
					cacheURL += ( rquery.test( cacheURL ) ? "&amp;" : "?" ) + s.data;&#13;
	&#13;
					// #9682: remove data so that it's not used in an eventual retry&#13;
					delete s.data;&#13;
				}&#13;
	&#13;
				// Add or update anti-cache param if needed&#13;
				if ( s.cache === false ) {&#13;
					cacheURL = cacheURL.replace( rantiCache, "$1" );&#13;
					uncached = ( rquery.test( cacheURL ) ? "&amp;" : "?" ) + "_=" + ( nonce++ ) + uncached;&#13;
				}&#13;
	&#13;
				// Put hash and anti-cache on the URL that will be requested (gh-1732)&#13;
				s.url = cacheURL + uncached;&#13;
	&#13;
			// Change '%20' to '+' if this is encoded form body content (gh-2658)&#13;
			} else if ( s.data &amp;&amp; s.processData &amp;&amp;&#13;
				( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {&#13;
				s.data = s.data.replace( r20, "+" );&#13;
			}&#13;
	&#13;
			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.&#13;
			if ( s.ifModified ) {&#13;
				if ( jQuery.lastModified[ cacheURL ] ) {&#13;
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );&#13;
				}&#13;
				if ( jQuery.etag[ cacheURL ] ) {&#13;
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );&#13;
				}&#13;
			}&#13;
	&#13;
			// Set the correct header, if data is being sent&#13;
			if ( s.data &amp;&amp; s.hasContent &amp;&amp; s.contentType !== false || options.contentType ) {&#13;
				jqXHR.setRequestHeader( "Content-Type", s.contentType );&#13;
			}&#13;
	&#13;
			// Set the Accepts header for the server, depending on the dataType&#13;
			jqXHR.setRequestHeader(&#13;
				"Accept",&#13;
				s.dataTypes[ 0 ] &amp;&amp; s.accepts[ s.dataTypes[ 0 ] ] ?&#13;
					s.accepts[ s.dataTypes[ 0 ] ] +&#13;
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :&#13;
					s.accepts[ "*" ]&#13;
			);&#13;
	&#13;
			// Check for headers option&#13;
			for ( i in s.headers ) {&#13;
				jqXHR.setRequestHeader( i, s.headers[ i ] );&#13;
			}&#13;
	&#13;
			// Allow custom headers/mimetypes and early abort&#13;
			if ( s.beforeSend &amp;&amp;&#13;
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {&#13;
	&#13;
				// Abort if not done already and return&#13;
				return jqXHR.abort();&#13;
			}&#13;
	&#13;
			// Aborting is no longer a cancellation&#13;
			strAbort = "abort";&#13;
	&#13;
			// Install callbacks on deferreds&#13;
			completeDeferred.add( s.complete );&#13;
			jqXHR.done( s.success );&#13;
			jqXHR.fail( s.error );&#13;
	&#13;
			// Get transport&#13;
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );&#13;
	&#13;
			// If no transport, we auto-abort&#13;
			if ( !transport ) {&#13;
				done( -1, "No Transport" );&#13;
			} else {&#13;
				jqXHR.readyState = 1;&#13;
	&#13;
				// Send global event&#13;
				if ( fireGlobals ) {&#13;
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );&#13;
				}&#13;
	&#13;
				// If request was aborted inside ajaxSend, stop there&#13;
				if ( completed ) {&#13;
					return jqXHR;&#13;
				}&#13;
	&#13;
				// Timeout&#13;
				if ( s.async &amp;&amp; s.timeout &gt; 0 ) {&#13;
					timeoutTimer = window.setTimeout( function() {&#13;
						jqXHR.abort( "timeout" );&#13;
					}, s.timeout );&#13;
				}&#13;
	&#13;
				try {&#13;
					completed = false;&#13;
					transport.send( requestHeaders, done );&#13;
				} catch ( e ) {&#13;
	&#13;
					// Rethrow post-completion exceptions&#13;
					if ( completed ) {&#13;
						throw e;&#13;
					}&#13;
	&#13;
					// Propagate others as results&#13;
					done( -1, e );&#13;
				}&#13;
			}&#13;
	&#13;
			// Callback for when everything is done&#13;
			function done( status, nativeStatusText, responses, headers ) {&#13;
				var isSuccess, success, error, response, modified,&#13;
					statusText = nativeStatusText;&#13;
	&#13;
				// Ignore repeat invocations&#13;
				if ( completed ) {&#13;
					return;&#13;
				}&#13;
	&#13;
				completed = true;&#13;
	&#13;
				// Clear timeout if it exists&#13;
				if ( timeoutTimer ) {&#13;
					window.clearTimeout( timeoutTimer );&#13;
				}&#13;
	&#13;
				// Dereference transport for early garbage collection&#13;
				// (no matter how long the jqXHR object will be used)&#13;
				transport = undefined;&#13;
	&#13;
				// Cache response headers&#13;
				responseHeadersString = headers || "";&#13;
	&#13;
				// Set readyState&#13;
				jqXHR.readyState = status &gt; 0 ? 4 : 0;&#13;
	&#13;
				// Determine if successful&#13;
				isSuccess = status &gt;= 200 &amp;&amp; status &lt; 300 || status === 304;&#13;
	&#13;
				// Get response data&#13;
				if ( responses ) {&#13;
					response = ajaxHandleResponses( s, jqXHR, responses );&#13;
				}&#13;
	&#13;
				// Convert no matter what (that way responseXXX fields are always set)&#13;
				response = ajaxConvert( s, response, jqXHR, isSuccess );&#13;
	&#13;
				// If successful, handle type chaining&#13;
				if ( isSuccess ) {&#13;
	&#13;
					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.&#13;
					if ( s.ifModified ) {&#13;
						modified = jqXHR.getResponseHeader( "Last-Modified" );&#13;
						if ( modified ) {&#13;
							jQuery.lastModified[ cacheURL ] = modified;&#13;
						}&#13;
						modified = jqXHR.getResponseHeader( "etag" );&#13;
						if ( modified ) {&#13;
							jQuery.etag[ cacheURL ] = modified;&#13;
						}&#13;
					}&#13;
	&#13;
					// if no content&#13;
					if ( status === 204 || s.type === "HEAD" ) {&#13;
						statusText = "nocontent";&#13;
	&#13;
					// if not modified&#13;
					} else if ( status === 304 ) {&#13;
						statusText = "notmodified";&#13;
	&#13;
					// If we have data, let's convert it&#13;
					} else {&#13;
						statusText = response.state;&#13;
						success = response.data;&#13;
						error = response.error;&#13;
						isSuccess = !error;&#13;
					}&#13;
				} else {&#13;
	&#13;
					// Extract error from statusText and normalize for non-aborts&#13;
					error = statusText;&#13;
					if ( status || !statusText ) {&#13;
						statusText = "error";&#13;
						if ( status &lt; 0 ) {&#13;
							status = 0;&#13;
						}&#13;
					}&#13;
				}&#13;
	&#13;
				// Set data for the fake xhr object&#13;
				jqXHR.status = status;&#13;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";&#13;
	&#13;
				// Success/Error&#13;
				if ( isSuccess ) {&#13;
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );&#13;
				} else {&#13;
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );&#13;
				}&#13;
	&#13;
				// Status-dependent callbacks&#13;
				jqXHR.statusCode( statusCode );&#13;
				statusCode = undefined;&#13;
	&#13;
				if ( fireGlobals ) {&#13;
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",&#13;
						[ jqXHR, s, isSuccess ? success : error ] );&#13;
				}&#13;
	&#13;
				// Complete&#13;
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );&#13;
	&#13;
				if ( fireGlobals ) {&#13;
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );&#13;
	&#13;
					// Handle the global AJAX counter&#13;
					if ( !( --jQuery.active ) ) {&#13;
						jQuery.event.trigger( "ajaxStop" );&#13;
					}&#13;
				}&#13;
			}&#13;
	&#13;
			return jqXHR;&#13;
		},&#13;
	&#13;
		getJSON: function( url, data, callback ) {&#13;
			return jQuery.get( url, data, callback, "json" );&#13;
		},&#13;
	&#13;
		getScript: function( url, callback ) {&#13;
			return jQuery.get( url, undefined, callback, "script" );&#13;
		}&#13;
	} );&#13;
	&#13;
	jQuery.each( [ "get", "post" ], function( i, method ) {&#13;
		jQuery[ method ] = function( url, data, callback, type ) {&#13;
	&#13;
			// Shift arguments if data argument was omitted&#13;
			if ( isFunction( data ) ) {&#13;
				type = type || callback;&#13;
				callback = data;&#13;
				data = undefined;&#13;
			}&#13;
	&#13;
			// The url can be an options object (which then must have .url)&#13;
			return jQuery.ajax( jQuery.extend( {&#13;
				url: url,&#13;
				type: method,&#13;
				dataType: type,&#13;
				data: data,&#13;
				success: callback&#13;
			}, jQuery.isPlainObject( url ) &amp;&amp; url ) );&#13;
		};&#13;
	} );&#13;
	&#13;
	&#13;
	jQuery._evalUrl = function( url ) {&#13;
		return jQuery.ajax( {&#13;
			url: url,&#13;
	&#13;
			// Make this explicit, since user can override this through ajaxSetup (#11264)&#13;
			type: "GET",&#13;
			dataType: "script",&#13;
			cache: true,&#13;
			async: false,&#13;
			global: false,&#13;
			"throws": true&#13;
		} );&#13;
	};&#13;
	&#13;
	&#13;
	jQuery.fn.extend( {&#13;
		wrapAll: function( html ) {&#13;
			var wrap;&#13;
	&#13;
			if ( this[ 0 ] ) {&#13;
				if ( isFunction( html ) ) {&#13;
					html = html.call( this[ 0 ] );&#13;
				}&#13;
	&#13;
				// The elements to wrap the target around&#13;
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );&#13;
	&#13;
				if ( this[ 0 ].parentNode ) {&#13;
					wrap.insertBefore( this[ 0 ] );&#13;
				}&#13;
	&#13;
				wrap.map( function() {&#13;
					var elem = this;&#13;
	&#13;
					while ( elem.firstElementChild ) {&#13;
						elem = elem.firstElementChild;&#13;
					}&#13;
	&#13;
					return elem;&#13;
				} ).append( this );&#13;
			}&#13;
	&#13;
			return this;&#13;
		},&#13;
	&#13;
		wrapInner: function( html ) {&#13;
			if ( isFunction( html ) ) {&#13;
				return this.each( function( i ) {&#13;
					jQuery( this ).wrapInner( html.call( this, i ) );&#13;
				} );&#13;
			}&#13;
	&#13;
			return this.each( function() {&#13;
				var self = jQuery( this ),&#13;
					contents = self.contents();&#13;
	&#13;
				if ( contents.length ) {&#13;
					contents.wrapAll( html );&#13;
	&#13;
				} else {&#13;
					self.append( html );&#13;
				}&#13;
			} );&#13;
		},&#13;
	&#13;
		wrap: function( html ) {&#13;
			var htmlIsFunction = isFunction( html );&#13;
	&#13;
			return this.each( function( i ) {&#13;
				jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );&#13;
			} );&#13;
		},&#13;
	&#13;
		unwrap: function( selector ) {&#13;
			this.parent( selector ).not( "body" ).each( function() {&#13;
				jQuery( this ).replaceWith( this.childNodes );&#13;
			} );&#13;
			return this;&#13;
		}&#13;
	} );&#13;
	&#13;
	&#13;
	jQuery.expr.pseudos.hidden = function( elem ) {&#13;
		return !jQuery.expr.pseudos.visible( elem );&#13;
	};&#13;
	jQuery.expr.pseudos.visible = function( elem ) {&#13;
		return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );&#13;
	};&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	jQuery.ajaxSettings.xhr = function() {&#13;
		try {&#13;
			return new window.XMLHttpRequest();&#13;
		} catch ( e ) {}&#13;
	};&#13;
	&#13;
	var xhrSuccessStatus = {&#13;
	&#13;
			// File protocol always yields status code 0, assume 200&#13;
			0: 200,&#13;
	&#13;
			// Support: IE &lt;=9 only&#13;
			// #1450: sometimes IE returns 1223 when it should be 204&#13;
			1223: 204&#13;
		},&#13;
		xhrSupported = jQuery.ajaxSettings.xhr();&#13;
	&#13;
	support.cors = !!xhrSupported &amp;&amp; ( "withCredentials" in xhrSupported );&#13;
	support.ajax = xhrSupported = !!xhrSupported;&#13;
	&#13;
	jQuery.ajaxTransport( function( options ) {&#13;
		var callback, errorCallback;&#13;
	&#13;
		// Cross domain only allowed if supported through XMLHttpRequest&#13;
		if ( support.cors || xhrSupported &amp;&amp; !options.crossDomain ) {&#13;
			return {&#13;
				send: function( headers, complete ) {&#13;
					var i,&#13;
						xhr = options.xhr();&#13;
	&#13;
					xhr.open(&#13;
						options.type,&#13;
						options.url,&#13;
						options.async,&#13;
						options.username,&#13;
						options.password&#13;
					);&#13;
	&#13;
					// Apply custom fields if provided&#13;
					if ( options.xhrFields ) {&#13;
						for ( i in options.xhrFields ) {&#13;
							xhr[ i ] = options.xhrFields[ i ];&#13;
						}&#13;
					}&#13;
	&#13;
					// Override mime type if needed&#13;
					if ( options.mimeType &amp;&amp; xhr.overrideMimeType ) {&#13;
						xhr.overrideMimeType( options.mimeType );&#13;
					}&#13;
	&#13;
					// X-Requested-With header&#13;
					// For cross-domain requests, seeing as conditions for a preflight are&#13;
					// akin to a jigsaw puzzle, we simply never set it to be sure.&#13;
					// (it can always be set on a per-request basis or even using ajaxSetup)&#13;
					// For same-domain requests, won't change header if already provided.&#13;
					if ( !options.crossDomain &amp;&amp; !headers[ "X-Requested-With" ] ) {&#13;
						headers[ "X-Requested-With" ] = "XMLHttpRequest";&#13;
					}&#13;
	&#13;
					// Set headers&#13;
					for ( i in headers ) {&#13;
						xhr.setRequestHeader( i, headers[ i ] );&#13;
					}&#13;
	&#13;
					// Callback&#13;
					callback = function( type ) {&#13;
						return function() {&#13;
							if ( callback ) {&#13;
								callback = errorCallback = xhr.onload =&#13;
									xhr.onerror = xhr.onabort = xhr.ontimeout =&#13;
										xhr.onreadystatechange = null;&#13;
	&#13;
								if ( type === "abort" ) {&#13;
									xhr.abort();&#13;
								} else if ( type === "error" ) {&#13;
	&#13;
									// Support: IE &lt;=9 only&#13;
									// On a manual native abort, IE9 throws&#13;
									// errors on any property access that is not readyState&#13;
									if ( typeof xhr.status !== "number" ) {&#13;
										complete( 0, "error" );&#13;
									} else {&#13;
										complete(&#13;
	&#13;
											// File: protocol always yields status 0; see #8605, #14207&#13;
											xhr.status,&#13;
											xhr.statusText&#13;
										);&#13;
									}&#13;
								} else {&#13;
									complete(&#13;
										xhrSuccessStatus[ xhr.status ] || xhr.status,&#13;
										xhr.statusText,&#13;
	&#13;
										// Support: IE &lt;=9 only&#13;
										// IE9 has no XHR2 but throws on binary (trac-11426)&#13;
										// For XHR2 non-text, let the caller handle it (gh-2498)&#13;
										( xhr.responseType || "text" ) !== "text"  ||&#13;
										typeof xhr.responseText !== "string" ?&#13;
											{ binary: xhr.response } :&#13;
											{ text: xhr.responseText },&#13;
										xhr.getAllResponseHeaders()&#13;
									);&#13;
								}&#13;
							}&#13;
						};&#13;
					};&#13;
	&#13;
					// Listen to events&#13;
					xhr.onload = callback();&#13;
					errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );&#13;
	&#13;
					// Support: IE 9 only&#13;
					// Use onreadystatechange to replace onabort&#13;
					// to handle uncaught aborts&#13;
					if ( xhr.onabort !== undefined ) {&#13;
						xhr.onabort = errorCallback;&#13;
					} else {&#13;
						xhr.onreadystatechange = function() {&#13;
	&#13;
							// Check readyState before timeout as it changes&#13;
							if ( xhr.readyState === 4 ) {&#13;
	&#13;
								// Allow onerror to be called first,&#13;
								// but that will not handle a native abort&#13;
								// Also, save errorCallback to a variable&#13;
								// as xhr.onerror cannot be accessed&#13;
								window.setTimeout( function() {&#13;
									if ( callback ) {&#13;
										errorCallback();&#13;
									}&#13;
								} );&#13;
							}&#13;
						};&#13;
					}&#13;
	&#13;
					// Create the abort callback&#13;
					callback = callback( "abort" );&#13;
	&#13;
					try {&#13;
	&#13;
						// Do send the request (this may raise an exception)&#13;
						xhr.send( options.hasContent &amp;&amp; options.data || null );&#13;
					} catch ( e ) {&#13;
	&#13;
						// #14683: Only rethrow if this hasn't been notified as an error yet&#13;
						if ( callback ) {&#13;
							throw e;&#13;
						}&#13;
					}&#13;
				},&#13;
	&#13;
				abort: function() {&#13;
					if ( callback ) {&#13;
						callback();&#13;
					}&#13;
				}&#13;
			};&#13;
		}&#13;
	} );&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)&#13;
	jQuery.ajaxPrefilter( function( s ) {&#13;
		if ( s.crossDomain ) {&#13;
			s.contents.script = false;&#13;
		}&#13;
	} );&#13;
	&#13;
	// Install script dataType&#13;
	jQuery.ajaxSetup( {&#13;
		accepts: {&#13;
			script: "text/javascript, application/javascript, " +&#13;
				"application/ecmascript, application/x-ecmascript"&#13;
		},&#13;
		contents: {&#13;
			script: /\b(?:java|ecma)script\b/&#13;
		},&#13;
		converters: {&#13;
			"text script": function( text ) {&#13;
				jQuery.globalEval( text );&#13;
				return text;&#13;
			}&#13;
		}&#13;
	} );&#13;
	&#13;
	// Handle cache's special case and crossDomain&#13;
	jQuery.ajaxPrefilter( "script", function( s ) {&#13;
		if ( s.cache === undefined ) {&#13;
			s.cache = false;&#13;
		}&#13;
		if ( s.crossDomain ) {&#13;
			s.type = "GET";&#13;
		}&#13;
	} );&#13;
	&#13;
	// Bind script tag hack transport&#13;
	jQuery.ajaxTransport( "script", function( s ) {&#13;
	&#13;
		// This transport only deals with cross domain requests&#13;
		if ( s.crossDomain ) {&#13;
			var script, callback;&#13;
			return {&#13;
				send: function( _, complete ) {&#13;
					script = jQuery( "&lt;script&gt;" ).prop( {&#13;
						charset: s.scriptCharset,&#13;
						src: s.url&#13;
					} ).on(&#13;
						"load error",&#13;
						callback = function( evt ) {&#13;
							script.remove();&#13;
							callback = null;&#13;
							if ( evt ) {&#13;
								complete( evt.type === "error" ? 404 : 200, evt.type );&#13;
							}&#13;
						}&#13;
					);&#13;
	&#13;
					// Use native DOM manipulation to avoid our domManip AJAX trickery&#13;
					document.head.appendChild( script[ 0 ] );&#13;
				},&#13;
				abort: function() {&#13;
					if ( callback ) {&#13;
						callback();&#13;
					}&#13;
				}&#13;
			};&#13;
		}&#13;
	} );&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	var oldCallbacks = [],&#13;
		rjsonp = /(=)\?(?=&amp;|$)|\?\?/;&#13;
	&#13;
	// Default jsonp settings&#13;
	jQuery.ajaxSetup( {&#13;
		jsonp: "callback",&#13;
		jsonpCallback: function() {&#13;
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );&#13;
			this[ callback ] = true;&#13;
			return callback;&#13;
		}&#13;
	} );&#13;
	&#13;
	// Detect, normalize options and install callbacks for jsonp requests&#13;
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {&#13;
	&#13;
		var callbackName, overwritten, responseContainer,&#13;
			jsonProp = s.jsonp !== false &amp;&amp; ( rjsonp.test( s.url ) ?&#13;
				"url" :&#13;
				typeof s.data === "string" &amp;&amp;&#13;
					( s.contentType || "" )&#13;
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &amp;&amp;&#13;
					rjsonp.test( s.data ) &amp;&amp; "data"&#13;
			);&#13;
	&#13;
		// Handle iff the expected data type is "jsonp" or we have a parameter to set&#13;
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {&#13;
	&#13;
			// Get callback name, remembering preexisting value associated with it&#13;
			callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?&#13;
				s.jsonpCallback() :&#13;
				s.jsonpCallback;&#13;
	&#13;
			// Insert callback into url or form data&#13;
			if ( jsonProp ) {&#13;
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );&#13;
			} else if ( s.jsonp !== false ) {&#13;
				s.url += ( rquery.test( s.url ) ? "&amp;" : "?" ) + s.jsonp + "=" + callbackName;&#13;
			}&#13;
	&#13;
			// Use data converter to retrieve json after script execution&#13;
			s.converters[ "script json" ] = function() {&#13;
				if ( !responseContainer ) {&#13;
					jQuery.error( callbackName + " was not called" );&#13;
				}&#13;
				return responseContainer[ 0 ];&#13;
			};&#13;
	&#13;
			// Force json dataType&#13;
			s.dataTypes[ 0 ] = "json";&#13;
	&#13;
			// Install callback&#13;
			overwritten = window[ callbackName ];&#13;
			window[ callbackName ] = function() {&#13;
				responseContainer = arguments;&#13;
			};&#13;
	&#13;
			// Clean-up function (fires after converters)&#13;
			jqXHR.always( function() {&#13;
	&#13;
				// If previous value didn't exist - remove it&#13;
				if ( overwritten === undefined ) {&#13;
					jQuery( window ).removeProp( callbackName );&#13;
	&#13;
				// Otherwise restore preexisting value&#13;
				} else {&#13;
					window[ callbackName ] = overwritten;&#13;
				}&#13;
	&#13;
				// Save back as free&#13;
				if ( s[ callbackName ] ) {&#13;
	&#13;
					// Make sure that re-using the options doesn't screw things around&#13;
					s.jsonpCallback = originalSettings.jsonpCallback;&#13;
	&#13;
					// Save the callback name for future use&#13;
					oldCallbacks.push( callbackName );&#13;
				}&#13;
	&#13;
				// Call if it was a function and we have a response&#13;
				if ( responseContainer &amp;&amp; isFunction( overwritten ) ) {&#13;
					overwritten( responseContainer[ 0 ] );&#13;
				}&#13;
	&#13;
				responseContainer = overwritten = undefined;&#13;
			} );&#13;
	&#13;
			// Delegate to script&#13;
			return "script";&#13;
		}&#13;
	} );&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	// Support: Safari 8 only&#13;
	// In Safari 8 documents created via document.implementation.createHTMLDocument&#13;
	// collapse sibling forms: the second one becomes a child of the first one.&#13;
	// Because of that, this security measure has to be disabled in Safari 8.&#13;
	// https://bugs.webkit.org/show_bug.cgi?id=137337&#13;
	support.createHTMLDocument = ( function() {&#13;
		var body = document.implementation.createHTMLDocument( "" ).body;&#13;
		body.innerHTML = "&lt;form&gt;&lt;/form&gt;&lt;form&gt;&lt;/form&gt;";&#13;
		return body.childNodes.length === 2;&#13;
	} )();&#13;
	&#13;
	&#13;
	// Argument "data" should be string of html&#13;
	// context (optional): If specified, the fragment will be created in this context,&#13;
	// defaults to document&#13;
	// keepScripts (optional): If true, will include scripts passed in the html string&#13;
	jQuery.parseHTML = function( data, context, keepScripts ) {&#13;
		if ( typeof data !== "string" ) {&#13;
			return [];&#13;
		}&#13;
		if ( typeof context === "boolean" ) {&#13;
			keepScripts = context;&#13;
			context = false;&#13;
		}&#13;
	&#13;
		var base, parsed, scripts;&#13;
	&#13;
		if ( !context ) {&#13;
	&#13;
			// Stop scripts or inline event handlers from being executed immediately&#13;
			// by using document.implementation&#13;
			if ( support.createHTMLDocument ) {&#13;
				context = document.implementation.createHTMLDocument( "" );&#13;
	&#13;
				// Set the base href for the created document&#13;
				// so any parsed elements with URLs&#13;
				// are based on the document's URL (gh-2965)&#13;
				base = context.createElement( "base" );&#13;
				base.href = document.location.href;&#13;
				context.head.appendChild( base );&#13;
			} else {&#13;
				context = document;&#13;
			}&#13;
		}&#13;
	&#13;
		parsed = rsingleTag.exec( data );&#13;
		scripts = !keepScripts &amp;&amp; [];&#13;
	&#13;
		// Single tag&#13;
		if ( parsed ) {&#13;
			return [ context.createElement( parsed[ 1 ] ) ];&#13;
		}&#13;
	&#13;
		parsed = buildFragment( [ data ], context, scripts );&#13;
	&#13;
		if ( scripts &amp;&amp; scripts.length ) {&#13;
			jQuery( scripts ).remove();&#13;
		}&#13;
	&#13;
		return jQuery.merge( [], parsed.childNodes );&#13;
	};&#13;
	&#13;
	&#13;
	/**&#13;
	 * Load a url into a page&#13;
	 */&#13;
	jQuery.fn.load = function( url, params, callback ) {&#13;
		var selector, type, response,&#13;
			self = this,&#13;
			off = url.indexOf( " " );&#13;
	&#13;
		if ( off &gt; -1 ) {&#13;
			selector = stripAndCollapse( url.slice( off ) );&#13;
			url = url.slice( 0, off );&#13;
		}&#13;
	&#13;
		// If it's a function&#13;
		if ( isFunction( params ) ) {&#13;
	&#13;
			// We assume that it's the callback&#13;
			callback = params;&#13;
			params = undefined;&#13;
	&#13;
		// Otherwise, build a param string&#13;
		} else if ( params &amp;&amp; typeof params === "object" ) {&#13;
			type = "POST";&#13;
		}&#13;
	&#13;
		// If we have elements to modify, make the request&#13;
		if ( self.length &gt; 0 ) {&#13;
			jQuery.ajax( {&#13;
				url: url,&#13;
	&#13;
				// If "type" variable is undefined, then "GET" method will be used.&#13;
				// Make value of this field explicit since&#13;
				// user can override it through ajaxSetup method&#13;
				type: type || "GET",&#13;
				dataType: "html",&#13;
				data: params&#13;
			} ).done( function( responseText ) {&#13;
	&#13;
				// Save response for use in complete callback&#13;
				response = arguments;&#13;
	&#13;
				self.html( selector ?&#13;
	&#13;
					// If a selector was specified, locate the right elements in a dummy div&#13;
					// Exclude scripts to avoid IE 'Permission Denied' errors&#13;
					jQuery( "&lt;div&gt;" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :&#13;
	&#13;
					// Otherwise use the full result&#13;
					responseText );&#13;
	&#13;
			// If the request succeeds, this function gets "data", "status", "jqXHR"&#13;
			// but they are ignored because response was set above.&#13;
			// If it fails, this function gets "jqXHR", "status", "error"&#13;
			} ).always( callback &amp;&amp; function( jqXHR, status ) {&#13;
				self.each( function() {&#13;
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );&#13;
				} );&#13;
			} );&#13;
		}&#13;
	&#13;
		return this;&#13;
	};&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	// Attach a bunch of functions for handling common AJAX events&#13;
	jQuery.each( [&#13;
		"ajaxStart",&#13;
		"ajaxStop",&#13;
		"ajaxComplete",&#13;
		"ajaxError",&#13;
		"ajaxSuccess",&#13;
		"ajaxSend"&#13;
	], function( i, type ) {&#13;
		jQuery.fn[ type ] = function( fn ) {&#13;
			return this.on( type, fn );&#13;
		};&#13;
	} );&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	jQuery.expr.pseudos.animated = function( elem ) {&#13;
		return jQuery.grep( jQuery.timers, function( fn ) {&#13;
			return elem === fn.elem;&#13;
		} ).length;&#13;
	};&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	jQuery.offset = {&#13;
		setOffset: function( elem, options, i ) {&#13;
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,&#13;
				position = jQuery.css( elem, "position" ),&#13;
				curElem = jQuery( elem ),&#13;
				props = {};&#13;
	&#13;
			// Set position first, in-case top/left are set even on static elem&#13;
			if ( position === "static" ) {&#13;
				elem.style.position = "relative";&#13;
			}&#13;
	&#13;
			curOffset = curElem.offset();&#13;
			curCSSTop = jQuery.css( elem, "top" );&#13;
			curCSSLeft = jQuery.css( elem, "left" );&#13;
			calculatePosition = ( position === "absolute" || position === "fixed" ) &amp;&amp;&#13;
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) &gt; -1;&#13;
	&#13;
			// Need to be able to calculate position if either&#13;
			// top or left is auto and position is either absolute or fixed&#13;
			if ( calculatePosition ) {&#13;
				curPosition = curElem.position();&#13;
				curTop = curPosition.top;&#13;
				curLeft = curPosition.left;&#13;
	&#13;
			} else {&#13;
				curTop = parseFloat( curCSSTop ) || 0;&#13;
				curLeft = parseFloat( curCSSLeft ) || 0;&#13;
			}&#13;
	&#13;
			if ( isFunction( options ) ) {&#13;
	&#13;
				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)&#13;
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );&#13;
			}&#13;
	&#13;
			if ( options.top != null ) {&#13;
				props.top = ( options.top - curOffset.top ) + curTop;&#13;
			}&#13;
			if ( options.left != null ) {&#13;
				props.left = ( options.left - curOffset.left ) + curLeft;&#13;
			}&#13;
	&#13;
			if ( "using" in options ) {&#13;
				options.using.call( elem, props );&#13;
	&#13;
			} else {&#13;
				curElem.css( props );&#13;
			}&#13;
		}&#13;
	};&#13;
	&#13;
	jQuery.fn.extend( {&#13;
	&#13;
		// offset() relates an element's border box to the document origin&#13;
		offset: function( options ) {&#13;
	&#13;
			// Preserve chaining for setter&#13;
			if ( arguments.length ) {&#13;
				return options === undefined ?&#13;
					this :&#13;
					this.each( function( i ) {&#13;
						jQuery.offset.setOffset( this, options, i );&#13;
					} );&#13;
			}&#13;
	&#13;
			var rect, win,&#13;
				elem = this[ 0 ];&#13;
	&#13;
			if ( !elem ) {&#13;
				return;&#13;
			}&#13;
	&#13;
			// Return zeros for disconnected and hidden (display: none) elements (gh-2310)&#13;
			// Support: IE &lt;=11 only&#13;
			// Running getBoundingClientRect on a&#13;
			// disconnected node in IE throws an error&#13;
			if ( !elem.getClientRects().length ) {&#13;
				return { top: 0, left: 0 };&#13;
			}&#13;
	&#13;
			// Get document-relative position by adding viewport scroll to viewport-relative gBCR&#13;
			rect = elem.getBoundingClientRect();&#13;
			win = elem.ownerDocument.defaultView;&#13;
			return {&#13;
				top: rect.top + win.pageYOffset,&#13;
				left: rect.left + win.pageXOffset&#13;
			};&#13;
		},&#13;
	&#13;
		// position() relates an element's margin box to its offset parent's padding box&#13;
		// This corresponds to the behavior of CSS absolute positioning&#13;
		position: function() {&#13;
			if ( !this[ 0 ] ) {&#13;
				return;&#13;
			}&#13;
	&#13;
			var offsetParent, offset, doc,&#13;
				elem = this[ 0 ],&#13;
				parentOffset = { top: 0, left: 0 };&#13;
	&#13;
			// position:fixed elements are offset from the viewport, which itself always has zero offset&#13;
			if ( jQuery.css( elem, "position" ) === "fixed" ) {&#13;
	&#13;
				// Assume position:fixed implies availability of getBoundingClientRect&#13;
				offset = elem.getBoundingClientRect();&#13;
	&#13;
			} else {&#13;
				offset = this.offset();&#13;
	&#13;
				// Account for the *real* offset parent, which can be the document or its root element&#13;
				// when a statically positioned element is identified&#13;
				doc = elem.ownerDocument;&#13;
				offsetParent = elem.offsetParent || doc.documentElement;&#13;
				while ( offsetParent &amp;&amp;&#13;
					( offsetParent === doc.body || offsetParent === doc.documentElement ) &amp;&amp;&#13;
					jQuery.css( offsetParent, "position" ) === "static" ) {&#13;
	&#13;
					offsetParent = offsetParent.parentNode;&#13;
				}&#13;
				if ( offsetParent &amp;&amp; offsetParent !== elem &amp;&amp; offsetParent.nodeType === 1 ) {&#13;
	&#13;
					// Incorporate borders into its offset, since they are outside its content origin&#13;
					parentOffset = jQuery( offsetParent ).offset();&#13;
					parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );&#13;
					parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );&#13;
				}&#13;
			}&#13;
	&#13;
			// Subtract parent offsets and element margins&#13;
			return {&#13;
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),&#13;
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )&#13;
			};&#13;
		},&#13;
	&#13;
		// This method will return documentElement in the following cases:&#13;
		// 1) For the element inside the iframe without offsetParent, this method will return&#13;
		//    documentElement of the parent window&#13;
		// 2) For the hidden or detached element&#13;
		// 3) For body or html element, i.e. in case of the html node - it will return itself&#13;
		//&#13;
		// but those exceptions were never presented as a real life use-cases&#13;
		// and might be considered as more preferable results.&#13;
		//&#13;
		// This logic, however, is not guaranteed and can change at any point in the future&#13;
		offsetParent: function() {&#13;
			return this.map( function() {&#13;
				var offsetParent = this.offsetParent;&#13;
	&#13;
				while ( offsetParent &amp;&amp; jQuery.css( offsetParent, "position" ) === "static" ) {&#13;
					offsetParent = offsetParent.offsetParent;&#13;
				}&#13;
	&#13;
				return offsetParent || documentElement;&#13;
			} );&#13;
		}&#13;
	} );&#13;
	&#13;
	// Create scrollLeft and scrollTop methods&#13;
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {&#13;
		var top = "pageYOffset" === prop;&#13;
	&#13;
		jQuery.fn[ method ] = function( val ) {&#13;
			return access( this, function( elem, method, val ) {&#13;
	&#13;
				// Coalesce documents and windows&#13;
				var win;&#13;
				if ( isWindow( elem ) ) {&#13;
					win = elem;&#13;
				} else if ( elem.nodeType === 9 ) {&#13;
					win = elem.defaultView;&#13;
				}&#13;
	&#13;
				if ( val === undefined ) {&#13;
					return win ? win[ prop ] : elem[ method ];&#13;
				}&#13;
	&#13;
				if ( win ) {&#13;
					win.scrollTo(&#13;
						!top ? val : win.pageXOffset,&#13;
						top ? val : win.pageYOffset&#13;
					);&#13;
	&#13;
				} else {&#13;
					elem[ method ] = val;&#13;
				}&#13;
			}, method, val, arguments.length );&#13;
		};&#13;
	} );&#13;
	&#13;
	// Support: Safari &lt;=7 - 9.1, Chrome &lt;=37 - 49&#13;
	// Add the top/left cssHooks using jQuery.fn.position&#13;
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084&#13;
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347&#13;
	// getComputedStyle returns percent when specified for top/left/bottom/right;&#13;
	// rather than make the css module depend on the offset module, just check for it here&#13;
	jQuery.each( [ "top", "left" ], function( i, prop ) {&#13;
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,&#13;
			function( elem, computed ) {&#13;
				if ( computed ) {&#13;
					computed = curCSS( elem, prop );&#13;
	&#13;
					// If curCSS returns percentage, fallback to offset&#13;
					return rnumnonpx.test( computed ) ?&#13;
						jQuery( elem ).position()[ prop ] + "px" :&#13;
						computed;&#13;
				}&#13;
			}&#13;
		);&#13;
	} );&#13;
	&#13;
	&#13;
	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods&#13;
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {&#13;
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },&#13;
			function( defaultExtra, funcName ) {&#13;
	&#13;
			// Margin is only for outerHeight, outerWidth&#13;
			jQuery.fn[ funcName ] = function( margin, value ) {&#13;
				var chainable = arguments.length &amp;&amp; ( defaultExtra || typeof margin !== "boolean" ),&#13;
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );&#13;
	&#13;
				return access( this, function( elem, type, value ) {&#13;
					var doc;&#13;
	&#13;
					if ( isWindow( elem ) ) {&#13;
	&#13;
						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)&#13;
						return funcName.indexOf( "outer" ) === 0 ?&#13;
							elem[ "inner" + name ] :&#13;
							elem.document.documentElement[ "client" + name ];&#13;
					}&#13;
	&#13;
					// Get document width or height&#13;
					if ( elem.nodeType === 9 ) {&#13;
						doc = elem.documentElement;&#13;
	&#13;
						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],&#13;
						// whichever is greatest&#13;
						return Math.max(&#13;
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],&#13;
							elem.body[ "offset" + name ], doc[ "offset" + name ],&#13;
							doc[ "client" + name ]&#13;
						);&#13;
					}&#13;
	&#13;
					return value === undefined ?&#13;
	&#13;
						// Get width or height on the element, requesting but not forcing parseFloat&#13;
						jQuery.css( elem, type, extra ) :&#13;
	&#13;
						// Set width or height on the element&#13;
						jQuery.style( elem, type, value, extra );&#13;
				}, type, chainable ? margin : undefined, chainable );&#13;
			};&#13;
		} );&#13;
	} );&#13;
	&#13;
	&#13;
	jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +&#13;
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +&#13;
		"change select submit keydown keypress keyup contextmenu" ).split( " " ),&#13;
		function( i, name ) {&#13;
	&#13;
		// Handle event binding&#13;
		jQuery.fn[ name ] = function( data, fn ) {&#13;
			return arguments.length &gt; 0 ?&#13;
				this.on( name, null, data, fn ) :&#13;
				this.trigger( name );&#13;
		};&#13;
	} );&#13;
	&#13;
	jQuery.fn.extend( {&#13;
		hover: function( fnOver, fnOut ) {&#13;
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );&#13;
		}&#13;
	} );&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	jQuery.fn.extend( {&#13;
	&#13;
		bind: function( types, data, fn ) {&#13;
			return this.on( types, null, data, fn );&#13;
		},&#13;
		unbind: function( types, fn ) {&#13;
			return this.off( types, null, fn );&#13;
		},&#13;
	&#13;
		delegate: function( selector, types, data, fn ) {&#13;
			return this.on( types, selector, data, fn );&#13;
		},&#13;
		undelegate: function( selector, types, fn ) {&#13;
	&#13;
			// ( namespace ) or ( selector, types [, fn] )&#13;
			return arguments.length === 1 ?&#13;
				this.off( selector, "**" ) :&#13;
				this.off( types, selector || "**", fn );&#13;
		}&#13;
	} );&#13;
	&#13;
	// Bind a function to a context, optionally partially applying any&#13;
	// arguments.&#13;
	// jQuery.proxy is deprecated to promote standards (specifically Function#bind)&#13;
	// However, it is not slated for removal any time soon&#13;
	jQuery.proxy = function( fn, context ) {&#13;
		var tmp, args, proxy;&#13;
	&#13;
		if ( typeof context === "string" ) {&#13;
			tmp = fn[ context ];&#13;
			context = fn;&#13;
			fn = tmp;&#13;
		}&#13;
	&#13;
		// Quick check to determine if target is callable, in the spec&#13;
		// this throws a TypeError, but we will just return undefined.&#13;
		if ( !isFunction( fn ) ) {&#13;
			return undefined;&#13;
		}&#13;
	&#13;
		// Simulated bind&#13;
		args = slice.call( arguments, 2 );&#13;
		proxy = function() {&#13;
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );&#13;
		};&#13;
	&#13;
		// Set the guid of unique handler to the same of original handler, so it can be removed&#13;
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;&#13;
	&#13;
		return proxy;&#13;
	};&#13;
	&#13;
	jQuery.holdReady = function( hold ) {&#13;
		if ( hold ) {&#13;
			jQuery.readyWait++;&#13;
		} else {&#13;
			jQuery.ready( true );&#13;
		}&#13;
	};&#13;
	jQuery.isArray = Array.isArray;&#13;
	jQuery.parseJSON = JSON.parse;&#13;
	jQuery.nodeName = nodeName;&#13;
	jQuery.isFunction = isFunction;&#13;
	jQuery.isWindow = isWindow;&#13;
	jQuery.camelCase = camelCase;&#13;
	jQuery.type = toType;&#13;
	&#13;
	jQuery.now = Date.now;&#13;
	&#13;
	jQuery.isNumeric = function( obj ) {&#13;
	&#13;
		// As of jQuery 3.0, isNumeric is limited to&#13;
		// strings and numbers (primitives or objects)&#13;
		// that can be coerced to finite numbers (gh-2662)&#13;
		var type = jQuery.type( obj );&#13;
		return ( type === "number" || type === "string" ) &amp;&amp;&#13;
	&#13;
			// parseFloat NaNs numeric-cast false positives ("")&#13;
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")&#13;
			// subtraction forces infinities to NaN&#13;
			!isNaN( obj - parseFloat( obj ) );&#13;
	};&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	// Register as a named AMD module, since jQuery can be concatenated with other&#13;
	// files that may use define, but not via a proper concatenation script that&#13;
	// understands anonymous AMD modules. A named AMD is safest and most robust&#13;
	// way to register. Lowercase jquery is used because AMD module names are&#13;
	// derived from file names, and jQuery is normally delivered in a lowercase&#13;
	// file name. Do this after creating the global so that if an AMD module wants&#13;
	// to call noConflict to hide this version of jQuery, it will work.&#13;
	&#13;
	// Note that for maximum portability, libraries that are not jQuery should&#13;
	// declare themselves as anonymous modules, and avoid setting a global if an&#13;
	// AMD loader is present. jQuery is a special case. For more information, see&#13;
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon&#13;
	&#13;
	if ( true ) {&#13;
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {&#13;
			return jQuery;&#13;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &amp;&amp; (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));&#13;
	}&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	var&#13;
	&#13;
		// Map over jQuery in case of overwrite&#13;
		_jQuery = window.jQuery,&#13;
	&#13;
		// Map over the $ in case of overwrite&#13;
		_$ = window.$;&#13;
	&#13;
	jQuery.noConflict = function( deep ) {&#13;
		if ( window.$ === jQuery ) {&#13;
			window.$ = _$;&#13;
		}&#13;
	&#13;
		if ( deep &amp;&amp; window.jQuery === jQuery ) {&#13;
			window.jQuery = _jQuery;&#13;
		}&#13;
	&#13;
		return jQuery;&#13;
	};&#13;
	&#13;
	// Expose jQuery and $ identifiers, even in AMD&#13;
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)&#13;
	// and CommonJS for browser emulators (#13566)&#13;
	if ( !noGlobal ) {&#13;
		window.jQuery = window.$ = jQuery;&#13;
	}&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	return jQuery;&#13;
	} );&#13;
&#13;
&#13;
/***/ }),&#13;
/* 65 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var storage_1 = __webpack_require__(66);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var models_1 = __webpack_require__(61);&#13;
	var Models = __webpack_require__(61);&#13;
	var logger_1 = __webpack_require__(63);&#13;
	var SfConnector = (function () {&#13;
	    function SfConnector(sfAppService) {&#13;
	        this.sfAppService = sfAppService;&#13;
	        this.logger = new logger_1.CustomLogger('SfMethod');&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.currentUISelectedIncident = null;&#13;
	        this.user = new models_1.UserCredentials();&#13;
	        this.CallResults = new Array();&#13;
	        this.store = storage_1.default.getInstance();&#13;
	        this.v = new validation_1.Validation();&#13;
	        this.logger.Info('SF method inititalize ...');&#13;
	    }&#13;
	    SfConnector.prototype.OnInit = function (clearStorage) {&#13;
	        this.logger.Info('OnInit clearStorage : ' + clearStorage);&#13;
	        var self = this;&#13;
	        if (window.addEventListener) {&#13;
	            window.addEventListener("message", topFrameListener);&#13;
	        }&#13;
	        function topFrameListener(event) {&#13;
	            if (event.origin == "https://c.ap5.visual.force.com") {&#13;
	                console.log(event.data);&#13;
	                var type = event.data.type;&#13;
	                var dataArr = event.data.split("|");&#13;
	                if (dataArr[0] === "SCREEN_POP") {&#13;
	                    self.ScreenpopOnphno(dataArr[1]);&#13;
	                }&#13;
	                else if (dataArr[0] === "ONPAGEFOCUS") {&#13;
	                    self.onPageFocus(dataArr[1]);&#13;
	                }&#13;
	                else if (dataArr[0] === "CLICKTOCALL") {&#13;
	                    self.onClickToDial(dataArr[1]);&#13;
	                }&#13;
	                else if (dataArr[0] === "WRAPUP_SUCCESS") {&#13;
	                    self.CreateActivity(dataArr[0]);&#13;
	                }&#13;
	                else if (dataArr[0] === "WRAPUP_FAILED") {&#13;
	                    self.CreateActivity(dataArr[0]);&#13;
	                }&#13;
	            }&#13;
	        }&#13;
	    };&#13;
	    SfConnector.prototype.onPageFocus = function (response) {&#13;
	        /*  var self = this;&#13;
	          var callback_onNavigationChange = function (response) {&#13;
	              var res1 = JSON.stringify(response);&#13;
	              console.log('onPageFocus : ' + JSON.stringify(response));&#13;
	              self.updateCallResult(JSON.parse(res1));&#13;
	          }&#13;
	          window.addEventListener('load', function () {&#13;
	              window.sforce.opencti.onNavigationChange({ listener: callback_onNavigationChange });&#13;
	          });*/&#13;
	        // var res1 = JSON.stringify(response);&#13;
	        //console.log('onPageFocus : ' + JSON.stringify(response));&#13;
	        this.updateCallResult(JSON.parse(response));&#13;
	    };&#13;
	    SfConnector.prototype.updateCallResult = function (res) {&#13;
	        try {&#13;
	            this.logger.Debug('Call Result3 updateCallResult : ' + this.CallResults.length);&#13;
	            //Check and update the who and what id selected.&#13;
	            //form the object here&#13;
	            //console.log('Inside updateCallResult : ' + this.store.GetData(Models.Topics.CallDetail));&#13;
	            var sf = {&#13;
	                Id: res.recordId,&#13;
	                Name: res.recordName,&#13;
	                DisplayName: res.recordName,&#13;
	                ObjectType: res.objectType&#13;
	            };&#13;
	            //let callRes: Models.CallResult;&#13;
	            var index = -1;&#13;
	            var i = void 0;&#13;
	            // loop though&#13;
	            //get the latest CallResult from the&#13;
	            if (sf.ObjectType != undefined) {&#13;
	                this.GetLatestCallResult();&#13;
	                for (var i_1 = 0; i_1 &lt; this.CallResults.length; i_1++) {&#13;
	                    var callRes = this.CallResults[i_1];&#13;
	                    index = -1;&#13;
	                    //if (this.store.GetData('isNonPewcCall')) {&#13;
	                    if (this.CallResults[i_1].WhoLst.length == 0) {&#13;
	                        this.CallResults[i_1].WhoLst.push({ Id: "", Name: "", DisplayName: "", ObjectType: "" });&#13;
	                    }&#13;
	                    else {&#13;
	                        var whoObj = new Models.SFObject();&#13;
	                        whoObj = this.CallResults[i_1].WhoLst.find(function (element) {&#13;
	                            if (element) {&#13;
	                                return element.Id === "";&#13;
	                            }&#13;
	                        });&#13;
	                        if (whoObj == undefined) {&#13;
	                            this.CallResults[i_1].WhoLst[this.CallResults[i_1].WhoLst.length] = { Id: "", Name: "", DisplayName: "", ObjectType: "" };&#13;
	                        }&#13;
	                    }&#13;
	                    if (this.CallResults[i_1].WhatLst.length == 0) {&#13;
	                        this.CallResults[i_1].WhatLst.push({ Id: "", Name: "", DisplayName: "", ObjectType: "" });&#13;
	                    }&#13;
	                    else {&#13;
	                        var whatObj = new Models.SFObject();&#13;
	                        whatObj = this.CallResults[i_1].WhatLst.find(function (element) {&#13;
	                            if (element) {&#13;
	                                return element.Id === "";&#13;
	                            }&#13;
	                        });&#13;
	                        if (whatObj == undefined) {&#13;
	                            this.CallResults[i_1].WhatLst[this.CallResults[i_1].WhatLst.length] = { Id: "", Name: "", DisplayName: "", ObjectType: "" };&#13;
	                        }&#13;
	                    }&#13;
	                    // }&#13;
	                    if (sf.ObjectType === 'Contact' || sf.ObjectType === 'Lead') {&#13;
	                        for (var j = 0; j &lt; callRes.WhoLst.length; j++) {&#13;
	                            if (sf.Id === callRes.WhoLst[j].Id) {&#13;
	                                index = j;&#13;
	                                break;&#13;
	                            }&#13;
	                        }&#13;
	                        if (index === -1) {&#13;
	                            callRes.WhoLst.push(sf);&#13;
	                            callRes.WhoId = sf;&#13;
	                        }&#13;
	                        else {&#13;
	                            callRes.WhoId = callRes.WhoLst[index];&#13;
	                        }&#13;
	                    }&#13;
	                    else if (sf.ObjectType != 'Task' &amp;&amp; sf.ObjectType != undefined) {&#13;
	                        for (var k = 0; k &lt; callRes.WhatLst.length; k++) {&#13;
	                            if (sf.Id === callRes.WhatLst[k].Id) {&#13;
	                                index = k;&#13;
	                                break;&#13;
	                            }&#13;
	                        }&#13;
	                        if (index === -1) {&#13;
	                            callRes.WhatLst.push(sf);&#13;
	                            callRes.WhatId = sf;&#13;
	                        }&#13;
	                        else {&#13;
	                            callRes.WhatId = callRes.WhatLst[index];&#13;
	                        }&#13;
	                    }&#13;
	                    this.CallResults[i_1] = callRes;&#13;
	                    this.logger.Debug('updateCallResult Call result updated ' + i_1);&#13;
	                }&#13;
	                if (this.CallResults.length === 0) {&#13;
	                    var callRes = new Models.CallResult();&#13;
	                    if (callRes.WhoLst.indexOf(sf) === -1) {&#13;
	                        if (sf.ObjectType === 'Contact' || sf.ObjectType === 'Lead') {&#13;
	                            callRes.WhoLst.push(sf);&#13;
	                            callRes.WhoId = sf;&#13;
	                        }&#13;
	                        else if (sf.ObjectType != 'Task') {&#13;
	                            callRes.WhatLst.push(sf);&#13;
	                            callRes.WhatId = sf;&#13;
	                        }&#13;
	                    }&#13;
	                    this.CallResults[0] = callRes;&#13;
	                }&#13;
	                this.store.SetData(Models.Topics.CallResult, JSON.stringify(this.CallResults));&#13;
	                this.evnt.Broadcast(Models.Topics.CallResult, this.CallResults);&#13;
	            }&#13;
	        }&#13;
	        catch (ex) {&#13;
	            this.logger.Error('SF-Light UpdateCallResult Try Catch Error : ' + ex.message);&#13;
	        }&#13;
	    };&#13;
	    SfConnector.prototype.GetLatestCallResult = function () {&#13;
	        this.logger.Debug('GetLatestCallResult : ' + this.CallResults.length);&#13;
	        var val = this.store.GetData(Models.Topics.CallResult);&#13;
	        if (val !== '') {&#13;
	            this.CallResults = JSON.parse(val);&#13;
	            this.logger.All('GetLatestCallResult call result length :' + this.CallResults.length);&#13;
	        }&#13;
	        else {&#13;
	            this.CallResults = Array();&#13;
	            this.logger.All('GetLatestCallResult call result is empty');&#13;
	        }&#13;
	    };&#13;
	    SfConnector.prototype.ScreenpopOnphno = function (result) {&#13;
	        var self = this;&#13;
	        var callRes = new Models.CallResult();&#13;
	        result = JSON.parse(result);&#13;
	        for (var key in result) {&#13;
	            if (result.hasOwnProperty(key)) {&#13;
	                if (key === 'screenPopUrl') {&#13;
	                    callRes.ScreenpopURL = result[key];&#13;
	                }&#13;
	                else {&#13;
	                    try {&#13;
	                        if (key !== "success" &amp;&amp; key !== "errors") {&#13;
	                            var obj = result.returnValue;&#13;
	                            var test = JSON.stringify(obj);&#13;
	                            var test1 = JSON.parse(test);&#13;
	                            for (var key1 in test1) {&#13;
	                                var sfObj = {&#13;
	                                    Id: test1[key1].Id,&#13;
	                                    Name: test1[key1].Name,&#13;
	                                    ObjectType: test1[key1].RecordType,&#13;
	                                    DisplayName: test1[key1].Name&#13;
	                                };&#13;
	                                if (sfObj.ObjectType === 'Contact' || sfObj.ObjectType === 'Lead') {&#13;
	                                    if (callRes.WhoLst.indexOf(sfObj) === -1) {&#13;
	                                        if (sfObj.Id != undefined) {&#13;
	                                            callRes.WhoLst.push(sfObj);&#13;
	                                        }&#13;
	                                    }&#13;
	                                }&#13;
	                                else {&#13;
	                                    if (callRes.WhatLst.indexOf(sfObj) === -1) {&#13;
	                                        if (sfObj.Id != undefined) {&#13;
	                                            callRes.WhatLst.push(sfObj);&#13;
	                                        }&#13;
	                                    }&#13;
	                                }&#13;
	                                callRes.Result.push(JSON.parse(JSON.stringify(sfObj)));&#13;
	                                self.CallResults.push(callRes);&#13;
	                            }&#13;
	                        }&#13;
	                    }&#13;
	                    catch (ex) {&#13;
	                        this.logger.Error('GetSfResult Try Catch Error : ' + ex.message);&#13;
	                    }&#13;
	                }&#13;
	            }&#13;
	        }&#13;
	        self.store.SetData(Models.Topics.CallResult, JSON.stringify(self.CallResults));&#13;
	        self.evnt.Broadcast(Models.Topics.CallResult, self.CallResults);&#13;
	    };&#13;
	    SfConnector.prototype.onClickToDial = function (response) {&#13;
	        var self = this;&#13;
	        /*  (&lt;any&gt;window).sforce.opencti.onClickToDial({&#13;
	              listener: (response) =&gt; {&#13;
	                  if (response) {&#13;
	                      this.logger.Debug('onClickToDial information :' + JSON.stringify(response));&#13;
	                      let res1 = JSON.stringify(response);&#13;
	                      let res = JSON.parse(res1);&#13;
	                      var resStr = response.number;&#13;
	                      resStr = resStr.replace(/[+()-\s]/g, '')&#13;
	                      console.log('Click To Dial Number: ' + response.number + ' - Replaced Number : ' + resStr);&#13;
	                      response.number = resStr;&#13;
	                      console.log('Click To Dial Number : ' + JSON.stringify(response));&#13;
	                      if (response.objectType != undefined) {&#13;
	                          self.sfAppService.MakeCall(resStr);&#13;
	                      }&#13;
	                  }&#13;
	              }&#13;
	          });*/&#13;
	        if (response) {&#13;
	            this.logger.Debug('onClickToDial information :' + JSON.stringify(response));&#13;
	            //let res1 = JSON.stringify(response);&#13;
	            var res = JSON.parse(response);&#13;
	            var resStr = res.number;&#13;
	            resStr = resStr.replace(/[+()-\s]/g, '');&#13;
	            self.sfAppService.MakeCall(resStr);&#13;
	        }&#13;
	    };&#13;
	    SfConnector.prototype.EnableClickToDial = function (callback) {&#13;
	        /*   var self = this;&#13;
	           (&lt;any&gt;window).sforce.opencti.enableClickToDial({&#13;
	               callback: (response) =&gt; {&#13;
	                   if (response.success) {&#13;
	                       this.logger.Debug('EnableClickToDial - enabled:');&#13;
	                       self.onClickToDial();&#13;
	                   } else {&#13;
	                       this.logger.Debug('EnableClickToDial - not enabled:');&#13;
	                   }&#13;
	               }&#13;
	           });*/&#13;
	    };&#13;
	    SfConnector.prototype.DisableClickToDial = function (callback) {&#13;
	        var _this = this;&#13;
	        window.sforce.opencti.disableClickToDial({&#13;
	            callback: function (response) {&#13;
	                if (response.success) {&#13;
	                    _this.logger.Debug('DisableClickToDial - disabled:');&#13;
	                }&#13;
	                else {&#13;
	                    _this.logger.Debug('DisableClickToDial - not disabled:');&#13;
	                }&#13;
	            }&#13;
	        });&#13;
	    };&#13;
	    SfConnector.prototype.UpdateCallResultUIInfo = function (data) {&#13;
	        try {&#13;
	            var callRes = void 0;&#13;
	            this.logger.Debug('UpdateCallResultUIInfo data :' + JSON.stringify(data));&#13;
	            if (this.CallResults.length &gt; 0) {&#13;
	                if (data.type === 'CallDetail') {&#13;
	                    this.CallResults[0].Call = data.val;&#13;
	                    this.CallResults[0].CallId = data.val.Id; // updating the call ID too &#13;
	                    this.logger.All('UpdateCallResultUIInfo call data updated.');&#13;
	                    this.store.SetData(Models.Topics.CallResult, JSON.stringify(this.CallResults));&#13;
	                    this.evnt.Broadcast(Models.Topics.CallResult, this.CallResults);&#13;
	                }&#13;
	                else {&#13;
	                    //for (let i = 0; i &lt; this.CallResults.length; i++) {&#13;
	                    callRes = this.CallResults[0];&#13;
	                    if (callRes.CallId === data.id) {&#13;
	                        switch (data.type) {&#13;
	                            case 'Comment':&#13;
	                                if (data.val !== callRes.Comment) {&#13;
	                                    callRes.IsCommentEdited = true;&#13;
	                                }&#13;
	                                callRes.Comment = data.val;&#13;
	                                break;&#13;
	                            case 'Wrapup':&#13;
	                                callRes.Wrapup = data.val;&#13;
	                                break;&#13;
	                            case 'WhoId':&#13;
	                                callRes.WhoId = data.val;&#13;
	                                break;&#13;
	                            case 'WhatId':&#13;
	                                callRes.WhatId = data.val;&#13;
	                                break;&#13;
	                        }&#13;
	                        this.CallResults[0] = callRes;&#13;
	                        this.logger.All('UpdateCallResultUIInfo other information updted.');&#13;
	                        this.store.SetData(Models.Topics.CallResult, JSON.stringify(this.CallResults));&#13;
	                    }&#13;
	                }&#13;
	            }&#13;
	        }&#13;
	        catch (ex) {&#13;
	            this.logger.Debug('UpdateCallResultUIInfo : ' + ex.message);&#13;
	        }&#13;
	    };&#13;
	    SfConnector.prototype.CreateActivity = function (WRAPUP) {&#13;
	        if (WRAPUP == "WRAPUP_SUCCESS") {&#13;
	            var wrapMessage = new Models.SystemMessage();&#13;
	            wrapMessage.Type = Models.MessageType.General;&#13;
	            wrapMessage.Level = Models.Severity.Info;&#13;
	            wrapMessage.Msg = Models.Message.WrapSucess;&#13;
	            wrapMessage.IsOk = false;&#13;
	            this.evnt.Broadcast(Models.Topics.SystemMessage, wrapMessage);&#13;
	        }&#13;
	        else {&#13;
	            var wrapMessage = new Models.SystemMessage();&#13;
	            wrapMessage.Type = Models.MessageType.General;&#13;
	            wrapMessage.Level = Models.Severity.Info;&#13;
	            wrapMessage.Msg = Models.Message.WrapFailure;&#13;
	            wrapMessage.IsOk = false;&#13;
	            this.evnt.Broadcast(Models.Topics.SystemMessage, wrapMessage);&#13;
	        }&#13;
	    };&#13;
	    return SfConnector;&#13;
	}());&#13;
	exports.SfConnector = SfConnector;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 66 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var StorageHandler = (function () {&#13;
	    function StorageHandler() {&#13;
	        this.eventKeys = new Map();&#13;
	        this.v = new validation_1.Validation();&#13;
	        console.log('Storage handler invoked..');&#13;
	        if (StorageHandler._instance) {&#13;
	            console.log("Storage Error: Instantiation failed: Use SingletonClass.getInstance() instead of new.");&#13;
	            return StorageHandler._instance;&#13;
	        }&#13;
	        StorageHandler._instance = this;&#13;
	        if (window.addEventListener) {&#13;
	            window.addEventListener("storage", this.onStorageUpdated, false);&#13;
	        }&#13;
	        else {&#13;
	            window.attachEvent("onstorage", this.onStorageUpdated);&#13;
	        }&#13;
	    }&#13;
	    StorageHandler.prototype.onStorageUpdated = function (e) {&#13;
	        try {&#13;
	            if (!e) {&#13;
	                e = window.event;&#13;
	            }&#13;
	            if (StorageHandler._instance.v.IsNotNullOrEmpty(StorageHandler._instance.eventKeys[e.key])) {&#13;
	                StorageHandler._instance.eventKeys[e.key](e.key, e.newValue);&#13;
	            }&#13;
	        }&#13;
	        catch (ex) {&#13;
	            console.log('Storage Error occured on processing event :', e, '-- Error Data :', ex.message);&#13;
	        }&#13;
	    };&#13;
	    StorageHandler.getInstance = function () {&#13;
	        return StorageHandler._instance;&#13;
	    };&#13;
	    StorageHandler.prototype.SetEventKeys = function (lstKey, callback) {&#13;
	        if (this.v.IsValidFunction(callback)) {&#13;
	            for (var _i = 0, lstKey_1 = lstKey; _i &lt; lstKey_1.length; _i++) {&#13;
	                var key = lstKey_1[_i];&#13;
	                this.eventKeys[key] = callback;&#13;
	            }&#13;
	        }&#13;
	    };&#13;
	    StorageHandler.prototype.SetData = function (key, value) {&#13;
	        if ((key != "BrowserTab_1" &amp;&amp; key != "LCM_CALLCOUNT")) {&#13;
	        }&#13;
	        localStorage[key] = value;&#13;
	    };&#13;
	    ;&#13;
	    StorageHandler.prototype.GetData = function (key) {&#13;
	        var value = localStorage[key];&#13;
	        if (key != 'BrowserTab_1' &amp;&amp; key != "LCM_CALLCOUNT") {&#13;
	        }&#13;
	        if (this.v.IsNotNullOrUndefinedString(value)) {&#13;
	            return value;&#13;
	        }&#13;
	        return '';&#13;
	    };&#13;
	    StorageHandler.prototype.RemoveKey = function (key) {&#13;
	        if (key != 'BrowserTab_1' &amp;&amp; key != "LCM_CALLCOUNT") {&#13;
	        }&#13;
	        localStorage.removeItem(key);&#13;
	    };&#13;
	    StorageHandler._instance = new StorageHandler();&#13;
	    return StorageHandler;&#13;
	}());&#13;
	Object.defineProperty(exports, "__esModule", { value: true });&#13;
	exports.default = StorageHandler;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 67 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var storage_1 = __webpack_require__(66);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var BrowserTab = (function () {&#13;
	    function BrowserTab() {&#13;
	        var _this = this;&#13;
	        this.store = storage_1.default.getInstance();&#13;
	        this.v = new validation_1.Validation();&#13;
	        this.amIPolling = false;&#13;
	        this.documentUnloaded = false;&#13;
	        this.browserTabIndex = 0;&#13;
	        this.browserTabId = '';&#13;
	        this.callbacks = new Array();&#13;
	        console.log('BrowserTab handler invoked..');&#13;
	        if (BrowserTab._instance) {&#13;
	            console.log("BrowserTab Error: Instantiation failed: Use SingletonClass.getInstance() instead of new.");&#13;
	        }&#13;
	        BrowserTab._instance = this;&#13;
	        if (window.addEventListener) {&#13;
	            window.addEventListener("onunload", function () {&#13;
	                _this.onUnload();&#13;
	            }, false);&#13;
	        }&#13;
	        else {&#13;
	            window.attachEvent("onunload", function () {&#13;
	                _this.onUnload();&#13;
	            });&#13;
	        }&#13;
	        this.initializeTab();&#13;
	        setInterval(function () {&#13;
	            _this.checkPollingWindow();&#13;
	        }, 1000);&#13;
	    }&#13;
	    BrowserTab.getInstance = function () {&#13;
	        return BrowserTab._instance;&#13;
	    };&#13;
	    BrowserTab.prototype.IsPollingWindow = function () {&#13;
	        return this.amIPolling;&#13;
	    };&#13;
	    //register for an method for polling window change event to be triggered. when change has occured.    &#13;
	    BrowserTab.prototype.OnPollingWindow = function (callback) {&#13;
	        if (this.v.IsValidFunction(callback)) {&#13;
	            this.callbacks.push(callback);&#13;
	        }&#13;
	    };&#13;
	    BrowserTab.prototype.onUnload = function () {&#13;
	        this.documentUnloaded = true;&#13;
	        var browserTabKey = 'BrowserTab_' + this.browserTabIndex, browserTab, newTabIndex;&#13;
	        if (this.store.GetData(browserTabKey) !== '') {&#13;
	            browserTab = JSON.parse(localStorage[browserTabKey]);&#13;
	            browserTab = JSON.parse(this.store.GetData(browserTabKey));&#13;
	            if (browserTab.id === this.browserTabId) {&#13;
	                this.store.RemoveKey(browserTabKey);&#13;
	                localStorage.removeItem(browserTabKey);&#13;
	                newTabIndex = parseInt(this.store.GetData('NoOfBrowserTabs')) - 1;&#13;
	                this.store.SetData('NoOfBrowserTabs', newTabIndex.toString());&#13;
	            }&#13;
	        }&#13;
	    };&#13;
	    BrowserTab.prototype.initializeTab = function () {&#13;
	        var newTabIndex = 1, browserTabKey, browserTab, focusTime = 0;&#13;
	        if (this.v.IsNumber(this.store.GetData('NoOfBrowserTabs'))) {&#13;
	            newTabIndex = parseInt(this.store.GetData('NoOfBrowserTabs'));&#13;
	            browserTabKey = 'BrowserTab_' + newTabIndex;&#13;
	            // Remove dead tabs&#13;
	            while (this.store.GetData(browserTabKey) === '' &amp;&amp; newTabIndex &gt; 0) {&#13;
	                console.log("BrowserTab Cleaning up tab index: " + newTabIndex);&#13;
	                newTabIndex = parseInt(this.store.GetData('NoOfBrowserTabs')) - 1;&#13;
	                this.store.SetData('NoOfBrowserTabs', newTabIndex.toString());&#13;
	                browserTabKey = 'BrowserTab_' + newTabIndex;&#13;
	            }&#13;
	            newTabIndex = parseInt(this.store.GetData('NoOfBrowserTabs')) + 1;&#13;
	        }&#13;
	        if (newTabIndex &lt;= 0) {&#13;
	            newTabIndex = 1;&#13;
	        }&#13;
	        browserTabKey = 'BrowserTab_' + newTabIndex;&#13;
	        this.browserTabIndex = newTabIndex;&#13;
	        this.browserTabId = this.v.GenerateUniqueId('window');&#13;
	        browserTab = {&#13;
	            id: this.browserTabId,&#13;
	            lastUpdateTime: new Date().getTime()&#13;
	        };&#13;
	        console.log("BrowserTab Adding tab: " + browserTabKey + " | " + browserTab.id);&#13;
	        //Kludge: To be used by the logger&#13;
	        sessionStorage.setItem('BrowserTabKey', browserTab.id);&#13;
	        this.store.SetData(browserTabKey, JSON.stringify(browserTab));&#13;
	        this.store.SetData('NoOfBrowserTabs', newTabIndex.toString());&#13;
	    };&#13;
	    BrowserTab.prototype.checkPollingWindow = function () {&#13;
	        var firstTabKey = 'BrowserTab_1', currentTabKey = 'BrowserTab_' + this.browserTabIndex, prevTabKey = 'BrowserTab_' + (this.browserTabIndex - 1), firstTab = null, prevTab = null, currentTab = null, that = this, newTabIndex = 0;&#13;
	        if (this.store.GetData(currentTabKey) !== '') {&#13;
	            currentTab = JSON.parse(this.store.GetData(currentTabKey));&#13;
	            if (currentTab.id === this.browserTabId) {&#13;
	                // Create Date object everytime to get current time, so we can avoid problems due to&#13;
	                // javascript execution delay when browser becomes unresponsive for sometime.&#13;
	                currentTab.lastUpdateTime = new Date().getTime();&#13;
	                if (this.browserTabIndex &gt;= 2) {&#13;
	                    if (this.store.GetData(prevTabKey) !== '') {&#13;
	                        prevTab = JSON.parse(this.store.GetData(prevTabKey));&#13;
	                        // If previous tab was not updated in the last 5 seconds,&#13;
	                        // assume that previous tab is dead and remove it from the browser tab list&#13;
	                        if (!this.v.IsNumber(prevTab.lastUpdateTime) || (new Date().getTime() - prevTab.lastUpdateTime) &gt;= 5000) {&#13;
	                            newTabIndex = parseInt(this.store.GetData('NoOfBrowserTabs')) - 1;&#13;
	                            this.store.RemoveKey(currentTabKey);&#13;
	                            this.store.SetData('NoOfBrowserTabs', newTabIndex.toString());&#13;
	                            console.log("BrowserTab Advancing tab: " + currentTabKey + " | " + currentTab.id);&#13;
	                            this.browserTabIndex--;&#13;
	                            currentTabKey = prevTabKey;&#13;
	                        }&#13;
	                    }&#13;
	                    else {&#13;
	                        console.log("BrowserTab Advancing tab as none exists: " + currentTabKey + " | " + currentTab.id);&#13;
	                        this.store.RemoveKey(currentTabKey);&#13;
	                        this.browserTabIndex--;&#13;
	                        currentTabKey = prevTabKey;&#13;
	                    }&#13;
	                }&#13;
	                this.store.SetData(currentTabKey, JSON.stringify(currentTab));&#13;
	                if (this.store.GetData(firstTabKey) !== '') {&#13;
	                    firstTab = JSON.parse(this.store.GetData(firstTabKey));&#13;
	                    if (this.v.IsValidObject(firstTab) &amp;&amp; firstTab.id === this.browserTabId) {&#13;
	                        if (this.amIPolling !== true) {&#13;
	                            this.amIPolling = true;&#13;
	                            this.publishPollingWindow();&#13;
	                        }&#13;
	                    }&#13;
	                }&#13;
	            }&#13;
	            else {&#13;
	                this.amIPolling = false;&#13;
	                //Re-initilizing tab as same tab already exists.&#13;
	                console.log('BrowserTab Re-Adding tab - Duplicate exists.');&#13;
	                this.initializeTab();&#13;
	            }&#13;
	        }&#13;
	        else {&#13;
	            if (this.documentUnloaded === false) {&#13;
	                console.log("BrowserTab Re-Adding tab");&#13;
	                this.initializeTab();&#13;
	            }&#13;
	        }&#13;
	    };&#13;
	    BrowserTab.prototype.publishPollingWindow = function () {&#13;
	        for (var _i = 0, _a = this.callbacks; _i &lt; _a.length; _i++) {&#13;
	            var callback = _a[_i];&#13;
	            try {&#13;
	                callback(this.amIPolling);&#13;
	            }&#13;
	            catch (ex) {&#13;
	                console.log('BrowserTab Browsertabs - call back exception .', ex.message);&#13;
	            }&#13;
	        }&#13;
	    };&#13;
	    BrowserTab._instance = new BrowserTab();&#13;
	    return BrowserTab;&#13;
	}());&#13;
	Object.defineProperty(exports, "__esModule", { value: true });&#13;
	exports.default = BrowserTab;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 68 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var PersistentList = (function () {&#13;
	    function PersistentList(name) {&#13;
	        var _this = this;&#13;
	        this.v = new validation_1.Validation();&#13;
	        this.listName = '';&#13;
	        this.list = new Array();&#13;
	        console.log('PersistentList handler invoked..');&#13;
	        if (!String.prototype.trim) {&#13;
	            String.prototype.trim = function () {&#13;
	                return this.replace(/^\s+|\s+$/g, "");&#13;
	            };&#13;
	        }&#13;
	        // Throw error if list name is invalid&#13;
	        if (name == null || name == undefined || name.trim().length === 0) {&#13;
	            throw new Error("List name is invalid");&#13;
	        }&#13;
	        this.listName = name + '_list';&#13;
	        // Try to get existing list from localStorage. If not found, create a new one&#13;
	        if (localStorage.getItem(this.listName) != null) {&#13;
	            try {&#13;
	                this.list = JSON.parse(localStorage.getItem(this.listName));&#13;
	            }&#13;
	            catch (e) {&#13;
	                this.persistList();&#13;
	            }&#13;
	        }&#13;
	        else {&#13;
	            this.persistList();&#13;
	        }&#13;
	        // Attach localStorage event handlers&#13;
	        if (window.addEventListener) {&#13;
	            window.addEventListener("storage", function (e) { _this.onListUpdate(e); }, false);&#13;
	        }&#13;
	        else {&#13;
	            window.attachEvent("onstorage", function (e) { _this.onListUpdate(e); });&#13;
	        }&#13;
	    }&#13;
	    PersistentList.prototype.onListUpdate = function (e) {&#13;
	        if (!e)&#13;
	            e = window.event;&#13;
	        if (e.key === this.listName) {&#13;
	            try {&#13;
	                this.list = JSON.parse(localStorage.getItem(this.listName));&#13;
	            }&#13;
	            catch (e) {&#13;
	            }&#13;
	        }&#13;
	    };&#13;
	    PersistentList.prototype.persistList = function () {&#13;
	        localStorage.setItem(this.listName, JSON.stringify(this.list));&#13;
	    };&#13;
	    PersistentList.prototype.clone = function (o) {&#13;
	        if (typeof o === 'object') {&#13;
	            return JSON.parse(JSON.stringify(o));&#13;
	        }&#13;
	        return o;&#13;
	    };&#13;
	    PersistentList.prototype.equals = function (a, b) {&#13;
	        return a.id === b.id;&#13;
	    };&#13;
	    PersistentList.prototype.Add = function (item) {&#13;
	        this.list.push(item);&#13;
	        this.persistList();&#13;
	    };&#13;
	    PersistentList.prototype.Remove = function (item) {&#13;
	        if (this.list.length == 0) {&#13;
	            return;&#13;
	        }&#13;
	        for (var i = this.list.length - 1; i &gt;= 0; i--) {&#13;
	            if (this.equals(item, this.list[i])) {&#13;
	                this.list.splice(i, 1);&#13;
	            }&#13;
	        }&#13;
	        this.persistList();&#13;
	    };&#13;
	    PersistentList.prototype.Contains = function (item) {&#13;
	        if (this.list.length == 0) {&#13;
	            return false;&#13;
	        }&#13;
	        for (var i = 0; i &lt; this.list.length; i++) {&#13;
	            if (this.equals(item, this.list[i])) {&#13;
	                return true;&#13;
	            }&#13;
	        }&#13;
	        return false;&#13;
	    };&#13;
	    PersistentList.prototype.Clear = function () {&#13;
	        this.list = [];&#13;
	        this.persistList();&#13;
	    };&#13;
	    PersistentList.prototype.IsEmpty = function () {&#13;
	        return this.list.length == 0;&#13;
	    };&#13;
	    PersistentList.prototype.ForEach = function (f) {&#13;
	        if (typeof f !== 'function')&#13;
	            throw new Error('Invalid argument type. Expected function.');&#13;
	        var i = 0;&#13;
	        var newList = this.clone(this.list);&#13;
	        for (i = 0; i &lt; newList.length; i++) {&#13;
	            if (f(i, newList[i]) === true)&#13;
	                break;&#13;
	        }&#13;
	    };&#13;
	    return PersistentList;&#13;
	}());&#13;
	Object.defineProperty(exports, "__esModule", { value: true });&#13;
	exports.default = PersistentList;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 69 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var Models = __webpack_require__(61);&#13;
	var app_config_1 = __webpack_require__(62);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	__webpack_require__(70);&#13;
	var storage_1 = __webpack_require__(66);&#13;
	var AmazonConnect = (function () {&#13;
	    function AmazonConnect(appService) {&#13;
	        this.appService = appService;&#13;
	        this.v = new validation_1.Validation();&#13;
	        this.AgentObj = null;&#13;
	        this.ContactObj = null;&#13;
	        this.CallInfo = new Array();&#13;
	        this.AgentStates = new Array();&#13;
	        this.Connect = connect;&#13;
	        this.AgentInfo = new Models.Agent();&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.store = storage_1.default.getInstance();&#13;
	        var self = this;&#13;
	        /*************Amazon Events*************/&#13;
	        connect.agent(function (agent) {&#13;
	            self.AgentObj = agent;&#13;
	            var w = window.open('', connect.MasterTopics.LOGIN_POPUP);&#13;
	            if (w) {&#13;
	                w.close();&#13;
	            }&#13;
	            agent.onRefresh(function (agent) {&#13;
	                self.getAgentInfo();&#13;
	            });&#13;
	            var state = agent.getState();&#13;
	            self.getServerTime();&#13;
	            self.GetNotreadyReasonCodes();&#13;
	        });&#13;
	        connect.contact(function (contact) {&#13;
	            self.ContactObj = contact;&#13;
	            if (self.ContactObj.isInbound()) {&#13;
	                self.InboudCall();&#13;
	            }&#13;
	            contact.onRefresh(function (contact) {&#13;
	                //self.updatecallresult();&#13;
	            });&#13;
	            contact.onAccepted(function (contact) {&#13;
	                self.updatecallresult(contact);&#13;
	            });&#13;
	            contact.onConnected(function (contact) {&#13;
	                self.updatecallresult(contact);&#13;
	            });&#13;
	            contact.onEnded(function (contact) {&#13;
	                console.log('On Call Ended');&#13;
	            });&#13;
	        });&#13;
	        var bus = connect.core.getEventBus();&#13;
	        bus.subscribe(connect.EventType.TERMINATED, function () {&#13;
	            self.handleAgentLogout();&#13;
	        });&#13;
	        /*************End Amazon Events*************/&#13;
	    }&#13;
	    AmazonConnect.prototype.getServerTime = function () {&#13;
	        this.SystemInformation = new Models.SystemInfo();&#13;
	        this.SystemInformation.LocalTime = new Date().getTime();&#13;
	        this.SystemInformation.ServerTime = new Date(this.AgentObj.getState().startTimestamp).getTime();&#13;
	        this.store.SetData(Models.Topics.SystemInformation, JSON.stringify(this.SystemInformation));&#13;
	        this.evnt.Broadcast(Models.Topics.SystemInformation, this.SystemInformation);&#13;
	    };&#13;
	    AmazonConnect.prototype.OnInit = function (clearStorage) {&#13;
	        var value = this.store.GetData(Models.Topics.SystemInformation);&#13;
	        value = this.store.GetData(Models.Topics.SystemInformation);&#13;
	        if (value !== '') {&#13;
	            this.SystemInformation = JSON.parse(value);&#13;
	            this.evnt.Broadcast(Models.Topics.SystemInformation, this.SystemInformation);&#13;
	        }&#13;
	    };&#13;
	    AmazonConnect.prototype.removeCall = function (callId) {&#13;
	        this.store.RemoveKey("IsConsultCall");&#13;
	        this.store.RemoveKey("IsClickToCall");&#13;
	        var i;&#13;
	        var index = -1;&#13;
	        if (callId == "END") {&#13;
	            for (i = 0; i &lt; this.CallInfo.length; i++) {&#13;
	                var call = this.CallInfo.splice(index, 1);&#13;
	            }&#13;
	        }&#13;
	        else {&#13;
	            for (i = 0; i &lt; this.CallInfo.length; i++) {&#13;
	                if (this.CallInfo[i].Id = callId) {&#13;
	                    var call = this.CallInfo.splice(index, 1);&#13;
	                }&#13;
	            }&#13;
	        }&#13;
	        for (i = 0; i &lt; this.appService.CallResults.length; i++) {&#13;
	            this.appService.CallResults.splice(index, 1);&#13;
	        }&#13;
	        this.store.SetData(Models.Topics.CallDetail, JSON.stringify(this.CallInfo));&#13;
	        this.evnt.Broadcast(Models.Topics.CallDetail, this.CallInfo);&#13;
	    };&#13;
	    AmazonConnect.prototype.GetNotreadyReasonCodes = function () {&#13;
	        this.NotReadyReason = new Array();&#13;
	        for (var _i = 0, _a = this.AgentObj.getAgentStates(); _i &lt; _a.length; _i++) {&#13;
	            var code = _a[_i];&#13;
	            this.NotReadyReason.push(new Models.ReasonCode(code.type, code.name));&#13;
	        }&#13;
	        this.store.SetData(Models.Topics.NotReadyReasonCode, JSON.stringify(this.NotReadyReason));&#13;
	        this.evnt.Broadcast(Models.Topics.NotReadyReasonCode, this.NotReadyReason);&#13;
	    };&#13;
	    AmazonConnect.prototype.changeAgentState = function (state) {&#13;
	        var routableState = null;&#13;
	        var self = this;&#13;
	        if (state === 'Available') {&#13;
	            self.removeCall("END");&#13;
	            routableState = this.AgentObj.getAgentStates().filter(function (state) {&#13;
	                return state.type === connect.AgentStateType.ROUTABLE;&#13;
	            })[0];&#13;
	        }&#13;
	        else {&#13;
	            self.removeCall("END");&#13;
	            routableState = this.AgentObj.getAgentStates().filter(function (state) {&#13;
	                return state.type === connect.AgentStateType.NOT_ROUTABLE;&#13;
	            })[0];&#13;
	        }&#13;
	        this.AgentObj.setState(routableState, {&#13;
	            success: function () {&#13;
	                console.log('setState sucess');&#13;
	                self.AgentInfo.State = routableState.name;&#13;
	                self.store.SetData(Models.Topics.AgentDetail, JSON.stringify(self.AgentInfo));&#13;
	                self.evnt.Broadcast(Models.Topics.AgentDetail, self.AgentInfo);&#13;
	            },&#13;
	            failure: function (e) {&#13;
	                console.log('setState failure');&#13;
	            }&#13;
	        });&#13;
	    };&#13;
	    AmazonConnect.prototype.InboudCall = function () {&#13;
	        var attributes = this.ContactObj.getAttributes();&#13;
	        var ANINo = attributes["ANI"].value;&#13;
	        ANINo = ANINo.replace(/[^0-9 ]/g, "");&#13;
	        ANINo = ANINo.replace(/\s+/g, "");&#13;
	        var canAddCall = true;&#13;
	        this.getcallInfo(ANINo, attributes["IncidentNo"].value);&#13;
	        this.screenPop(ANINo, attributes["IncidentNo"].value);&#13;
	    };&#13;
	    AmazonConnect.prototype.screenPop = function (ANINo, IncidentNo) {&#13;
	        if (IncidentNo != null &amp;&amp; (IncidentNo.length == 7) &amp;&amp; this.appService.CRM == "SN") {&#13;
	            this.appService.ScreenpopOnIncidentId(IncidentNo, ANINo);&#13;
	        }&#13;
	        else {&#13;
	            this.appService.ScreenpopOnphno(ANINo);&#13;
	        }&#13;
	    };&#13;
	    AmazonConnect.prototype.getcallInfo = function (ANINo, IncidentNo) {&#13;
	        var canAddCall = true;&#13;
	        var calltype;&#13;
	        var IsClickToCall;&#13;
	        IsClickToCall = this.store.GetData("IsClickToCall");&#13;
	        if (!IsClickToCall) {&#13;
	            var call = new Models.CallInfo();&#13;
	            call._ani = ANINo;&#13;
	            call.From = ANINo;&#13;
	            call.State = this.AgentObj.getState().name;&#13;
	            call.IncidentNo = IncidentNo;&#13;
	            call.CallType = "INITIALCALL";&#13;
	            calltype = call.State;&#13;
	            call.Actions = this.parseCallAction(calltype);&#13;
	            IsClickToCall = this.store.GetData("IsClickToCall");&#13;
	            var Connectionobj = this.ContactObj.getConnections();&#13;
	            for (var i = 0; i &lt; Connectionobj.length; i++) {&#13;
	                if (Connectionobj[i].connectionId != Connectionobj[i].contactId) {&#13;
	                    call.Id = Connectionobj[i].connectionId;&#13;
	                    call.ConnectionID = Connectionobj[i].connectionId;&#13;
	                    call.ContactId = Connectionobj[i].contactId;&#13;
	                }&#13;
	            }&#13;
	            if (call.State.toUpperCase() === 'BUSY') {&#13;
	                this.store.SetData('isActiveCall', 'true');&#13;
	            }&#13;
	            for (var i_1 = 0; i_1 &lt; this.CallInfo.length; i_1++) {&#13;
	                var ca = this.CallInfo[i_1];&#13;
	                if (ca.Id === call.Id) {&#13;
	                    canAddCall = false;&#13;
	                }&#13;
	            }&#13;
	            if (canAddCall === true) {&#13;
	                this.CallInfo.push(call);&#13;
	            }&#13;
	            this.store.SetData(Models.Topics.CallDetail, JSON.stringify(this.CallInfo));&#13;
	            this.evnt.Broadcast(Models.Topics.CallDetail, this.CallInfo);&#13;
	        }&#13;
	        else {&#13;
	            var call = new Models.CallInfo();&#13;
	            call._ani = ANINo;&#13;
	            call.From = ANINo;&#13;
	            call.State = this.AgentObj.getState().name;&#13;
	            call.IncidentNo = "#";&#13;
	            call.Id = this.ContactObj.getContactId();&#13;
	            call.CallType = "CLICKTOCALL";&#13;
	            calltype = "CALLINGCUSTOMER";&#13;
	            call.Actions = this.parseCallAction(calltype);&#13;
	            this.CallInfo.push(call);&#13;
	            this.store.SetData(Models.Topics.CallDetail, JSON.stringify(this.CallInfo));&#13;
	            this.evnt.Broadcast(Models.Topics.CallDetail, this.CallInfo);&#13;
	        }&#13;
	    };&#13;
	    AmazonConnect.prototype.AgentLogout = function () {&#13;
	        var CCPURL = app_config_1.default.CCPURL;&#13;
	        var self = this;&#13;
	        window.open(CCPURL);&#13;
	    };&#13;
	    AmazonConnect.prototype.handleAgentLogout = function () {&#13;
	        this.AgentInfo.FirstName = "";&#13;
	        this.AgentInfo.State = "LOGOUT";&#13;
	        this.AgentInfo.Extension = "";&#13;
	        this.removeCall("END");&#13;
	        this.AgentInfo.StateChangeTime = this.AgentObj.getStateDuration();&#13;
	        this.store.SetData(Models.Topics.AgentDetail, JSON.stringify(this.AgentInfo));&#13;
	        this.evnt.Broadcast(Models.Topics.AgentDetail, this.AgentInfo);&#13;
	    };&#13;
	    AmazonConnect.prototype.getAgentInfo = function () {&#13;
	        this.AgentInfo.FirstName = this.AgentObj.getConfiguration().username;&#13;
	        this.AgentInfo.State = this.AgentObj.getState().name;&#13;
	        this.AgentInfo.Extension = this.AgentObj.getExtension();&#13;
	        if (this.AgentObj.getState().name === 'Available') {&#13;
	            this.removeCall("END");&#13;
	        }&#13;
	        this.AgentInfo.StateChangeTime = this.AgentObj.getStateDuration();&#13;
	        this.store.SetData(Models.Topics.AgentDetail, JSON.stringify(this.AgentInfo));&#13;
	        this.evnt.Broadcast(Models.Topics.AgentDetail, this.AgentInfo);&#13;
	    };&#13;
	    AmazonConnect.prototype.AddCallInfo = function (ANINo) {&#13;
	        var canAddCall = false;&#13;
	        var call = new Models.CallInfo();&#13;
	        call._ani = ANINo;&#13;
	        call.From = ANINo;&#13;
	        call.IncidentNo = "#";&#13;
	        call.CallType = "CONSULTCALL";&#13;
	        call.Actions = this.parseCallAction("DROP");&#13;
	        var Connectionobj = this.ContactObj.getConnections();&#13;
	        for (var i = 0; i &lt; Connectionobj.length; i++) {&#13;
	            if (Connectionobj[i].connectionId != Connectionobj[i].contactId) {&#13;
	                for (var j = 0; j &lt; this.CallInfo.length; j++) {&#13;
	                    if (this.CallInfo[j].ConnectionID == Connectionobj[i].connectionId) {&#13;
	                    }&#13;
	                    else {&#13;
	                        canAddCall = true;&#13;
	                        call.Id = Connectionobj[i].connectionId;&#13;
	                        call.ConnectionID = Connectionobj[i].connectionId;&#13;
	                        call.ContactId = Connectionobj[i].contactId;&#13;
	                    }&#13;
	                }&#13;
	            }&#13;
	        }&#13;
	        if (canAddCall == true) {&#13;
	            this.CallInfo.push(call);&#13;
	            this.CallInfo[0].Actions = this.parseCallAction("CONSULT");&#13;
	        }&#13;
	        this.store.SetData(Models.Topics.CallDetail, JSON.stringify(this.CallInfo));&#13;
	        this.evnt.Broadcast(Models.Topics.CallDetail, this.CallInfo);&#13;
	    };&#13;
	    AmazonConnect.prototype.updatecallresult = function (contact) {&#13;
	        var Connectionobj = this.ContactObj.getConnections();&#13;
	        var calltype = this.AgentObj.getState().name.toUpperCase();&#13;
	        var IsConsultCall = this.store.GetData("IsConsultCall");&#13;
	        this.CallInfo[0].Actions = this.parseCallAction(calltype);&#13;
	        this.store.SetData(Models.Topics.CallDetail, JSON.stringify(this.CallInfo));&#13;
	        this.evnt.Broadcast(Models.Topics.CallDetail, this.CallInfo);&#13;
	    };&#13;
	    AmazonConnect.prototype.AnswerCall = function (callId) {&#13;
	        this.ContactObj.accept({&#13;
	            success: function () {&#13;
	                console.log('AnswerCall success');&#13;
	            },&#13;
	            failure: function (e) {&#13;
	                console.log('AnswerCall failure' + e);&#13;
	            }&#13;
	        });&#13;
	    };&#13;
	    AmazonConnect.prototype.DropCall = function (callId) {&#13;
	        var Connectionobj = this.ContactObj.getConnections();&#13;
	        var self = this;&#13;
	        for (var i = 0; i &lt; Connectionobj.length; i++) {&#13;
	            if (Connectionobj[i].connectionId == callId) {&#13;
	                Connectionobj[i].destroy({&#13;
	                    success: function () {&#13;
	                        if (self.ContactObj.getSingleActiveThirdPartyConnection().connectionId == callId) {&#13;
	                            console.log('Droped');&#13;
	                            self.removeCall(callId);&#13;
	                        }&#13;
	                        if (Connectionobj[1].isOnHold()) {&#13;
	                            self.RetrieveCall(Connectionobj[0].connectionId);&#13;
	                        }&#13;
	                    },&#13;
	                    failure: function (e) {&#13;
	                        console.log('Droped Failed');&#13;
	                    }&#13;
	                });&#13;
	            }&#13;
	            var IsClickToCall = this.store.GetData("IsClickToCall");&#13;
	            if (IsClickToCall) {&#13;
	                // if (Connectionobj[i].contactId == callId) {&#13;
	                Connectionobj[i].destroy({&#13;
	                    success: function () {&#13;
	                        console.log('Droped');&#13;
	                        self.removeCall(callId);&#13;
	                    },&#13;
	                    failure: function (e) {&#13;
	                        console.log('Droped Failed');&#13;
	                    }&#13;
	                });&#13;
	            }&#13;
	        }&#13;
	    };&#13;
	    AmazonConnect.prototype.HoldCall = function (ConnectionID) {&#13;
	        var Connectionobj = this.ContactObj.getConnections();&#13;
	        var self = this;&#13;
	        for (var i = 0; i &lt; Connectionobj.length; i++) {&#13;
	            //  if (Connectionobj[i].connectionId == ConnectionID) {&#13;
	            Connectionobj[i].hold({&#13;
	                success: function () {&#13;
	                    console.log('Hold success');&#13;
	                    self.CallInfo[0].Actions = self.parseCallAction("HOLD");&#13;
	                    self.store.SetData(Models.Topics.CallDetail, JSON.stringify(self.CallInfo));&#13;
	                    self.evnt.Broadcast(Models.Topics.CallDetail, self.CallInfo);&#13;
	                },&#13;
	                failure: function (e) {&#13;
	                    console.log('Hold Failed');&#13;
	                }&#13;
	            });&#13;
	        }&#13;
	        // }&#13;
	    };&#13;
	    AmazonConnect.prototype.RetrieveCall = function (ConnectionID) {&#13;
	        var Connectionobj = this.ContactObj.getConnections();&#13;
	        var self = this;&#13;
	        for (var i = 0; i &lt; Connectionobj.length; i++) {&#13;
	            // if (Connectionobj[i].connectionId == ConnectionID) {&#13;
	            Connectionobj[i].resume({&#13;
	                success: function () {&#13;
	                    console.log('resume success');&#13;
	                    self.CallInfo[0].Actions = self.parseCallAction("BUSY");&#13;
	                    self.store.SetData(Models.Topics.CallDetail, JSON.stringify(self.CallInfo));&#13;
	                    self.evnt.Broadcast(Models.Topics.CallDetail, self.CallInfo);&#13;
	                },&#13;
	                failure: function (e) {&#13;
	                    console.log('resume Failed');&#13;
	                }&#13;
	            });&#13;
	        }&#13;
	        // }&#13;
	    };&#13;
	    AmazonConnect.prototype.toggleActiveConnections = function (CustomerNo) {&#13;
	        var self = this;&#13;
	        this.ContactObj.toggleActiveConnections({&#13;
	            success: function (e) {&#13;
	                self.AddCallInfo(CustomerNo);&#13;
	                console.log('success');&#13;
	            },&#13;
	            failure: function (e) {&#13;
	                console.log('failure');&#13;
	            }&#13;
	        });&#13;
	    };&#13;
	    AmazonConnect.prototype.ConsultCall = function (callId, CustomerNo) {&#13;
	        var self = this;&#13;
	        var endpoint = this.Connect.Endpoint.byPhoneNumber(CustomerNo);&#13;
	        this.ContactObj.addConnection(endpoint, {&#13;
	            success: function (e) {&#13;
	                self.store.SetData("IsConsultCall", "true");&#13;
	                self.toggleActiveConnections(CustomerNo);&#13;
	                console.log('success');&#13;
	            },&#13;
	            failure: function () {&#13;
	                console.log('failure');&#13;
	            }&#13;
	        });&#13;
	    };&#13;
	    AmazonConnect.prototype.DirectTransfer = function (callId, callState, agentId, userName) {&#13;
	    };&#13;
	    AmazonConnect.prototype.TransferCall = function (ConnectionID) {&#13;
	        var Connectionobj = this.ContactObj.getConnections();&#13;
	        for (var i = 0; i &lt; Connectionobj.length; i++) {&#13;
	            if (Connectionobj[i].connectionId == ConnectionID) {&#13;
	                Connectionobj[i].destroy({&#13;
	                    success: function () {&#13;
	                        console.log('Droped');&#13;
	                    },&#13;
	                    failure: function (e) {&#13;
	                        console.log('Droped Failed');&#13;
	                    }&#13;
	                });&#13;
	            }&#13;
	        }&#13;
	    };&#13;
	    AmazonConnect.prototype.ConferenceCall = function (callId) {&#13;
	        var self = this;&#13;
	        this.ContactObj.conferenceConnections({&#13;
	            success: function (e) {&#13;
	                console.log('success');&#13;
	                for (var i = 0; i &lt; self.CallInfo.length; i++) {&#13;
	                    if (self.CallInfo[i].Id == callId) {&#13;
	                        self.CallInfo[i].Actions = self.parseCallAction("CONFERENCE");&#13;
	                        self.store.SetData(Models.Topics.CallDetail, JSON.stringify(self.CallInfo));&#13;
	                        self.evnt.Broadcast(Models.Topics.CallDetail, self.CallInfo);&#13;
	                    }&#13;
	                }&#13;
	                //"CONFERENCE"&#13;
	            },&#13;
	            failure: function (e) {&#13;
	                console.log('failure');&#13;
	            }&#13;
	        });&#13;
	    };&#13;
	    AmazonConnect.prototype.AcceptConsultCall = function (callId) {&#13;
	    };&#13;
	    AmazonConnect.prototype.MakeCall = function (toaddress) {&#13;
	        toaddress = toaddress.replace(/[^0-9 ]/g, "");&#13;
	        toaddress = toaddress.replace(/\s+/g, "");&#13;
	        var self = this;&#13;
	        var endpoint = this.Connect.Endpoint.byPhoneNumber(toaddress);&#13;
	        this.AgentObj.connect(endpoint, {&#13;
	            success: function () {&#13;
	                console.log('MakeCall Success');&#13;
	                self.store.SetData("IsClickToCall", "true");&#13;
	                self.getcallInfo(toaddress, "");&#13;
	            },&#13;
	            failure: function (e) {&#13;
	                console.log('MakeCall failure');&#13;
	            }&#13;
	        });&#13;
	    };&#13;
	    AmazonConnect.prototype.parseCallAction = function (callType) {&#13;
	        var result = new Models.CallActions();&#13;
	        var IsClickToCall = this.store.GetData("IsClickToCall");&#13;
	        if (IsClickToCall) {&#13;
	            callType = "CALLINGCUSTOMER";&#13;
	        }&#13;
	        var actionArray = app_config_1.default.nextCallActions[callType.toUpperCase()];&#13;
	        for (var _i = 0, actionArray_1 = actionArray; _i &lt; actionArray_1.length; _i++) {&#13;
	            var action = actionArray_1[_i];&#13;
	            switch (action) {&#13;
	                case 'ANSWER':&#13;
	                    result.CanAnswer = true;&#13;
	                    break;&#13;
	                case 'HOLD':&#13;
	                    result.CanHold = true;&#13;
	                    break;&#13;
	                case 'RETRIEVE':&#13;
	                    result.CanRetrieve = true;&#13;
	                    break;&#13;
	                case 'DROP':&#13;
	                    result.CanDrop = true;&#13;
	                    break;&#13;
	                case 'CONSULT_CALL':&#13;
	                    result.CanConsult = true;&#13;
	                    break;&#13;
	                case 'TRANSFER_SST':&#13;
	                    result.CanTransferSST = true;&#13;
	                    break;&#13;
	                case 'CONFERENCE':&#13;
	                    result.CanConference = true;&#13;
	                    break;&#13;
	                case 'TRANSFER':&#13;
	                    result.CanTransfer = true;&#13;
	                    break;&#13;
	                case 'CONSULT_ACCEPT':&#13;
	                    result.CanAccept = true;&#13;
	                    break;&#13;
	                case 'PARTICIPANT_DROP':&#13;
	                    result.CanParticipantDrop = true;&#13;
	                    break;&#13;
	            }&#13;
	        }&#13;
	        //  }&#13;
	        return result;&#13;
	    };&#13;
	    return AmazonConnect;&#13;
	}());&#13;
	exports.AmazonConnect = AmazonConnect;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 70 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	connect.core.initCCP(containerDiv, {&#13;
	    ccpUrl:"https://acqueon-aec-prerelease.awsapps.com/connect/ccp",&#13;
	    loginPopup: true,         				&#13;
	    softphone: {             				&#13;
	        allowFramedSoftphone: false,													&#13;
	    }&#13;
	});&#13;
	&#13;
	&#13;
	&#13;
&#13;
&#13;
/***/ }),&#13;
/* 71 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "&lt;div class=\"skin-lightning\"&gt;&lt;router-outlet&gt;&lt;/router-outlet&gt;&lt;/div&gt;";&#13;
&#13;
/***/ }),&#13;
/* 72 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var __decorate = (this &amp;&amp; this.__decorate) || function (decorators, target, key, desc) {&#13;
	    var c = arguments.length, r = c &lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);&#13;
	    else for (var i = decorators.length - 1; i &gt;= 0; i--) if (d = decorators[i]) r = (c &lt; 3 ? d(r) : c &gt; 3 ? d(target, key, r) : d(target, key)) || r;&#13;
	    return c &gt; 3 &amp;&amp; r &amp;&amp; Object.defineProperty(target, key, r), r;&#13;
	};&#13;
	var __metadata = (this &amp;&amp; this.__metadata) || function (k, v) {&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.metadata === "function") return Reflect.metadata(k, v);&#13;
	};&#13;
	var core_1 = __webpack_require__(1);&#13;
	var router_1 = __webpack_require__(29);&#13;
	var app_service_1 = __webpack_require__(58);&#13;
	var Models = __webpack_require__(61);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var logger_1 = __webpack_require__(63);&#13;
	var MasterComponent = (function () {&#13;
	    function MasterComponent(sfAppService, router, zone) {&#13;
	        var _this = this;&#13;
	        this.sfAppService = sfAppService;&#13;
	        this.router = router;&#13;
	        this.zone = zone;&#13;
	        this.logger = new logger_1.CustomLogger('MasterComponent');&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.evntLst = new Array();&#13;
	        this.agent = new Models.Agent();&#13;
	        this.calls = new Array();&#13;
	        this.activeCall = null;&#13;
	        this.isUccx = false;&#13;
	        this.isIvr = false;&#13;
	        this.showClickToDial = false;&#13;
	        this.clickToDialMsg = 'Switch the agent to Not Ready to make call';&#13;
	        this.clickToDialNo = '';&#13;
	        this.successMessage = '';&#13;
	        this.displayMessage = '';&#13;
	        this.messageType = 'success';&#13;
	        this.messageTimer = null;&#13;
	        this.myPageUrl = '';&#13;
	        this.stateSessionClear = "INITIATED,NOT_READY"; //INITIATING,ALERTING,INITIATED,RESERVED_OUTBOUND_PREVIEW,RESERVED		&#13;
	        this.callTypeSessionClear = "OUTBOUND_DIRECT_PREVIEW,ACD_IN"; //OUTBOUND_DIRECT_PREVIEW,ACD_IN&#13;
	        this.isConnectionDroped = false;&#13;
	        this.isOk = true;&#13;
	        this.logoutReason = new Array();&#13;
	        this.logoutOrLogin = "Login";&#13;
	        this.logoutReason = this.sfAppService.LogoutReasonCode;&#13;
	        console.log('MasterComponent initialize');&#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.AgentDetail, function (event, data) {&#13;
	            _this.zone.run(function () {&#13;
	                _this.agent = data;&#13;
	            });&#13;
	        }));&#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.AgentDetail, function (event, data) {&#13;
	            _this.logger.Debug('On Agent State Change');&#13;
	            if (data.State == "LOGOUT") {&#13;
	                _this.logoutOrLogin = "Login";&#13;
	            }&#13;
	            else {&#13;
	                _this.logoutOrLogin = "Logout";&#13;
	            }&#13;
	        }));&#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.LogoutReasonCode, function (event, data) {&#13;
	            _this.zone.run(function () {&#13;
	                _this.logoutReason = data;&#13;
	            });&#13;
	        }));&#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.CallDetails, function (event, data) {&#13;
	            _this.zone.run(function () {&#13;
	                _this.calls = data;&#13;
	            });&#13;
	        }));&#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.CurrentCallDetail, function (event, data) {&#13;
	            _this.zone.run(function () {&#13;
	                console.log('master.components - CurrentCallDetail exe ');&#13;
	                if (data != null) {&#13;
	                    _this.calls = _this.sfAppService.CallDetails;&#13;
	                    _this.activeCall = data;&#13;
	                }&#13;
	                else {&#13;
	                }&#13;
	            });&#13;
	        }));&#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.SystemMessage, function (event, data) {&#13;
	            _this.zone.run(function () {&#13;
	                //Set the data to&#13;
	                _this.messageType = 'success';&#13;
	                if (data.Level === Models.Severity.Error) {&#13;
	                    _this.messageType = 'danger';&#13;
	                }&#13;
	                else if (data.Level === Models.Severity.Warn) {&#13;
	                    _this.messageType = 'warning';&#13;
	                }&#13;
	                _this.displayMessage = data.Msg;&#13;
	                _this.isOk = data.IsOk;&#13;
	                if (_this.messageTimer !== null) {&#13;
	                    clearTimeout(_this.messageTimer);&#13;
	                    _this.messageTimer = null;&#13;
	                }&#13;
	                _this.messageTimer = setTimeout(function () {&#13;
	                    _this.messageTimer = null;&#13;
	                    _this.displayMessage = '';&#13;
	                }, _this.sfAppService.MessageTimeout);&#13;
	            });&#13;
	        }));&#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.ClickToDial, function (event, data) {&#13;
	            //show the modal pop up based on the agent state check.&#13;
	            _this.zone.run(function () {&#13;
	                if (data.number) {&#13;
	                    _this.clickToDialNo = data.number;&#13;
	                    if (_this.agent.State === 'LOGOUT') {&#13;
	                        return;&#13;
	                    }&#13;
	                    else if (_this.agent.State === 'NOT_READY') {&#13;
	                        _this.logger.Info('ClickToDial - make call in Not Ready State to :' + data.number);&#13;
	                        _this.sfAppService.MakeCall(data.number);&#13;
	                    }&#13;
	                    else if (_this.agent.State === 'READY') {&#13;
	                        //BCode&#13;
	                        _this.showClickToDial = false;&#13;
	                        _this.sfAppService.MakeCall(data.number);&#13;
	                        _this.agent.State = 'READY';&#13;
	                        _this.logger.Info('ClickToDial - make call in Ready State :' + data.number);&#13;
	                    }&#13;
	                    else if (_this.calls.length === 1) {&#13;
	                        //Do you want to place the call in consult or conference.                    &#13;
	                        _this.clickToDialMsg = 'Do you want to make Consult or Transfer.';&#13;
	                        _this.showClickToDial = true;&#13;
	                    }&#13;
	                }&#13;
	            });&#13;
	        }));&#13;
	        this.zone.run(function () {&#13;
	            _this.agent = _this.sfAppService.AgentDetail;&#13;
	            _this.logoutReason = _this.sfAppService.LogoutReasonCode;&#13;
	            _this.calls = _this.sfAppService.CallDetails;&#13;
	            _this.activeCall = _this.sfAppService.Call;&#13;
	            //For Message Box Ok click NBC Start&#13;
	            // if (this.agent.State === 'LOGOUT'&amp;&amp; this.agent.LoginId==null) {&#13;
	            //     this.isConnectionDroped = true;&#13;
	            //     this.displayMessage = 'Acqueon connector isnâ€™t available!';&#13;
	            //     console.log('isConnectionDroped -' + this.activeCall, +this.isConnectionDroped)&#13;
	            // }&#13;
	            // else {          &#13;
	            //     this.isConnectionDroped = false;&#13;
	            //     console.log('isConnectionDroped false -' + this.activeCall, +this.isConnectionDroped)&#13;
	            // }&#13;
	            //NBC End&#13;
	        });&#13;
	    }&#13;
	    MasterComponent.prototype.ngOnDestroy = function () {&#13;
	        for (var _i = 0, _a = this.evntLst; _i &lt; _a.length; _i++) {&#13;
	            var id = _a[_i];&#13;
	            console.log('MasterComponent Unregister event');&#13;
	            this.evnt.UnRegisterEvent(id);&#13;
	        }&#13;
	    };&#13;
	    MasterComponent.prototype.onCallSelect = function (call) {&#13;
	        this.sfAppService.SetActiveCall(call);&#13;
	    };&#13;
	    MasterComponent.prototype.onMessageClose = function () {&#13;
	        if (this.messageTimer !== null) {&#13;
	            clearTimeout(this.messageTimer);&#13;
	            this.messageTimer = null;&#13;
	        }&#13;
	        this.displayMessage = '';&#13;
	        this.messageType = 'success';&#13;
	    };&#13;
	    MasterComponent.prototype.onErrorMessageClose = function () {&#13;
	        window.top.location.href = this.myPageUrl;&#13;
	    };&#13;
	    MasterComponent.prototype.routeToPath = function (path) {&#13;
	        console.log('Routing to path :', path);&#13;
	        this.router.navigate([path]);&#13;
	    };&#13;
	    MasterComponent.prototype.AgentLogout = function () {&#13;
	        this.logger.Debug('Master Component - AgentLogout .');&#13;
	        this.sfAppService.AgentLogout();&#13;
	    };&#13;
	    MasterComponent.prototype.ngOnInit = function () { };&#13;
	    MasterComponent.prototype.clickToDialAction = function (callAction) {&#13;
	        this.showClickToDial = false;&#13;
	        if (this.calls.length &gt; 0 &amp;&amp; (callAction === 'CONSULT' || callAction === 'SST')) {&#13;
	            var callId = this.calls[0].Id;&#13;
	            this.sfAppService.DoCallAction(callAction, { callId: callId, toAddress: this.clickToDialNo });&#13;
	        }&#13;
	    };&#13;
	    MasterComponent = __decorate([&#13;
	        //NBC&#13;
	        core_1.Component({&#13;
	            selector: 'master',&#13;
	            template: __webpack_require__(73),&#13;
	            styles: [__webpack_require__(74)]&#13;
	        }), &#13;
	        __metadata('design:paramtypes', [(typeof (_a = typeof app_service_1.SFAppService !== 'undefined' &amp;&amp; app_service_1.SFAppService) === 'function' &amp;&amp; _a) || Object, (typeof (_b = typeof router_1.Router !== 'undefined' &amp;&amp; router_1.Router) === 'function' &amp;&amp; _b) || Object, (typeof (_c = typeof core_1.NgZone !== 'undefined' &amp;&amp; core_1.NgZone) === 'function' &amp;&amp; _c) || Object])&#13;
	    ], MasterComponent);&#13;
	    return MasterComponent;&#13;
	    var _a, _b, _c;&#13;
	}());&#13;
	exports.MasterComponent = MasterComponent;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 73 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "&lt;div class=\"jumbotron sf-wrap sf-agent master-com\"&gt;\r\n    &lt;div class=\"sf-head\"&gt;\r\n        &lt;span class=\"icon-mini-logo pull-xs-left icon \"&gt;&lt;/span&gt;\r\n        &lt;div ngbDropdown class=\"d-block pull-xs-right btn-logout\"&gt;\r\n            \r\n            &lt;button  class=\"btn btn-sm btn-link\" id=\"dropdownMenu1\" ngbDropdownToggle title=\"User Profile\"&gt;\r\n                &lt;span class=\"icon icon-login-user\"&gt;&lt;/span&gt;\r\n            &lt;/button&gt;\r\n            &lt;div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\"&gt;\r\n                &lt;!-- &lt;button *ngFor=\"let code of logoutReason\" class=\"dropdown-item\" (click)=\"AgentLogout(code)\"&gt;{{code.Label}}&lt;/button&gt; --&gt;\r\n                &lt;button class=\"dropdown-item\" (click)=\"AgentLogout()\"&gt;{{logoutOrLogin}}&lt;/button&gt;\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n        &lt;span class=\"master-user-name text-truncate pull-xs-right\" [title]=\"agent.FirstName\"&gt;\r\n            {{agent.FirstName}}\r\n        &lt;/span&gt;\r\n    &lt;/div&gt;\r\n    &lt;div class=\"sf-banner\"&gt;\r\n        &lt;div class=\"panel\"&gt;\r\n            &lt;sf-agent&gt;&lt;/sf-agent&gt;\r\n            &lt;sf-call [call]=\"activeCall\" [agentState]=\"agent.State\" [showDialpad]=\"agent.State === 'Not Ready' || agent.State ==='Available'\"&gt;&lt;/sf-call&gt;\r\n            &lt;div *ngIf=\"calls.length &gt;0 &amp;&amp; activeCall != null\" class=\"btn-group line-nav\" data-toggle=\"buttons\"&gt;\r\n                &lt;label *ngFor=\"let call of calls; let i = index;\" [ngClass]=\"{'btn': true, 'btn-link': true, 'btn-sm': true, 'active': call.Id === activeCall.Id}\"\r\n                    (click)=\" onCallSelect(call)\"&gt;\r\n                    &lt;input type=\"radio\" name=\"line\" id=\"line1\" autocomplete=\"off\" checked&gt; Line {{i+1}}\r\n                &lt;/label&gt;\r\n            &lt;/div&gt;\r\n            &lt;div *ngIf=\"showClickToDial\" class=\"click-dial\"&gt;\r\n                &lt;span class=\"close\" (click)=\"clickToDialAction('')\"&gt;&amp;times;&lt;/span&gt;\r\n                &lt;p&gt;Switch the agent to Not Ready to make call.&lt;/p&gt;\r\n                &lt;div&gt;\r\n                    &lt;button *ngIf=\"agent.State === 'READY'\" class=\"btn btn-sm btn-success\" (click)=\"clickToDialAction('')\"&gt;Accept&lt;/button&gt;\r\n                    &lt;button *ngIf=\"agent.State !== 'READY'\" class=\"btn btn-sm btn-info\" (click)=\"clickToDialAction('CONSULT')\"&gt;Consult&lt;/button&gt;\r\n                    &lt;button *ngIf=\"agent.State !== 'READY' &amp;&amp; isUccx === false\" class=\"btn btn-sm btn-info\" (click)=\"clickToDialAction('SST')\"&gt;Transfer&lt;/button&gt;\r\n                    &lt;button class=\"btn btn-sm btn-danger\" (click)=\"clickToDialAction('')\"&gt;Reject&lt;/button&gt;\r\n\r\n                &lt;/div&gt;\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n    &lt;/div&gt;\r\n    &lt;div class=\"sf-content animated fadeIn\"&gt;\r\n    &lt;!--    &lt;div class=\"main-tab btn-group\" data-toggle=\"buttons\"&gt;\r\n            &lt;table class=\"table table-sm\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\"&gt;\r\n                &lt;tr&gt;\r\n                    &lt;td&gt;\r\n                        &lt;label title=\"Information\" class=\"btn btn-secondary btn-sm parentTabs active\" id=\"info_Tab\" (click)=\"routeToPath('/master/cr')\"&gt;\r\n                            &lt;span class=\"icon-info\"&gt;&lt;/span&gt;\r\n                            &lt;input type=\"radio\" name=\"maintab\" id=\"maintab1\" autocomplete=\"off\" checked&gt;\r\n                        &lt;/label&gt;\r\n                    &lt;/td&gt;\r\n                    &lt;td&gt;\r\n                        &lt;label title=\"Teams\" class=\"btn btn-secondary btn-sm parentTabs\" (click)=\"routeToPath('/master/team')\"&gt;\r\n                            &lt;span class=\"icon-group\"&gt;&lt;/span&gt;\r\n                            &lt;input type=\"radio\" name=\"maintab\" id=\"maintab3\" autocomplete=\"off\"&gt;\r\n                        &lt;/label&gt;\r\n                    &lt;/td&gt;\r\n                &lt;/tr&gt;\r\n            &lt;/table&gt;\r\n        &lt;/div&gt;--&gt;\r\n        &lt;ngb-alert class=\"sf-alert animated bounceInUp\" [dismissible]=\"false\" *ngIf=\"displayMessage\" type=\"{{messageType}}\" (close)=\"onMessageClose()\"&gt;\r\n            &lt;p&gt;{{ displayMessage }}&lt;/p&gt;\r\n            &lt;p&gt;\r\n                &lt;button *ngIf=\"!isConnectionDroped &amp;&amp; isOk\" class=\"btn btn-sm btn-warning\" (click)=\"onMessageClose()\"&gt;OK&lt;/button&gt;\r\n            &lt;/p&gt;\r\n            &lt;p&gt;\r\n                &lt;button *ngIf=\"isConnectionDroped\" class=\"btn btn-sm btn-warning\" (click)=\"onErrorMessageClose()\"&gt;OK&lt;/button&gt;\r\n            &lt;/p&gt;\r\n        &lt;/ngb-alert&gt;\r\n        &lt;router-outlet&gt;&lt;/router-outlet&gt;\r\n    &lt;/div&gt;\r\n    &lt;div class=\"sf-foot\"&gt;Powered by Acqueon&lt;/div&gt;\r\n&lt;/div&gt;";&#13;
&#13;
/***/ }),&#13;
/* 74 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "/** Acquone theme**/\n/** Acquone theme end**/\n/** Lightning Theme **/\n.skin-lightning .sf-agent .sf-head {\n  background-color: #004487; }\n  .skin-lightning .sf-agent .sf-head .icon-login-user {\n    border-radius: 50%;\n    font-size: 18px;\n    margin: 3px;\n    color: #fff; }\n  .skin-lightning .sf-agent .sf-head .icon-mini-logo {\n    background: url(\"/ui/images/acqueon-mini-logo.png\") no-repeat center;\n    height: 16px;\n    width: 16px;\n    background-size: cover;\n    margin: 7px 5px; }\n  .skin-lightning .sf-agent .sf-head .btn-user {\n    margin: 4px 0 0; }\n  .skin-lightning .sf-agent .sf-head .master-user-name {\n    font-size: 13px;\n    padding: 7px 0px; }\n  .skin-lightning .sf-agent .sf-head .dropdown-toggle::after {\n    display: none; }\n  .skin-lightning .sf-agent .sf-head .btn-logout .dropdown-menu {\n    background-color: #004487; }\n    .skin-lightning .sf-agent .sf-head .btn-logout .dropdown-menu .dropdown-item:first {\n      border-bottom: 1px solid gray; }\n    .skin-lightning .sf-agent .sf-head .btn-logout .dropdown-menu .dropdown-item:first-child {\n      border-bottom: 1px solid gray; }\n\n/** End of Lightning Theme **/\n/** Classic Theme **/\n.skin-classic .sf-agent .sf-head {\n  background-color: #f99b41; }\n  .skin-classic .sf-agent .sf-head .icon-login-user {\n    border-radius: 50%;\n    font-size: 18px;\n    margin: 3px;\n    color: #fff; }\n  .skin-classic .sf-agent .sf-head .icon-mini-logo {\n    background: url(\"/ui/images/acqueon-mini-logo.png\") no-repeat center;\n    height: 18px;\n    width: 18px;\n    background-size: cover;\n    margin: 7px 5px; }\n  .skin-classic .sf-agent .sf-head .btn-user {\n    margin: 4px 0 0; }\n  .skin-classic .sf-agent .sf-head .master-user-name {\n    font-size: 13px;\n    padding: 7px 0px; }\n  .skin-classic .sf-agent .sf-head .dropdown-toggle::after {\n    display: none; }\n  .skin-classic .sf-agent .sf-head .btn-logout .dropdown-menu {\n    background-color: #f99b41; }\n    .skin-classic .sf-agent .sf-head .btn-logout .dropdown-menu .dropdown-item:first {\n      border-bottom: 1px solid gray; }\n    .skin-classic .sf-agent .sf-head .btn-logout .dropdown-menu .dropdown-item:first-child {\n      border-bottom: 1px solid gray; }\n\n.skin-classic .sf-agent .sf-foot {\n  position: fixed;\n  bottom: 0px !important; }\n\n/** End of Classic Theme **/\n.sf-foot {\n  position: fixed;\n  bottom: 0px;\n  left: 0;\n  right: 0;\n  text-align: center;\n  font-size: 11px;\n  background: #999;\n  height: 26px;\n  line-height: 26px;\n  color: #fff; }\n\n.call-tab {\n  width: 100%;\n  padding: 0;\n  position: relative; }\n  .call-tab label {\n    float: left;\n    margin-bottom: 0; }\n    .call-tab label.btn {\n      outline: none;\n      font-size: 16px; }\n      .call-tab label.btn.active {\n        color: #f99b41;\n        border-bottom: transparent;\n        background-color: #fff; }\n\n.sf-detail {\n  height: 280px;\n  overflow: hidden;\n  overflow-y: auto;\n  position: relative; }\n  .sf-detail::-webkit-scrollbar {\n    width: 6px; }\n  .sf-detail::-webkit-scrollbar-track {\n    background-color: rgba(250, 250, 250, 0.4);\n    border-radius: 3px; }\n  .sf-detail::-webkit-scrollbar-thumb {\n    border-radius: 6px;\n    background-color: rgba(102, 102, 102, 0.2); }\n  .sf-detail .panel {\n    margin: 3px; }\n    .sf-detail .panel .row {\n      border-bottom: 1px solid rgba(102, 102, 102, 0.2);\n      margin: 0 -5px;\n      padding: 5px 0;\n      font-size: 12px;\n      color: #000; }\n      .sf-detail .panel .row &gt; div {\n        padding-left: 5px;\n        padding-right: 5px; }\n      .sf-detail .panel .row:first-child {\n        color: #999;\n        font-family: 'open_sanslight'; }\n      .sf-detail .panel .row:last-child {\n        border-bottom: 0; }\n\n.main-tab {\n  width: 100%;\n  height: 30px;\n  margin: -1px;\n  border-bottom: 1px solid #ccc; }\n  .main-tab [type=\"checkbox\"],\n  .main-tab [type=\"radio\"] {\n    display: none; }\n  .main-tab table {\n    margin-bottom: 0; }\n    .main-tab table td {\n      padding: 0; }\n      .main-tab table td label {\n        float: left;\n        width: 100%;\n        margin-bottom: 0; }\n        .main-tab table td label.btn {\n          background-color: transparent;\n          border: 0px;\n          outline: none;\n          border-right: 1px solid rgba(250, 250, 250, 0.4);\n          padding: 4px 0;\n          border-radius: 0; }\n          .main-tab table td label.btn.active {\n            background-color: transparent;\n            color: #f99b41; }\n          .main-tab table td label.btn:last-child {\n            border-right: 0px; }\n\n.sub-tab {\n  position: relative; }\n  .sub-tab .panel-title .search-box {\n    position: absolute;\n    right: 5px;\n    top: 0px;\n    margin: 0; }\n    .sub-tab .panel-title .search-box &gt; label {\n      position: absolute;\n      right: 2px;\n      top: 5px;\n      cursor: pointer;\n      z-index: 1; }\n    .sub-tab .panel-title .search-box .form-control {\n      width: 10px;\n      top: 0px;\n      float: right;\n      position: relative;\n      height: 22px;\n      right: 0;\n      border: 0;\n      background-color: #e6e7e8;\n      font-size: 11px;\n      transition: all 0.3s ease-in-out; }\n      .sub-tab .panel-title .search-box .form-control:focus {\n        width: 190px;\n        padding-right: 20px;\n        background: #fff; }\n  .sub-tab .card {\n    background-color: #fff;\n    overflow: hidden;\n    overflow-y: auto;\n    border: 0;\n    margin-bottom: 0px; }\n  .sub-tab .card-header {\n    padding: 5px 5px 5px 10px;\n    font-weight: bold; }\n    .sub-tab .card-header &gt; a {\n      display: block;\n      width: 100%;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n      outline: none;\n      text-decoration: none;\n      position: relative;\n      color: #333; }\n      .sub-tab .card-header &gt; a:after {\n        content: \"+\";\n        position: absolute;\n        right: 0px;\n        background-color: rgba(102, 102, 102, 0.2);\n        width: 20px;\n        height: 20px;\n        text-align: center; }\n    .sub-tab .card-header.active &gt; a:after {\n      content: \"-\"; }\n  .sub-tab .card-block {\n    padding: 0px 3px;\n    background-color: #fff;\n    margin-bottom: 0px; }\n\n.line-nav {\n  text-align: left;\n  margin-top: 10px;\n  border-top: 1px dashed #ddd;\n  width: 100%; }\n  .line-nav label {\n    margin-bottom: 0;\n    width: 25%; }\n    .line-nav label.btn {\n      padding: 5px 0;\n      color: #999;\n      outline: none;\n      text-align: center;\n      font-size: 13px;\n      float: inherit;\n      line-height: 10px;\n      position: relative;\n      margin-bottom: -4px; }\n      .line-nav label.btn:hover {\n        text-decoration: none; }\n      .line-nav label.btn.active {\n        background-color: rgba(250, 250, 250, 0.4);\n        color: #000;\n        border-radius: 0;\n        font-weight: bold; }\n\n.sf-alert {\n  position: absolute;\n  z-index: 9;\n  right: 0;\n  left: 0;\n  bottom: 60;\n  padding: 0 5px 5px; }\n  .sf-alert .alert {\n    padding: 3px;\n    text-align: center;\n    border: 1px solid;\n    font-weight: bold; }\n"&#13;
&#13;
/***/ }),&#13;
/* 75 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var __decorate = (this &amp;&amp; this.__decorate) || function (decorators, target, key, desc) {&#13;
	    var c = arguments.length, r = c &lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);&#13;
	    else for (var i = decorators.length - 1; i &gt;= 0; i--) if (d = decorators[i]) r = (c &lt; 3 ? d(r) : c &gt; 3 ? d(target, key, r) : d(target, key)) || r;&#13;
	    return c &gt; 3 &amp;&amp; r &amp;&amp; Object.defineProperty(target, key, r), r;&#13;
	};&#13;
	var __metadata = (this &amp;&amp; this.__metadata) || function (k, v) {&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.metadata === "function") return Reflect.metadata(k, v);&#13;
	};&#13;
	var core_1 = __webpack_require__(1);&#13;
	var app_service_1 = __webpack_require__(58);&#13;
	var storage_1 = __webpack_require__(66); //NBC&#13;
	var router_1 = __webpack_require__(29);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var app_config_1 = __webpack_require__(62);&#13;
	var CallResultComponent = (function () {&#13;
	    function CallResultComponent(appService, router, zone) {&#13;
	        var _this = this;&#13;
	        this.appService = appService;&#13;
	        this.router = router;&#13;
	        this.zone = zone;&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.store = storage_1.default.getInstance();&#13;
	        this.evntLst = new Array();&#13;
	        this.canShowCallInfo = true;&#13;
	        this.canShowCallWrap = true;&#13;
	        this.canShowCallIncidents = true;&#13;
	        this.activeCall = null; //NBC&#13;
	        this.agentState = 'LOGOUT';&#13;
	        this.InboundDefaultTab = app_config_1.default.InboundDefaultTab;&#13;
	        this.ShowIncidentTab = app_config_1.default.CRM == "SN" ? true : false;&#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.appService.TopicList.AgentDetail, function (type, data) {&#13;
	            _this.zone.run(function () {&#13;
	                _this.agentState = data.State;&#13;
	                _this.onagentstatechange();&#13;
	            });&#13;
	        }));&#13;
	        //NBC Start&#13;
	        this.zone.run(function () {&#13;
	        });&#13;
	        //NBC End&#13;
	    }&#13;
	    CallResultComponent.prototype.onagentstatechange = function () {&#13;
	        if (this.appService.AgentDetail.State == "Available") {&#13;
	            this.canShowCallInfo = true;&#13;
	            this.canShowCallIncidents = this.ShowIncidentTab;&#13;
	            this.canShowCallWrap = true;&#13;
	        }&#13;
	        else if (this.appService.AgentDetail.State == "Unavailable") {&#13;
	            this.canShowCallInfo = true;&#13;
	            this.canShowCallIncidents = this.ShowIncidentTab;&#13;
	            this.canShowCallWrap = true;&#13;
	            if (this.appService.Call != null) {&#13;
	                if (this.appService.Call.State == "Incoming" || this.appService.Call.State == "Holding" || this.appService.Call.State == "Active") {&#13;
	                    this.canShowCallWrap = false;&#13;
	                }&#13;
	            }&#13;
	        }&#13;
	    };&#13;
	    CallResultComponent.prototype.ngOnInit = function () {&#13;
	        var _this = this;&#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.appService.TopicList.CurrentCallResult, function (topic, data) {&#13;
	            _this.changeDisplayOption(data);&#13;
	        }));&#13;
	    };&#13;
	    CallResultComponent.prototype.changeDisplayOption = function (data) {&#13;
	        if (data != null) {&#13;
	            this.canShowCallInfo = true;&#13;
	            this.canShowCallIncidents = this.ShowIncidentTab;&#13;
	            this.canShowCallWrap = true;&#13;
	            if (data.Call != undefined &amp;&amp; data.Call.State == "Busy") {&#13;
	            }&#13;
	            else if (this.appService.AgentDetail.State == "Unavailable") {&#13;
	                this.canShowCallWrap = false;&#13;
	            }&#13;
	        }&#13;
	        else {&#13;
	            this.canShowCallInfo = true;&#13;
	            this.canShowCallIncidents = this.ShowIncidentTab;&#13;
	            this.canShowCallWrap = true;&#13;
	        }&#13;
	    };&#13;
	    CallResultComponent.prototype.ngOnDestroy = function () {&#13;
	        for (var _i = 0, _a = this.evntLst; _i &lt; _a.length; _i++) {&#13;
	            var id = _a[_i];&#13;
	            console.log('Businessfields Unregister event');&#13;
	            this.evnt.UnRegisterEvent(id);&#13;
	        }&#13;
	    };&#13;
	    CallResultComponent.prototype.routeToPath = function (path) {&#13;
	        console.log('Routing to path :', path);&#13;
	        this.router.navigate([path]);&#13;
	    };&#13;
	    CallResultComponent = __decorate([&#13;
	        core_1.Component({&#13;
	            selector: 'call-result',&#13;
	            template: __webpack_require__(76),&#13;
	            styles: [__webpack_require__(77)]&#13;
	        }), &#13;
	        __metadata('design:paramtypes', [(typeof (_a = typeof app_service_1.SFAppService !== 'undefined' &amp;&amp; app_service_1.SFAppService) === 'function' &amp;&amp; _a) || Object, (typeof (_b = typeof router_1.Router !== 'undefined' &amp;&amp; router_1.Router) === 'function' &amp;&amp; _b) || Object, (typeof (_c = typeof core_1.NgZone !== 'undefined' &amp;&amp; core_1.NgZone) === 'function' &amp;&amp; _c) || Object])&#13;
	    ], CallResultComponent);&#13;
	    return CallResultComponent;&#13;
	    var _a, _b, _c;&#13;
	}());&#13;
	exports.CallResultComponent = CallResultComponent;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 76 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "&lt;div class=\"call-tab  btn-group call-result-com\" data-toggle=\"buttons\"&gt;\r\n        &lt;table class=\"table table-sm\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\"&gt;\r\n            &lt;tr&gt;\r\n                &lt;td valign=\"top\" *ngIf=\"canShowCallInfo\"&gt;\r\n                    &lt;label class=\"btn btn-secondary btn-sm childTabs active\" (click)=\"routeToPath('/master/cr/info')\" id=\"info\" title=\"Call Information\"&gt;\r\n                        &lt;span class=\"icon-call-info\"&gt;&lt;/span&gt;\r\n                        &lt;input type=\"radio\" name=\"options\" id=\"option1\" autocomplete=\"off\"&gt;\r\n                    &lt;/label&gt;\r\n                &lt;/td&gt;\r\n                &lt;!-- Added by Prakash --&gt;\r\n                &lt;td *ngIf=\"canShowCallIncidents\"&gt;\r\n                    &lt;label class=\"btn btn-secondary btn-sm childTabs\" (click)=\"routeToPath('/master/cr/incident')\" id=\"incident\" title=\"Caller Incidents\"&gt;\r\n                        &lt;span class=\"icon-call-variable\"&gt;&lt;/span&gt;\r\n                        &lt;input type=\"radio\" name=\"options\" id=\"option2\" autocomplete=\"off\"&gt;\r\n                    &lt;/label&gt;\r\n                &lt;/td&gt;\r\n                &lt;td *ngIf=\"canShowCallWrap\"&gt;\r\n                    &lt;label class=\"btn btn-secondary btn-sm childTabs\" (click)=\"routeToPath('/master/cr/wrap')\" id=\"wrap\" title=\"Call Log\"&gt;\r\n                        &lt;span class=\"icon-call-wrapup\"&gt;&lt;/span&gt;\r\n                        &lt;input type=\"radio\" name=\"options\" id=\"option3\" autocomplete=\"off\"&gt;\r\n                    &lt;/label&gt;\r\n                &lt;/td&gt;\r\n            &lt;/tr&gt;\r\n            \r\n        &lt;/table&gt;\r\n    &lt;/div&gt;\r\n    &lt;router-outlet&gt;&lt;/router-outlet&gt;";&#13;
&#13;
/***/ }),&#13;
/* 77 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "/** Acquone theme**/\n/** Acquone theme end**/\n.call-tab [type=\"checkbox\"], .call-tab [type=\"radio\"] {\n  display: none; }\n\n.call-tab table {\n  margin-bottom: 0; }\n  .call-tab table td {\n    padding: 0; }\n    .call-tab table td label.btn {\n      display: block;\n      width: 100%;\n      border-radius: 0;\n      border-left: 0px;\n      padding: 5px 0; }\n\n.parentTabs {\n  font-size: 18px;\n  height: 28px;\n  margin-left: 0px; }\n  .parentTabs:hover {\n    background-color: #e6e6e6 !important;\n    border-color: #adadad;\n    border: none;\n    border: 1px 0 1px 0 solid; }\n\n/** Lightning Theme **/\n.skin-lightning .parentTabs.active {\n  border-bottom: 2px solid #004487 !important; }\n  .skin-lightning .parentTabs.active .icon-info:before, .skin-lightning .parentTabs.active .icon-group:before, .skin-lightning .parentTabs.active .icon-ivr:before, .skin-lightning .parentTabs.active .icon-queue:before {\n    color: #004487;\n    background-color: transparent; }\n\n.skin-lightning .parentTabs .icon-info:before, .skin-lightning .parentTabs .icon-group:before, .skin-lightning .parentTabs .icon-ivr:before, .skin-lightning .parentTabs .icon-queue:before {\n  color: #969492; }\n\n.skin-lightning .childTabs.active .icon-call-info:before, .skin-lightning .childTabs.active .icon-non-pewc:before, .skin-lightning .childTabs.active .icon-call-variable:before, .skin-lightning .childTabs.active .icon-call-wrapup:before, .skin-lightning .childTabs.active .icon-business-field:before, .skin-lightning .childTabs.active .icon-change-number:before {\n  color: #004487; }\n\n.skin-lightning .childTabs .icon-call-info:before, .skin-lightning .childTabs .icon-non-pewc:before, .skin-lightning .childTabs .icon-call-variable:before, .skin-lightning .childTabs .icon-call-wrapup:before, .skin-lightning .childTabs .icon-business-field:before, .skin-lightning .childTabs .icon-change-number:before {\n  color: #969492; }\n\n.skin-lightning .call-tab label.btn.active {\n  color: #004487;\n  border-bottom: transparent;\n  background-color: #fff; }\n\n/** End of Lightning Theme **/\n/** Classic Theme **/\n.skin-classic .parentTabs.active {\n  border-bottom: 2px solid #f99b41 !important; }\n  .skin-classic .parentTabs.active .icon-info:before, .skin-classic .parentTabs.active .icon-group:before, .skin-classic .parentTabs.active .icon-ivr:before, .skin-classic .parentTabs.active .icon-queue:before {\n    color: #f99b41;\n    background-color: transparent; }\n\n.skin-classic .parentTabs .icon-info:before, .skin-classic .parentTabs .icon-group:before, .skin-classic .parentTabs .icon-ivr:before, .skin-classic .parentTabs .icon-queue:before {\n  color: #969492; }\n\n.skin-classic .childTabs.active .icon-call-info:before, .skin-classic .childTabs.active .icon-non-pewc:before, .skin-classic .childTabs.active .icon-call-variable:before, .skin-classic .childTabs.active .icon-call-wrapup:before, .skin-classic .childTabs.active .icon-business-field:before, .skin-classic .childTabs.active .icon-change-number:before {\n  color: #f99b41; }\n\n.skin-classic .childTabs .icon-call-info:before, .skin-classic .childTabs .icon-non-pewc:before, .skin-classic .childTabs .icon-call-variable:before, .skin-classic .childTabs .icon-call-wrapup:before, .skin-classic .childTabs .icon-business-field:before, .skin-classic .childTabs .icon-change-number:before {\n  color: #969492; }\n\n.skin-classic .call-tab label.btn.active {\n  color: #004487;\n  border-bottom: transparent;\n  background-color: #fff; }\n\n/** End of Classic Theme **/\n"&#13;
&#13;
/***/ }),&#13;
/* 78 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var __decorate = (this &amp;&amp; this.__decorate) || function (decorators, target, key, desc) {&#13;
	    var c = arguments.length, r = c &lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);&#13;
	    else for (var i = decorators.length - 1; i &gt;= 0; i--) if (d = decorators[i]) r = (c &lt; 3 ? d(r) : c &gt; 3 ? d(target, key, r) : d(target, key)) || r;&#13;
	    return c &gt; 3 &amp;&amp; r &amp;&amp; Object.defineProperty(target, key, r), r;&#13;
	};&#13;
	var __metadata = (this &amp;&amp; this.__metadata) || function (k, v) {&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.metadata === "function") return Reflect.metadata(k, v);&#13;
	};&#13;
	var core_1 = __webpack_require__(1);&#13;
	var app_service_1 = __webpack_require__(58);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var $ = __webpack_require__(64);&#13;
	var CallInfoComponent = (function () {&#13;
	    function CallInfoComponent(sfAppService, zone) {&#13;
	        var _this = this;&#13;
	        this.sfAppService = sfAppService;&#13;
	        this.zone = zone;&#13;
	        this.call = null;&#13;
	        this.callStateTimerId = null;&#13;
	        this.callStateTime = '00:00';&#13;
	        this.callStateTimeOverall = '00:00';&#13;
	        this.ANI = "";&#13;
	        this.IncidentNo = "";&#13;
	        this.queue = "";&#13;
	        this.ContactId = "";&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.evntLst = new Array();&#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.CurrentCallDetail, function (type, data) {&#13;
	            _this.zone.run(function () {&#13;
	                console.log('call-info.components - CurrentCallDetail : ', data);&#13;
	                _this.call = data;&#13;
	                _this.setCallStateTime();&#13;
	            });&#13;
	        }));&#13;
	        this.zone.run(function () {&#13;
	            _this.call = _this.sfAppService.Call;&#13;
	            _this.setCallStateTime();&#13;
	            _this.setvaluesforcallinfo();&#13;
	            $('.call-result-com td label').removeClass("active");&#13;
	            $('#intoTab').addClass("active");&#13;
	        });&#13;
	    }&#13;
	    CallInfoComponent.prototype.ngOnDestroy = function () {&#13;
	        for (var _i = 0, _a = this.evntLst; _i &lt; _a.length; _i++) {&#13;
	            var id = _a[_i];&#13;
	            console.log('AgentState Unregister event');&#13;
	            this.evnt.UnRegisterEvent(id);&#13;
	        }&#13;
	        if (this.callStateTimerId !== null) {&#13;
	            clearInterval(this.callStateTimerId);&#13;
	        }&#13;
	    };&#13;
	    CallInfoComponent.prototype.setvaluesforcallinfo = function () {&#13;
	        if (window.addEventListener) {&#13;
	            window.addEventListener("message", topFrameListener);&#13;
	        }&#13;
	        var self = this;&#13;
	        function topFrameListener() {&#13;
	            self.ANI = self.sfAppService.ANI;&#13;
	            self.IncidentNo = self.sfAppService.IncidentNo;&#13;
	            self.queue = self.sfAppService.queue;&#13;
	            self.ContactId = self.sfAppService.ContactId;&#13;
	        }&#13;
	    };&#13;
	    CallInfoComponent.prototype.setCallStateTime = function () {&#13;
	        var _this = this;&#13;
	        if (this.call !== null) {&#13;
	            this.callStateTime = this.sfAppService.GetElapsedTime(this.call.StateChangeTime);&#13;
	            this.callStateTimeOverall = this.sfAppService.GetElapsedTime(this.call.StartTime);&#13;
	            if (this.callStateTimerId === null) {&#13;
	                this.callStateTimerId = setInterval(function () {&#13;
	                    if (_this.call !== null) {&#13;
	                        _this.callStateTime = _this.sfAppService.GetElapsedTime(_this.call.StateChangeTime);&#13;
	                        _this.callStateTimeOverall = _this.sfAppService.GetElapsedTime(_this.call.StartTime);&#13;
	                    }&#13;
	                }, 1000);&#13;
	            }&#13;
	        }&#13;
	        else if (this.callStateTimerId !== null) {&#13;
	            clearInterval(this.callStateTimerId);&#13;
	            this.callStateTimerId = null;&#13;
	            this.callStateTime = '00:00';&#13;
	            this.callStateTimeOverall = '00:00';&#13;
	        }&#13;
	    };&#13;
	    CallInfoComponent = __decorate([&#13;
	        core_1.Component({&#13;
	            selector: 'call-info',&#13;
	            template: __webpack_require__(79),&#13;
	            styles: [__webpack_require__(80)]&#13;
	        }), &#13;
	        __metadata('design:paramtypes', [(typeof (_a = typeof app_service_1.SFAppService !== 'undefined' &amp;&amp; app_service_1.SFAppService) === 'function' &amp;&amp; _a) || Object, (typeof (_b = typeof core_1.NgZone !== 'undefined' &amp;&amp; core_1.NgZone) === 'function' &amp;&amp; _b) || Object])&#13;
	    ], CallInfoComponent);&#13;
	    return CallInfoComponent;&#13;
	    var _a, _b;&#13;
	}());&#13;
	exports.CallInfoComponent = CallInfoComponent;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 79 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "&lt;div class=\"panel info-panel call-info-com\"&gt;\r\n        &lt;div class=\"row info-title\"&gt;\r\n            &lt;div class=\"col-xs-12\"&gt;Call Information&lt;/div&gt;\r\n        &lt;/div&gt;\r\n        &lt;div class=\"info-records\"&gt;           \r\n            &lt;div class=\"row info-record\"&gt;\r\n                &lt;div class=\"col-xs-6\"&gt;ANI&lt;/div&gt;\r\n                &lt;div class=\"col-xs-6\"&gt;{{call!= null ? call.From : ''}}&lt;/div&gt;\r\n            &lt;/div&gt;\r\n            &lt;!-- &lt;div class=\"row info-record\"&gt;\r\n                &lt;div class=\"col-xs-6\"&gt;Dialed Numbers&lt;/div&gt;\r\n                &lt;div class=\"col-xs-6\"&gt;{{call!= null ? call.DialedNumber : ''}}&lt;/div&gt;\r\n            &lt;/div&gt; --&gt;\r\n            &lt;div class=\"row info-record\"&gt;\r\n                &lt;div class=\"col-xs-6\"&gt;Incident No&lt;/div&gt;\r\n                &lt;div class=\"col-xs-6\"&gt;{{call!= null ? call.IncidentNo : ''}}&lt;/div&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"row info-record\"&gt;\r\n                &lt;div class=\"col-xs-6\"&gt;State&lt;/div&gt;\r\n                &lt;div class=\"col-xs-6\"&gt;{{call!= null ? call.State : ''}}&lt;/div&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"row info-record\"&gt;\r\n                    &lt;div class=\"col-xs-6\"&gt;ContactId&lt;/div&gt;\r\n                    &lt;div class=\"col-xs-6\"&gt;{{call!= null ? call.Id : ''}}&lt;/div&gt;\r\n                &lt;/div&gt;\r\n        &lt;/div&gt;\r\n    &lt;/div&gt;";&#13;
&#13;
/***/ }),&#13;
/* 80 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = ".panel.call-info-com .info-records {\n  height: 225px;\n  overflow-y: auto;\n  overflow-x: hidden; }\n"&#13;
&#13;
/***/ }),&#13;
/* 81 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var __decorate = (this &amp;&amp; this.__decorate) || function (decorators, target, key, desc) {&#13;
	    var c = arguments.length, r = c &lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);&#13;
	    else for (var i = decorators.length - 1; i &gt;= 0; i--) if (d = decorators[i]) r = (c &lt; 3 ? d(r) : c &gt; 3 ? d(target, key, r) : d(target, key)) || r;&#13;
	    return c &gt; 3 &amp;&amp; r &amp;&amp; Object.defineProperty(target, key, r), r;&#13;
	};&#13;
	var __metadata = (this &amp;&amp; this.__metadata) || function (k, v) {&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.metadata === "function") return Reflect.metadata(k, v);&#13;
	};&#13;
	var core_1 = __webpack_require__(1);&#13;
	var app_service_1 = __webpack_require__(58);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var logger_1 = __webpack_require__(63);&#13;
	var CallVarComponent = (function () {&#13;
	    function CallVarComponent(sfAppService, zone) {&#13;
	        //console.log('%c REGISTER ', 'color:#AA8000'); &#13;
	        this.sfAppService = sfAppService;&#13;
	        this.zone = zone;&#13;
	        this.logger = new logger_1.CustomLogger('CallVarComponent');&#13;
	        this.callRes = null;&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.evntLst = new Array();&#13;
	    }&#13;
	    CallVarComponent.prototype.ngOnInit = function () {&#13;
	    };&#13;
	    CallVarComponent.prototype.ngOnDestroy = function () {&#13;
	    };&#13;
	    CallVarComponent = __decorate([&#13;
	        core_1.Component({&#13;
	            selector: 'call-var',&#13;
	            template: __webpack_require__(82),&#13;
	            styles: [__webpack_require__(83)]&#13;
	        }), &#13;
	        __metadata('design:paramtypes', [(typeof (_a = typeof app_service_1.SFAppService !== 'undefined' &amp;&amp; app_service_1.SFAppService) === 'function' &amp;&amp; _a) || Object, (typeof (_b = typeof core_1.NgZone !== 'undefined' &amp;&amp; core_1.NgZone) === 'function' &amp;&amp; _b) || Object])&#13;
	    ], CallVarComponent);&#13;
	    return CallVarComponent;&#13;
	    var _a, _b;&#13;
	}());&#13;
	exports.CallVarComponent = CallVarComponent;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 82 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "&lt;div class=\"panel info-panel call-var-com\"&gt;\r\n    &lt;div class=\"row info-title\"&gt;\r\n        &lt;div class=\"col-xs-12\"&gt;Call Variable Result&lt;/div&gt;\r\n    &lt;/div&gt;\r\n    &lt;div *ngIf=\"callRes !== null &amp;&amp; callRes.ResultFld !== null\" class=\"info-records\"&gt;\r\n        &lt;div class=\"row info-record\" *ngFor=\"let v of callRes.ResultFld\"&gt;\r\n            &lt;div class=\"col-xs-6\"&gt;{{v.Label}}&lt;/div&gt;\r\n            &lt;div class=\"col-xs-6\"&gt;{{v.Key}}&lt;/div&gt;\r\n        &lt;/div&gt;\r\n    &lt;/div&gt;\r\n&lt;/div&gt;";&#13;
&#13;
/***/ }),&#13;
/* 83 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = ".panel.call-var-com .info-records {\n  height: 225px;\n  overflow-y: auto;\n  overflow-x: hidden; }\n"&#13;
&#13;
/***/ }),&#13;
/* 84 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var __decorate = (this &amp;&amp; this.__decorate) || function (decorators, target, key, desc) {&#13;
	    var c = arguments.length, r = c &lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);&#13;
	    else for (var i = decorators.length - 1; i &gt;= 0; i--) if (d = decorators[i]) r = (c &lt; 3 ? d(r) : c &gt; 3 ? d(target, key, r) : d(target, key)) || r;&#13;
	    return c &gt; 3 &amp;&amp; r &amp;&amp; Object.defineProperty(target, key, r), r;&#13;
	};&#13;
	var __metadata = (this &amp;&amp; this.__metadata) || function (k, v) {&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.metadata === "function") return Reflect.metadata(k, v);&#13;
	};&#13;
	var core_1 = __webpack_require__(1);&#13;
	var Models = __webpack_require__(61);&#13;
	var app_service_1 = __webpack_require__(58);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var logger_1 = __webpack_require__(63);&#13;
	var app_config_1 = __webpack_require__(62);&#13;
	var CallWrapComponent = (function () {&#13;
	    function CallWrapComponent(sfAppService, zone) {&#13;
	        var _this = this;&#13;
	        this.sfAppService = sfAppService;&#13;
	        this.zone = zone;&#13;
	        //subscribe &#13;
	        this.logger = new logger_1.CustomLogger('CallWrapComponent');&#13;
	        this.v = new validation_1.Validation();&#13;
	        this.evntLst = new Array();&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.callRes = null;&#13;
	        this.rValue = true;&#13;
	        this.wrapupLst = new Array();&#13;
	        this.comment = '';&#13;
	        this.whoLst = new Array();&#13;
	        this.whatLst = new Array();&#13;
	        this.selectedWrapup = '';&#13;
	        this.selectedWho = '';&#13;
	        this.selectedWhat = '';&#13;
	        /**Commented by Prakash */&#13;
	        // public selectedWrapup: string = '';&#13;
	        // public selectedWho: SFObject;&#13;
	        // public selectedWhat: SFObject;&#13;
	        // public whoLst: SFObject[] = new Array&lt;SFObject&gt;();&#13;
	        // public whatLst: SFObject[] = new Array&lt;SFObject&gt;();&#13;
	        this.noWrapupState = 'ACD_IN,PREROUTE_ACD_IN';&#13;
	        /**Added by Prakash */&#13;
	        this.additionalComments = "Additional Comments";&#13;
	        this.workNotes = "Work Notes";&#13;
	        this.typeLst = new Array();&#13;
	        this.incidentLst = new Array();&#13;
	        this.selectedIncident = '';&#13;
	        this.selectedType = this.workNotes;&#13;
	        this.CRMType = this.sfAppService.CRM;&#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.WrapupIncidentSelect, function (event, data) {&#13;
	            _this.zone.run(function () {&#13;
	                console.log("WRAP UP EVENT : " + data);&#13;
	                _this.updateIncidentList();&#13;
	            });&#13;
	        }));&#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.CurrentCallResult, function (event, data) {&#13;
	            console.log('call-wrap.components - CurrentCallResult : ', data);&#13;
	            _this.zone.run(function () {&#13;
	                _this.callRes = data;&#13;
	                _this.updateUIData();&#13;
	            });&#13;
	        }));&#13;
	        this.zone.run(function () {&#13;
	            _this.callRes = _this.sfAppService.CurrentCallRes;&#13;
	            _this.updateUIData();&#13;
	            //this.sfAppService.getActiveCallResult();&#13;
	        });&#13;
	    }&#13;
	    CallWrapComponent.prototype.ngOnInit = function () {&#13;
	    };&#13;
	    CallWrapComponent.prototype.updateUIData = function () {&#13;
	        //Added by Prakash&#13;
	        this.logger.Debug("Call Wrap : Update UI : " + this.sfAppService.incident);&#13;
	        this.typeLst.push(this.additionalComments);&#13;
	        this.typeLst.push(this.workNotes);&#13;
	        this.comment = '';&#13;
	        if (this.sfAppService.incident !== null) {&#13;
	            this.updateIncidentList();&#13;
	        }&#13;
	        if (this.callRes) {&#13;
	            //   this.comment = '';&#13;
	            this.whoLst = this.callRes.WhoLst;&#13;
	            this.whatLst = this.callRes.WhatLst;&#13;
	            /* */&#13;
	            this.selectedWho = (this.v.IsValidObject(this.callRes.WhoId)) ? this.callRes.WhoId.Id : '';&#13;
	            this.selectedWhat = (this.v.IsValidObject(this.callRes.WhatId)) ? this.callRes.WhatId.Id : '';&#13;
	        }&#13;
	        else {&#13;
	            this.comment = '';&#13;
	            this.selectedWrapup = '';&#13;
	            this.selectedWho = '';&#13;
	            this.selectedWhat = '';&#13;
	            this.callRes = null;&#13;
	        }&#13;
	    };&#13;
	    CallWrapComponent.prototype.updateIncidentList = function () {&#13;
	        this.incidentLst = this.sfAppService.incident.ResultFld;&#13;
	        console.log("Call Wrap : sfAppService.currentSelectedIncident : " + this.sfAppService.currentSelectedIncident);&#13;
	        //   if(this.sfAppService.currentSelectedIncident != null){&#13;
	        // var openedIncident = this.incidentLst.find(i =&gt; i.Number === this.sfAppService.currentSelectedIncident);&#13;
	        // this.logger.Debug("Call Wrap : openedIncident : " + openedIncident);&#13;
	        if (this.sfAppService.currentSelectedIncident != null) {&#13;
	            this.selectedIncident = this.sfAppService.currentSelectedIncident.sysid;&#13;
	        }&#13;
	        this.logger.Debug("Call Wrap : selectedIncident : " + this.selectedIncident);&#13;
	        // }&#13;
	    };&#13;
	    CallWrapComponent.prototype.ddSelectValue = function (list, element) {&#13;
	        var selectedObj;&#13;
	        if (this.v.IsValidObject(element)) {&#13;
	            for (var i = 0; i &lt; list.length; i++) {&#13;
	                if (list[i].Id == element.Id) {&#13;
	                    selectedObj = list[i];&#13;
	                    break;&#13;
	                }&#13;
	            }&#13;
	        }&#13;
	        else {&#13;
	            selectedObj = list[list.length - 1];&#13;
	        }&#13;
	        return selectedObj;&#13;
	    };&#13;
	    CallWrapComponent.prototype.ngOnDestroy = function () {&#13;
	        //console.log('%c call-wrap-components - ngOnDestroy','background:#777778; color:#FFF');&#13;
	        this.logger.Warn('ngOnDestroy called');&#13;
	        for (var _i = 0, _a = this.evntLst; _i &lt; _a.length; _i++) {&#13;
	            var id = _a[_i];&#13;
	            this.logger.Debug('ngOnDestroy -Unregister event :' + id);&#13;
	            this.evnt.UnRegisterEvent(id);&#13;
	        }&#13;
	    };&#13;
	    CallWrapComponent.prototype.isEmpty = function (obj) {&#13;
	        for (var key in obj) {&#13;
	            if (obj.hasOwnProperty(key))&#13;
	                return false;&#13;
	        }&#13;
	        return true;&#13;
	    };&#13;
	    CallWrapComponent.prototype.onSubmit = function (form) {&#13;
	        this.logger.Debug('On Submit Clicked');&#13;
	        this.logger.Debug('Type : ' + this.selectedType);&#13;
	        this.logger.Debug('Incident : ' + this.selectedIncident);&#13;
	        this.logger.Debug('Comment VAR : ' + this.comment);&#13;
	        var dataObj = {};&#13;
	        if (this.selectedType === this.workNotes) {&#13;
	            dataObj = { "work_notes": this.comment };&#13;
	        }&#13;
	        else {&#13;
	            dataObj = { "comments": this.comment };&#13;
	        }&#13;
	        if (app_config_1.default.CRM == "SN") {&#13;
	            parent.postMessage("ACTIVITY|" + this.selectedIncident + "|" + JSON.stringify(dataObj), "*");&#13;
	            var wrapMessage = new Models.SystemMessage();&#13;
	            wrapMessage.Type = Models.MessageType.General;&#13;
	            wrapMessage.Level = Models.Severity.Info;&#13;
	            wrapMessage.Msg = Models.Message.WrapSucess;&#13;
	            wrapMessage.IsOk = false;&#13;
	            this.evnt.Broadcast(Models.Topics.SystemMessage, wrapMessage);&#13;
	        }&#13;
	        if (app_config_1.default.CRM == "SF") {&#13;
	            parent.postMessage("ACTIVITY|" + this.selectedWho + "|" + this.selectedWhat + "|" + this.comment, "*");&#13;
	        }&#13;
	    };&#13;
	    /**Added by Prakash */&#13;
	    CallWrapComponent.prototype.onCallResultChanged = function (type, data) {&#13;
	        ////////////////////SN////////////////////////////&#13;
	        var val;&#13;
	        if (type === 'Comment') {&#13;
	            this.comment = data;&#13;
	        }&#13;
	        else if (type === 'commentType') {&#13;
	            val = this.typeLst[data];&#13;
	            if (val !== undefined) {&#13;
	                this.selectedType = val;&#13;
	            }&#13;
	        }&#13;
	        else if (type === 'incidentNumber') {&#13;
	            val = this.incidentLst[data];&#13;
	            if (val !== undefined) {&#13;
	                this.selectedIncident = val.Sysid;&#13;
	            }&#13;
	        }&#13;
	        ////////////////////SN////////////////////////////&#13;
	        if (this.callRes !== null) {&#13;
	            var res = {&#13;
	                id: this.callRes.CallId,&#13;
	                type: type,&#13;
	                val: data&#13;
	            };&#13;
	            var val_1;&#13;
	            if (type === 'Comment') {&#13;
	                this.comment = data;&#13;
	                this.sfAppService.UpdateCallResult(res);&#13;
	            }&#13;
	            else if (type === 'Wrapup') {&#13;
	                val_1 = this.wrapupLst[data];&#13;
	                if (val_1 !== undefined) {&#13;
	                    this.selectedWrapup = val_1.Id;&#13;
	                    res.val = val_1;&#13;
	                    this.sfAppService.UpdateCallResult(res);&#13;
	                }&#13;
	            }&#13;
	            else if (type === 'WhoId') {&#13;
	                val_1 = this.whoLst[data];&#13;
	                if (val_1 !== undefined) {&#13;
	                    this.selectedWho = val_1.Id;&#13;
	                    res.val = val_1;&#13;
	                    this.sfAppService.UpdateCallResult(res);&#13;
	                }&#13;
	            }&#13;
	            else if (type === 'WhatId') {&#13;
	                val_1 = this.whatLst[data];&#13;
	                if (val_1 !== undefined) {&#13;
	                    this.selectedWhat = val_1.Id;&#13;
	                    res.val = val_1;&#13;
	                    this.sfAppService.UpdateCallResult(res);&#13;
	                }&#13;
	            }&#13;
	        }&#13;
	    };&#13;
	    CallWrapComponent = __decorate([&#13;
	        core_1.Component({&#13;
	            selector: 'call-wrap',&#13;
	            template: __webpack_require__(85),&#13;
	            styles: [__webpack_require__(86)]&#13;
	        }), &#13;
	        __metadata('design:paramtypes', [(typeof (_a = typeof app_service_1.SFAppService !== 'undefined' &amp;&amp; app_service_1.SFAppService) === 'function' &amp;&amp; _a) || Object, (typeof (_b = typeof core_1.NgZone !== 'undefined' &amp;&amp; core_1.NgZone) === 'function' &amp;&amp; _b) || Object])&#13;
	    ], CallWrapComponent);&#13;
	    return CallWrapComponent;&#13;
	    var _a, _b;&#13;
	}());&#13;
	exports.CallWrapComponent = CallWrapComponent;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 85 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "&lt;div class=\"panel call-log call-wrap-com info-panel\"&gt;\r\n    &lt;div class=\"row info-title\"&gt;\r\n        &lt;div class=\"col-xs-12\"&gt;Call Log&lt;/div&gt;\r\n    &lt;/div&gt;\r\n    &lt;!--&lt;form #wrapupForm=\"ngForm\" (ngSubmit)=\"onSubmit(wrapupForm)\"&gt;\r\n        &lt;div class=\"info-records\"&gt;\r\n            &lt;div class=\"form-group\"&gt;\r\n                &lt;label for=\"exampleInputEmail1\"&gt;Name&lt;/label&gt;\r\n                &lt;select class=\"form-control form-control-sm\" (change)=\"onCallResultChanged('WhoId' , $event.target.selectedIndex)\" [(ngModel)]=\"selectedWho\" name=\"whoId\"&gt;\r\n                    &lt;option *ngFor=\"let item of whoLst\" [ngValue]=\"item\"&gt;{{item.Name}}&lt;/option&gt;\r\n            &lt;/select&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"form-group\"&gt;\r\n                &lt;label for=\"exampleSelect1\"&gt;Related to&lt;/label&gt;\r\n                &lt;select class=\"form-control form-control-sm\" (change)=\"onCallResultChanged('WhatId' , $event.target.selectedIndex)\" [(ngModel)]=\"selectedWhat\" name=\"relateTo\"&gt;\r\n                    &lt;option *ngFor=\"let item of whatLst\" [ngValue]=\"item\"&gt;{{item.Name}}&lt;/option&gt;\r\n            &lt;/select&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"form-group\"&gt;\r\n                &lt;label for=\"exampleSelect2\"&gt;Wrap up&lt;/label&gt;\r\n                &lt;select class=\"form-control form-control-sm\" (change)=\"onCallResultChanged('Wrapup' , $event.target.selectedIndex)\" [ngModel]=\"selectedWrapup\" name=\"callwrapSelected\"&gt;\r\n                &lt;option *ngFor=\"let item of wrapupLst\" [ngValue]=\"item.Id\"&gt;{{item.Label}}&lt;/option&gt;\r\n            &lt;/select&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"form-group\"&gt;\r\n                &lt;label for=\"exampleTextarea\"&gt;Comments&lt;/label&gt;\r\n                &lt;textarea #ta class=\"form-control\" [(value)]='comment' (blur)=\"onCallResultChanged('Comment', ta.value)\"&gt;&lt;/textarea&gt;\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n        &lt;button *ngIf=\"callRes === null\" type=\"submit\" class=\"btn btn-sm btn-primary btn-block wrap-submit-button disabled\"&gt;Submit&lt;/button&gt;\r\n        &lt;button [disabled]=\"wrapupForm.submitted\" *ngIf=\"callRes\" type=\"submit\" class=\"btn btn-sm btn-primary btn-block wrap-submit-button\"&gt;Submit&lt;/button&gt;\r\n\r\n    &lt;/form&gt;--&gt;\r\n\r\n    &lt;!--Added by Prakash--&gt;\r\n    &lt;form #wrapupForm=\"ngForm\" (ngSubmit)=\"onSubmit(wrapupForm)\"&gt;\r\n        &lt;div class=\"info-records\"&gt;\r\n            &lt;div *ngIf=\"CRMType === 'SN'\"&gt;\r\n                &lt;div class=\"form-group\"&gt;\r\n                    &lt;label for=\"exampleInputEmail1\"&gt;Type&lt;/label&gt;\r\n                    &lt;select class=\"form-control form-control-sm\" [ngModel]=\"selectedType\" name=\"commentType\" (change)=\"onCallResultChanged('commentType' , $event.target.selectedIndex)\"&gt;\r\n                        &lt;option *ngFor=\"let item of typeLst\" [value]=\"item\"&gt;{{item}}&lt;/option&gt;\r\n                    &lt;/select&gt;\r\n                &lt;/div&gt;\r\n                &lt;div class=\"form-group\"&gt;\r\n                    &lt;label for=\"exampleSelect1\"&gt;Incident&lt;/label&gt;\r\n                    &lt;select class=\"form-control form-control-sm\" [(ngModel)]=\"selectedIncident\" name=\"incidentNumber\" (change)=\"onCallResultChanged('incidentNumber' , $event.target.selectedIndex)\"&gt;\r\n                        &lt;option *ngFor=\"let item of incidentLst\" [value]=\"item.Sysid\"&gt;{{item.Number}}&lt;/option&gt;\r\n                    &lt;/select&gt;\r\n                &lt;/div&gt;\r\n            &lt;/div&gt;\r\n            &lt;div *ngIf=\"CRMType === 'SF'\"&gt;\r\n                &lt;div class=\"form-group\"&gt;\r\n                    &lt;label for=\"exampleInputEmail1\"&gt;Name&lt;/label&gt;\r\n                    &lt;select class=\"form-control form-control-sm\" (change)=\"onCallResultChanged('WhoId' , $event.target.selectedIndex)\" \r\n                        name=\"whoId\" [(ngModel)]=\"selectedWho\"&gt;\r\n                        &lt;option *ngFor=\"let item of whoLst\" [value]=\"item.Id\"&gt;{{item.Name}}&lt;/option&gt;\r\n                    &lt;/select&gt;\r\n                &lt;/div&gt;\r\n                &lt;div class=\"form-group\"&gt;\r\n                    &lt;label for=\"exampleSelect1\"&gt;Related to&lt;/label&gt;\r\n                    &lt;select class=\"form-control form-control-sm\" (change)=\"onCallResultChanged('WhatId' , $event.target.selectedIndex)\"\r\n                        name=\"relateTo\" [(ngModel)]=\"selectedWhat\"&gt;\r\n                        &lt;option *ngFor=\"let item of whatLst\" [value]=\"item.Id\"&gt;{{item.Name}}&lt;/option&gt;\r\n                    &lt;/select&gt;\r\n                &lt;/div&gt;\r\n               \r\n            &lt;/div&gt;\r\n            &lt;div class=\"form-group\"&gt;\r\n                &lt;label for=\"exampleTextarea\"&gt;Comments&lt;/label&gt;\r\n                &lt;textarea autofocus #ta class=\"form-control\" [(value)]='comment' (blur)=\"onCallResultChanged('Comment', ta.value)\"&gt;&lt;/textarea&gt;\r\n            &lt;/div&gt;\r\n\r\n            &lt;button *ngIf=\"callRes === null\" type=\"submit\" class=\"btn btn-sm btn-primary btn-block wrap-submit-button\"&gt;Submit&lt;/button&gt;\r\n            &lt;button [disabled]=\"wrapupForm.submitted\" *ngIf=\"callRes\" type=\"submit\" class=\"btn btn-sm btn-primary btn-block wrap-submit-button\"&gt;Submit&lt;/button&gt;\r\n        &lt;/div&gt;\r\n    &lt;/form&gt;\r\n&lt;/div&gt;";&#13;
&#13;
/***/ }),&#13;
/* 86 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "/** Acquone theme**/\n/** Acquone theme end**/\ntextarea {\n  font-size: 12px;\n  height: 64px;\n  resize: none; }\n\n.sf-wrap .panel {\n  margin: 0px 1px;\n  border: 0px none; }\n\n.sub-tab .card-block {\n  margin-bottom: 0px; }\n\n.panel.call-wrap-com .form-group label {\n  font-weight: 600;\n  color: #333; }\n\n.panel.call-wrap-com .form-group select {\n  font-size: 12px; }\n\n.panel.call-wrap-com .info-records {\n  height: 235px;\n  overflow-y: auto;\n  overflow-x: hidden;\n  margin-bottom: 10px; }\n\n/** Lightning Theme **/\n.skin-lightning .panel.call-wrap-com .wrap-submit-button {\n  background-color: #1b5297 !important;\n  color: #fff !important;\n  border: #1b5297 !important; }\n  .skin-lightning .panel.call-wrap-com .wrap-submit-button:hover {\n    background-color: #004487 !important;\n    border: #004487 !important; }\n\n/** End of Lightning Theme **/\n/** Classic Theme **/\n.skin-classic .panel.call-wrap-com .wrap-submit-button {\n  background-color: #f99b41 !important;\n  color: #333 !important;\n  font-weight: 600;\n  border: none; }\n\n/** End of Classic Theme **/\n"&#13;
&#13;
/***/ }),&#13;
/* 87 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var __decorate = (this &amp;&amp; this.__decorate) || function (decorators, target, key, desc) {&#13;
	    var c = arguments.length, r = c &lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);&#13;
	    else for (var i = decorators.length - 1; i &gt;= 0; i--) if (d = decorators[i]) r = (c &lt; 3 ? d(r) : c &gt; 3 ? d(target, key, r) : d(target, key)) || r;&#13;
	    return c &gt; 3 &amp;&amp; r &amp;&amp; Object.defineProperty(target, key, r), r;&#13;
	};&#13;
	var __metadata = (this &amp;&amp; this.__metadata) || function (k, v) {&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.metadata === "function") return Reflect.metadata(k, v);&#13;
	};&#13;
	var core_1 = __webpack_require__(1);&#13;
	var Models = __webpack_require__(61);&#13;
	var lcm_method_1 = __webpack_require__(88);&#13;
	var app_service_1 = __webpack_require__(58);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var app_config_1 = __webpack_require__(62);&#13;
	var BusinessFieldsComponent = (function () {&#13;
	    function BusinessFieldsComponent(sfAppService, zone) {&#13;
	        this.sfAppService = sfAppService;&#13;
	        this.zone = zone;&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.evntLst = new Array();&#13;
	        this.v = new validation_1.Validation();&#13;
	        this.IsUCCX = app_config_1.default.IsUCCX;&#13;
	        this.lcm = new lcm_method_1.LCMConnector(this.IsUCCX, this.sfAppService);&#13;
	        this.valuesToChange = [];&#13;
	        this.OpBussFileds = false;&#13;
	        this.BussFileds = true;&#13;
	        this.isEditMode = false;&#13;
	        this.isActive = false;&#13;
	        this.businessFields = new Models.BusinessFields();&#13;
	        this.isEditable = false;&#13;
	    }&#13;
	    BusinessFieldsComponent.prototype.ngOnInit = function () {&#13;
	        var _this = this;&#13;
	        this.zone.run(function () {&#13;
	            _this.onBusinessFieldChange1();&#13;
	        });&#13;
	    };&#13;
	    BusinessFieldsComponent.prototype.onBusinessFieldChange1 = function () {&#13;
	        var _this = this;&#13;
	        var accoutnumber = this.sfAppService.AccountNumber;&#13;
	        if (accoutnumber == null || accoutnumber == "" || accoutnumber == " ") {&#13;
	        }&#13;
	        this.lcm.GetScreenPopData(accoutnumber, function (err, data) {&#13;
	            var listObject1 = [];&#13;
	            var obj = window.$.parseXML(data.d);&#13;
	            for (var i = 0; i &lt; window.$(obj).find("Data").children().length; i++) {&#13;
	                listObject1.push({&#13;
	                    FieldName: window.$(obj).find("Data").children()[i].nodeName,&#13;
	                    Value: window.$(window.$(obj).find("Data").children()[i]).text()&#13;
	                });&#13;
	            }&#13;
	            _this.optionalBusinessFields = listObject1;&#13;
	        });&#13;
	    };&#13;
	    BusinessFieldsComponent.prototype.onBusinessFieldChange = function (data) {&#13;
	        if (this.v.IsValidObject(data)) {&#13;
	            this.businessFields = JSON.parse(JSON.stringify(data));&#13;
	            if (this.businessFields.BusinessField.length &gt; 0)&#13;
	                this.isEditable = true;&#13;
	            else&#13;
	                this.isEditable = false;&#13;
	        }&#13;
	    };&#13;
	    ;&#13;
	    BusinessFieldsComponent.prototype.ngOnDestroy = function () {&#13;
	        for (var _i = 0, _a = this.evntLst; _i &lt; _a.length; _i++) {&#13;
	            var id = _a[_i];&#13;
	            console.log('Businessfields Unregister event');&#13;
	            this.evnt.UnRegisterEvent(id);&#13;
	        }&#13;
	    };&#13;
	    BusinessFieldsComponent.prototype.toggle = function (Tab) {&#13;
	        if (Tab == 'BussFileds') {&#13;
	            this.BussFileds = true;&#13;
	            this.OpBussFileds = false;&#13;
	            this.isActive = false;&#13;
	        }&#13;
	        else {&#13;
	            this.OpBussFileds = true;&#13;
	            this.BussFileds = false;&#13;
	            this.isActive = true;&#13;
	        }&#13;
	    };&#13;
	    BusinessFieldsComponent.prototype.onEdit = function () {&#13;
	        this.isEditMode = true;&#13;
	        this.valuesToChange = [];&#13;
	        this.businessFieldsOriginal = JSON.parse(JSON.stringify(this.businessFields));&#13;
	    };&#13;
	    BusinessFieldsComponent.prototype.onSave = function () {&#13;
	        this.isEditMode = false;&#13;
	        //save the business fields from here. &#13;
	        //fire the api request. &#13;
	        if (this.sfAppService.AccountNumber != "") {&#13;
	            this.sfAppService.AddJob({&#13;
	                id: this.v.GenerateUniqueId('AgentLogin'),&#13;
	                type: 'SetBusinessParameter',&#13;
	                CallId: this.sfAppService.CallId,&#13;
	                AccountNumber: this.sfAppService.AccountNumber,&#13;
	                Fields: this.valuesToChange&#13;
	            });&#13;
	        }&#13;
	        if (this.sfAppService.AccountNumber == "") {&#13;
	        }&#13;
	        this.valuesToChange = [];&#13;
	    };&#13;
	    BusinessFieldsComponent.prototype.cancelEdit = function (item, idx) {&#13;
	        var test = item;&#13;
	        this.businessFields.BusinessField[idx] = Object.assign({}, this.businessFieldsOriginal.BusinessField[idx]);&#13;
	        var j = 0;&#13;
	        for (j = 0; j &lt; this.valuesToChange.length; j++) {&#13;
	            if (this.valuesToChange[j].Name === this.businessFields.BusinessField[idx].FieldName) {&#13;
	                this.valuesToChange[j] = this.businessFields.BusinessField[idx];&#13;
	                break;&#13;
	            }&#13;
	        }&#13;
	    };&#13;
	    BusinessFieldsComponent.prototype.onClose = function () {&#13;
	        this.isEditMode = false;&#13;
	        this.valuesToChange = [];&#13;
	        this.businessFields = JSON.parse(JSON.stringify(this.businessFieldsOriginal));&#13;
	    };&#13;
	    BusinessFieldsComponent.prototype.onValueChanged = function (fldName, fldValue) {&#13;
	        console.log(fldName, fldValue);&#13;
	        //compare the origninal value with the changed value&#13;
	        var flds, fld;&#13;
	        var i = 0, j = 0;&#13;
	        var addField = true;&#13;
	    };&#13;
	    BusinessFieldsComponent = __decorate([&#13;
	        core_1.Component({&#13;
	            selector: 'business-fields',&#13;
	            template: __webpack_require__(89)&#13;
	        }), &#13;
	        __metadata('design:paramtypes', [(typeof (_a = typeof app_service_1.SFAppService !== 'undefined' &amp;&amp; app_service_1.SFAppService) === 'function' &amp;&amp; _a) || Object, (typeof (_b = typeof core_1.NgZone !== 'undefined' &amp;&amp; core_1.NgZone) === 'function' &amp;&amp; _b) || Object])&#13;
	    ], BusinessFieldsComponent);&#13;
	    return BusinessFieldsComponent;&#13;
	    var _a, _b;&#13;
	}());&#13;
	exports.BusinessFieldsComponent = BusinessFieldsComponent;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 88 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var Models = __webpack_require__(61);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var storage_1 = __webpack_require__(66);&#13;
	var logger_1 = __webpack_require__(63);&#13;
	//import xmlToJSON from '../js/xmlToJSON';&#13;
	var LCMConnector = (function () {&#13;
	    function LCMConnector(isUCCX, sfApp) {&#13;
	        var _this = this;&#13;
	        this.lcmURL = "AppConfig.LCMUrl";&#13;
	        this.v = new validation_1.Validation();&#13;
	        this.store = storage_1.default.getInstance();&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.agentCallCountTimer = null;&#13;
	        this.isUCCX = false;&#13;
	        this.logger = new logger_1.CustomLogger('LCMConnector');&#13;
	        this.lstKey = [&#13;
	            Models.LCMTopics.LCMKeyInformation,&#13;
	            Models.LCMTopics.LCMModes,&#13;
	            Models.LCMTopics.LCMCallbackModes,&#13;
	            Models.LCMTopics.LCMBusinessFields,&#13;
	            Models.LCMTopics.LCMBOGroupParents,&#13;
	            Models.LCMTopics.LCMBusinessOutComes,&#13;
	            Models.LCMTopics.LCMCallOutComes,&#13;
	            Models.LCMTopics.LCMCallCount,&#13;
	            Models.LCMTopics.LCMContact&#13;
	        ];&#13;
	        this.isUCCX = isUCCX;&#13;
	        this.sfAppService = sfApp;&#13;
	        this.store.SetEventKeys(this.lstKey, function (key, value) {&#13;
	            _this.onStorageUpdate(key, value);&#13;
	        });&#13;
	        //get user information from the local store and assign &#13;
	    }&#13;
	    LCMConnector.prototype.onStorageUpdate = function (key, value) {&#13;
	        //console.log('Finesse Storage updated --', key, ' : ', value);&#13;
	        var data = JSON.parse(value);&#13;
	        console.log('LCM method - on storage update ', key, ' : ', value);&#13;
	        switch (key) {&#13;
	            case Models.LCMTopics.LCMKeyInformation:&#13;
	                this.lcmKeyInformation = data;&#13;
	                this.evnt.Broadcast(Models.LCMTopics.LCMKeyInformation, data);&#13;
	                break;&#13;
	            case Models.LCMTopics.LCMModes:&#13;
	                this.lcmModes = data;&#13;
	                //trigger the event from here&#13;
	                this.evnt.Broadcast(Models.LCMTopics.LCMModes, data);&#13;
	                break;&#13;
	            case Models.LCMTopics.LCMCallbackModes:&#13;
	                this.lcmCallbackModes = data;&#13;
	                //trigger the event from here      &#13;
	                this.evnt.Broadcast(Models.LCMTopics.LCMCallbackModes, data);&#13;
	                break;&#13;
	            case Models.LCMTopics.LCMBusinessFields:&#13;
	                this.lcmBusinessFields = data;&#13;
	                this.evnt.Broadcast(Models.LCMTopics.LCMBusinessFields, data);&#13;
	                break;&#13;
	            case Models.LCMTopics.LCMBOGroupParents:&#13;
	                this.lcmBOGroupParents = data;&#13;
	                //trigger the event from here      &#13;
	                this.evnt.Broadcast(Models.LCMTopics.LCMBOGroupParents, data);&#13;
	                break;&#13;
	            case Models.LCMTopics.LCMBusinessOutComes:&#13;
	                this.lcmBusinessOutComes = data;&#13;
	                this.evnt.Broadcast(Models.LCMTopics.LCMBusinessOutComes, data);&#13;
	                break;&#13;
	            case Models.LCMTopics.LCMCallOutComes:&#13;
	                this.lcmCallOutComes = data;&#13;
	                //trigger the event from here      &#13;
	                this.evnt.Broadcast(Models.LCMTopics.LCMCallOutComes, data);&#13;
	                break;&#13;
	            case Models.LCMTopics.LCMCallCount:&#13;
	                // if (this.isUCCX === true) {&#13;
	                this.lcmCallCount = data;&#13;
	                //trigger the event from here                      &#13;
	                this.evnt.Broadcast(Models.LCMTopics.LCMCallCount, this.lcmCallCount);&#13;
	                //}&#13;
	                break;&#13;
	            case Models.LCMTopics.LCMContact:&#13;
	                // if (this.isUCCX === true) {&#13;
	                this.lcmContact = data;&#13;
	                //trigger the event from here                      &#13;
	                this.evnt.Broadcast(Models.LCMTopics.LCMContact, this.lcmContact);&#13;
	                // }&#13;
	                break;&#13;
	            default:&#13;
	                console.log('LCM method - on storage update not processed ', key, ' : ', value);&#13;
	                break;&#13;
	        }&#13;
	    };&#13;
	    LCMConnector.prototype.GetLCMKeyInformation = function (CallId, AccountNumber, Callback) {&#13;
	        var _this = this;&#13;
	        this.lcmKeyInformation = new Models.LCMKeyInformation();&#13;
	        this.apiError = new Models.ApiError();&#13;
	        var url = this.lcmURL + '/GetLCMKeyInformation';&#13;
	        this.ajax(url, 'POST', JSON.stringify({ AccountNumber: AccountNumber }))&#13;
	            .done(function (data, textStatus, jqXHR) {&#13;
	            if (_this.v.IsValidObject(data.d[0])) {&#13;
	                var res = data.d[0];&#13;
	                _this.lcmKeyInformation = res;&#13;
	                _this.lcmKeyInformation.CallId = CallId;&#13;
	            }&#13;
	            _this.logger.Info('GetLCMKeyInformation Success ');&#13;
	            _this.store.SetData(Models.LCMTopics.LCMKeyInformation, JSON.stringify(_this.lcmKeyInformation));&#13;
	            Callback(null, _this.lcmKeyInformation);&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            _this.apiError.ErrorType = 'API Exception';&#13;
	            _this.apiError.ErrorMessage = errorThrown;&#13;
	            _this.apiError.ErrorData = jqXHR + textStatus;&#13;
	            _this.logger.Info('GetLCMKeyInformation Error : ' + _this.apiError.ErrorMessage);&#13;
	            Callback(_this.apiError, _this.lcmKeyInformation);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.GetContactDetail = function (CallId, AccountNumber, Callback) {&#13;
	        var _this = this;&#13;
	        this.lcmBusinessFields = new Models.BusinessFields();&#13;
	        this.apiError = new Models.ApiError();&#13;
	        var url = this.lcmURL + '/GetContactDetail';&#13;
	        this.ajax(url, 'POST', JSON.stringify({ AccountNumber: AccountNumber }))&#13;
	            .done(function (data, textStatus, jqXHR) {&#13;
	            _this.lcmBusinessFields.CallId = CallId;&#13;
	            if (_this.v.IsNotNullOrUndefinedString(data.d)) {&#13;
	                var res = data.d;&#13;
	                if (res != undefined) {&#13;
	                    var jsonRes = window.xmlToJSON.parseString(res);&#13;
	                    var fieldSet = jsonRes.DATA[0].BussFlds;&#13;
	                    //this.lcmBusinessFields = jsonRes.DATA[0].BussFlds as Models.BusinessFields;&#13;
	                    if (fieldSet != undefined) {&#13;
	                        for (var i = 0; i &lt; fieldSet.length; i++) {&#13;
	                            var lcmBusinessField = new Models.BusinessField();&#13;
	                            lcmBusinessField.FieldName = fieldSet[i].FieldName[0]._text ? fieldSet[i].FieldName[0]._text.toString() : '';&#13;
	                            lcmBusinessField.Value = fieldSet[i].Value[0]._text ? fieldSet[i].Value[0]._text.toString() : '';&#13;
	                            lcmBusinessField.DataType = fieldSet[i].DataType[0]._text ? fieldSet[i].DataType[0]._text.toString() : '';&#13;
	                            lcmBusinessField.Format = fieldSet[i].Format[0]._text ? fieldSet[i].Format[0]._text.toString() : '';&#13;
	                            lcmBusinessField.Editable = fieldSet[i].Editable[0]._text ? fieldSet[i].Editable[0]._text.toString() : '';&#13;
	                            _this.lcmBusinessFields.BusinessField.push(lcmBusinessField);&#13;
	                        }&#13;
	                    }&#13;
	                }&#13;
	            }&#13;
	            _this.logger.Info('GetContactDetail Success ');&#13;
	            _this.store.SetData(Models.LCMTopics.LCMBusinessFields, JSON.stringify(_this.lcmBusinessFields));&#13;
	            Callback(_this.apiError, _this.lcmBusinessFields);&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            _this.apiError.ErrorType = 'API Exception';&#13;
	            _this.apiError.ErrorMessage = errorThrown;&#13;
	            _this.apiError.ErrorData = jqXHR + textStatus;&#13;
	            _this.logger.Info('GetContactDetail Error : ' + _this.apiError.ErrorMessage);&#13;
	            Callback(_this.apiError, _this.lcmBusinessFields);&#13;
	        });&#13;
	    };&#13;
	    /*  public GetScreenPopData(AccountNumber: string, Callback: any) {&#13;
	          &#13;
	          this.apiError = new Models.ApiError();&#13;
	          let url = this.lcmURL + '/GetScreenPopData';&#13;
	          &#13;
	          this.ajax(url, 'POST', JSON.stringify({ AccountNumber: AccountNumber }))&#13;
	          .done((data, textStatus, jqXHR) =&gt; {&#13;
	      &#13;
	      &#13;
	              var listObject1 = [];&#13;
	             &#13;
	              var obj = data.d;&#13;
	              let jsonRes = window.xmlToJSON.parseString(obj);&#13;
	              this.lcmoptionalBusinessFields.BusinessField = jsonRes;&#13;
	  &#13;
	              this.store.SetData(Models.LCMTopics.LCMoptionalBusinessFields,JSON.stringify(this.lcmoptionalBusinessFields));&#13;
	              Callback(this.apiError, this.lcmoptionalBusinessFields);&#13;
	          })&#13;
	          .fail((jqXHR, textStatus, errorThrown) =&gt; {&#13;
	  &#13;
	              this.apiError.ErrorType = 'API Exception';&#13;
	              this.apiError.ErrorMessage = errorThrown;&#13;
	              this.apiError.ErrorData = jqXHR + textStatus;&#13;
	              this.logger.Info('GetContactDetail Error : ' + this.apiError.ErrorMessage);&#13;
	              Callback(this.apiError, this.lcmBusinessFields);&#13;
	  &#13;
	          });&#13;
	      }*/&#13;
	    LCMConnector.prototype.GetScreenPopData = function (AccountNumber, Callback) {&#13;
	        var _this = this;&#13;
	        var url = this.lcmURL + '/GetScreenPopData';&#13;
	        this.ajax(url, 'POST', JSON.stringify({ AccountNumber: AccountNumber }))&#13;
	            .done(function (data, textStatus, jqXHR) {&#13;
	            // if (enddate &lt; startdate) {&#13;
	            Callback(null, data);&#13;
	            // }&#13;
	            // else {&#13;
	            //   Callback(null, false);&#13;
	            // }&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            var errorMsg = new Models.SystemMessage();&#13;
	            errorMsg.Type = Models.MessageType.General;&#13;
	            errorMsg.Level = Models.Severity.Warn;&#13;
	            _this.evnt.Broadcast(_this.sfAppService.TopicList.SystemMessage, errorMsg);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.GetAllPEWCList = function (userID, Callback) {&#13;
	        var _this = this;&#13;
	        var url = this.lcmURL + '/GetAllPEWCList';&#13;
	        this.ajax(url, 'POST', JSON.stringify({ userID: userID }))&#13;
	            .done(function (data, textStatus, jqXHR) {&#13;
	            Callback(null, data);&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            var errorMsg = new Models.SystemMessage();&#13;
	            errorMsg.Type = Models.MessageType.General;&#13;
	            errorMsg.Level = Models.Severity.Warn;&#13;
	            _this.evnt.Broadcast(_this.sfAppService.TopicList.SystemMessage, errorMsg);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.GetCampaignTimeZone = function (cbdatetime, BAAccountNumber, Callback) {&#13;
	        var _this = this;&#13;
	        var enddate = new Date(cbdatetime);&#13;
	        //var LCMKeyValue = this.callRes.Call.CallVariables.BAAccountNumber;&#13;
	        var wrapMessage = new Models.SystemMessage();&#13;
	        var url = this.lcmURL + '/GetCampaignTimeZone';&#13;
	        this.ajax(url, 'POST', JSON.stringify({ AccountNumber: BAAccountNumber }))&#13;
	            .done(function (data, textStatus, jqXHR) {&#13;
	            var value = null;&#13;
	            value = data.d;&#13;
	            var id = value.ZoneName;&#13;
	            var time = "";&#13;
	            var serverTime = new Date(value.ServerTime);&#13;
	            var startdate = new Date(serverTime.getFullYear(), serverTime.getMonth(), serverTime.getDate(), serverTime.getHours(), serverTime.getMinutes(), 0, 0);&#13;
	            if (enddate &lt; startdate) {&#13;
	                Callback(null, true);&#13;
	            }&#13;
	            else {&#13;
	                Callback(null, false);&#13;
	            }&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            var errorMsg = new Models.SystemMessage();&#13;
	            errorMsg.Type = Models.MessageType.General;&#13;
	            errorMsg.Level = Models.Severity.Warn;&#13;
	            _this.evnt.Broadcast(_this.sfAppService.TopicList.SystemMessage, errorMsg);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.GetBOGroupParent = function (CallId, AccountNumber, Callback) {&#13;
	        var _this = this;&#13;
	        this.lcmBOGroupParents = new Models.BOGroupParents();&#13;
	        this.apiError = new Models.ApiError();&#13;
	        var url = this.lcmURL + '/GetBOGroupParent';&#13;
	        this.ajax(url, 'POST', JSON.stringify({ AccountNumber: AccountNumber }))&#13;
	            .done(function (data, textStatus, jqXHR) {&#13;
	            if (_this.v.IsValidObject(data.d)) {&#13;
	                var res = data.d;&#13;
	                _this.lcmBOGroupParents.BOGroupParent = res;&#13;
	                _this.lcmBOGroupParents.BOGroupParent.splice(0, 0, { ParentId: "0", ParentName: "None", CampaignKey: null });&#13;
	                _this.lcmBOGroupParents.CallId = CallId;&#13;
	            }&#13;
	            _this.logger.Info('GetBOGroupParent Success ');&#13;
	            _this.store.SetData(Models.LCMTopics.LCMBOGroupParents, JSON.stringify(_this.lcmBOGroupParents));&#13;
	            Callback(_this.apiError, _this.lcmBOGroupParents);&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            _this.apiError.ErrorType = 'API Exception';&#13;
	            _this.apiError.ErrorMessage = errorThrown;&#13;
	            _this.apiError.ErrorData = jqXHR + textStatus;&#13;
	            _this.logger.Info('GetBOGroupParent Error : ' + _this.apiError.ErrorMessage);&#13;
	            Callback(_this.apiError, _this.lcmBOGroupParents);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.GetBusinessOutCome = function (CallId, AccountNumber, Callback) {&#13;
	        var _this = this;&#13;
	        this.lcmBusinessOutComes = new Models.BusinessOutComes();&#13;
	        this.apiError = new Models.ApiError();&#13;
	        var url = this.lcmURL + '/GetBusinessOutCome';&#13;
	        this.ajax(url, 'POST', JSON.stringify({ AccountNumber: AccountNumber }))&#13;
	            .done(function (data, textStatus, jqXHR) {&#13;
	            if (_this.v.IsValidObject(data.d)) {&#13;
	                var res = data.d;&#13;
	                _this.lcmBusinessOutComes.BusinessOutCome = res;&#13;
	                _this.lcmBusinessOutComes.BusinessOutCome.splice(0, 0, { OutComeID: "0", Description: "None", CampaignID: null, ParentID: null });&#13;
	                _this.lcmBusinessOutComes.CallId = CallId;&#13;
	            }&#13;
	            _this.logger.Info('GetBusinessOutCome Success ');&#13;
	            _this.store.SetData(Models.LCMTopics.LCMBusinessOutComes, JSON.stringify(_this.lcmBusinessOutComes));&#13;
	            Callback(_this.apiError, _this.lcmBusinessOutComes);&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            _this.apiError.ErrorType = 'API Exception';&#13;
	            _this.apiError.ErrorMessage = errorThrown;&#13;
	            _this.apiError.ErrorData = jqXHR + textStatus;&#13;
	            _this.logger.Info('GetBusinessOutCome Error : ' + _this.apiError.ErrorMessage);&#13;
	            Callback(_this.apiError, _this.lcmBusinessOutComes);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.GetModes = function (CallId, AccountNumber, Callback) {&#13;
	        var _this = this;&#13;
	        this.lcmModes = new Models.Modes();&#13;
	        this.apiError = new Models.ApiError();&#13;
	        var url = this.lcmURL + '/GetModes';&#13;
	        this.ajax(url, 'POST', JSON.stringify({ AccountNumber: AccountNumber }))&#13;
	            .done(function (data, textStatus, jqXHR) {&#13;
	            if (_this.v.IsValidObject(data.d)) {&#13;
	                var res = data.d;&#13;
	                _this.lcmModes.Mode = res;&#13;
	                _this.lcmModes.CallId = CallId;&#13;
	            }&#13;
	            _this.store.SetData(Models.LCMTopics.LCMModes, JSON.stringify(_this.lcmModes));&#13;
	            _this.logger.Info('GetModes Success ');&#13;
	            Callback(_this.apiError, _this.lcmModes);&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            _this.apiError.ErrorType = 'API Exception';&#13;
	            _this.apiError.ErrorMessage = errorThrown;&#13;
	            _this.apiError.ErrorData = jqXHR + textStatus;&#13;
	            _this.logger.Info('GetModes Error :  ' + _this.apiError.ErrorMessage);&#13;
	            Callback(_this.apiError, _this.lcmModes);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.GetCampaignModes = function (CallId, AccountNumber, Callback) {&#13;
	        var _this = this;&#13;
	        this.lcmModes = new Models.Modes();&#13;
	        this.apiError = new Models.ApiError();&#13;
	        var url = this.lcmURL + '/GetCampaignModes';&#13;
	        this.ajax(url, 'POST', JSON.stringify({ AccountNumber: AccountNumber }))&#13;
	            .done(function (data, textStatus, jqXHR) {&#13;
	            if (_this.v.IsValidObject(data.d)) {&#13;
	                var res = data.d;&#13;
	                _this.lcmModes.Mode = res;&#13;
	                _this.lcmModes.CallId = CallId;&#13;
	            }&#13;
	            _this.store.SetData(Models.LCMTopics.LCMModes, JSON.stringify(_this.lcmModes));&#13;
	            _this.logger.Info('GetModes Success ');&#13;
	            Callback(_this.apiError, _this.lcmModes);&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            _this.apiError.ErrorType = 'API Exception';&#13;
	            _this.apiError.ErrorMessage = errorThrown;&#13;
	            _this.apiError.ErrorData = jqXHR + textStatus;&#13;
	            _this.logger.Info('GetModes Error :  ' + _this.apiError.ErrorMessage);&#13;
	            Callback(_this.apiError, _this.lcmModes);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.GetCallbackModes = function (CallId, AccountNumber, Callback) {&#13;
	        var _this = this;&#13;
	        this.lcmCallbackModes = new Models.Modes();&#13;
	        this.apiError = new Models.ApiError();&#13;
	        var url = this.lcmURL + '/GetCallBackModes';&#13;
	        this.ajax(url, 'POST', JSON.stringify({ AccountNumber: AccountNumber }))&#13;
	            .done(function (data, textStatus, jqXHR) {&#13;
	            if (_this.v.IsValidObject(data.d)) {&#13;
	                var res = data.d;&#13;
	                _this.lcmCallbackModes.Mode = res;&#13;
	                _this.lcmCallbackModes.CallId = CallId;&#13;
	            }&#13;
	            _this.store.SetData(Models.LCMTopics.LCMCallbackModes, JSON.stringify(_this.lcmCallbackModes));&#13;
	            _this.logger.Info(' GetCallBackModes Success');&#13;
	            Callback(_this.apiError, _this.lcmCallbackModes);&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            _this.apiError.ErrorType = 'API Exception';&#13;
	            _this.apiError.ErrorMessage = errorThrown;&#13;
	            _this.apiError.ErrorData = jqXHR + textStatus;&#13;
	            _this.logger.Info('GetCallBackModes Error :  ' + _this.apiError.ErrorMessage);&#13;
	            Callback(_this.apiError, _this.lcmCallbackModes);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.GetCallOutCome = function (CallId, AccountNumber, Callback) {&#13;
	        var _this = this;&#13;
	        var url = this.lcmURL + '/GetCallOutCome';&#13;
	        this.lcmCallOutComes = new Models.CallOutComes();&#13;
	        this.apiError = new Models.ApiError();&#13;
	        this.ajax(url, 'POST', JSON.stringify({ AccountNumber: AccountNumber }))&#13;
	            .done(function (data, textStatus, jqXHR) {&#13;
	            if (_this.v.IsValidObject(data.d)) {&#13;
	                var res = data.d;&#13;
	                _this.lcmCallOutComes.CallOutCome = res;&#13;
	                _this.lcmCallOutComes.CallOutCome.splice(0, 0, { OutComeID: "-1", Description: "None" });&#13;
	                _this.lcmCallOutComes.CallOutCome.splice(1, 0, { OutComeID: "4", Description: "Callback" });&#13;
	                _this.lcmCallOutComes.CallOutCome.splice(2, 0, { OutComeID: "5", Description: "DNC" });&#13;
	                _this.lcmCallOutComes.CallId = CallId;&#13;
	            }&#13;
	            _this.store.SetData(Models.LCMTopics.LCMCallOutComes, JSON.stringify(_this.lcmCallOutComes));&#13;
	            _this.logger.Info(' GetCallOutCome Success');&#13;
	            Callback(_this.apiError, _this.lcmCallOutComes);&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            _this.apiError.ErrorType = 'API Exception';&#13;
	            _this.apiError.ErrorMessage = errorThrown;&#13;
	            _this.apiError.ErrorData = jqXHR + textStatus;&#13;
	            _this.logger.Info('GetCallOutCome Error :  ' + _this.apiError.ErrorMessage);&#13;
	            Callback(_this.apiError, _this.lcmCallOutComes);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.GetBusinessOutcomeParent = function (CallId, AccountNumber, ParentBusinessOutcomeId, Callback) {&#13;
	        var _this = this;&#13;
	        this.lcmBusinessOutComes = new Models.BusinessOutComes();&#13;
	        this.apiError = new Models.ApiError();&#13;
	        var url = this.lcmURL + '/GetBusinessOutcomeParent';&#13;
	        this.ajax(url, 'POST', JSON.stringify({&#13;
	            AccountNumber: AccountNumber,&#13;
	            ParentBusinessOutcomeId: ParentBusinessOutcomeId&#13;
	        }))&#13;
	            .done(function (data, textStatus, jqXHR) {&#13;
	            if (_this.v.IsValidObject(data.d)) {&#13;
	                var res = data.d;&#13;
	                _this.lcmBusinessOutComes.BusinessOutCome = res;&#13;
	                _this.lcmBusinessOutComes.CallId = CallId;&#13;
	            }&#13;
	            _this.logger.Info(' GetBusinessOutcomeParent Success');&#13;
	            _this.store.SetData(Models.LCMTopics.LCMBusinessOutComes, JSON.stringify(_this.lcmBusinessOutComes));&#13;
	            Callback(_this.apiError, _this.lcmBusinessOutComes);&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            _this.apiError.ErrorType = 'API Exception';&#13;
	            _this.apiError.ErrorMessage = errorThrown;&#13;
	            _this.apiError.ErrorData = jqXHR + textStatus;&#13;
	            _this.logger.Info('GetBusinessOutcomeParent Error :  ' + _this.apiError.ErrorMessage);&#13;
	            Callback(_this.apiError, _this.lcmBusinessOutComes);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.SetBusinessOutcomeWithComments = function (AccountNumber, Outcome, CallID, UserID, AgentComment, TargetAmount, TargetAmountSpecified, Callback) {&#13;
	        var _this = this;&#13;
	        this.apiError = new Models.ApiError();&#13;
	        this.apiSuccess = new Models.ApiSuccess();&#13;
	        var url = this.lcmURL + '/SetBusinessOutcomeWithComments';&#13;
	        this.ajax(url, 'POST', JSON.stringify({&#13;
	            AccountNumber: AccountNumber,&#13;
	            Outcome: Outcome,&#13;
	            CallID: CallID,&#13;
	            UserID: UserID,&#13;
	            AgentComment: AgentComment,&#13;
	            TargetAmount: TargetAmount,&#13;
	            TargetAmountSpecified: TargetAmountSpecified&#13;
	        })).done(function (data, textStatus, jqXHR) {&#13;
	            if (data.d == true) {&#13;
	                _this.apiSuccess.Data = data.d;&#13;
	                _this.apiSuccess.Message = "Business Outcome has been set successfully";&#13;
	                _this.logger.Info('SetBusinessOutcomeWithComments Success : ' + _this.apiSuccess.Message);&#13;
	            }&#13;
	            else {&#13;
	                _this.apiError.ErrorType = "API Response Error";&#13;
	                _this.apiError.ErrorMessage = 'Unable to save business outcome';&#13;
	                _this.apiError.ErrorData = '[SetBusinessOutcomeWithComments] ' + data + textStatus;&#13;
	                _this.logger.Info('SetBusinessOutcomeWithComments Error : ' + _this.apiError.ErrorMessage);&#13;
	            }&#13;
	            Callback(_this.apiError, _this.apiSuccess);&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            _this.apiError.ErrorType = 'API Exception';&#13;
	            _this.apiError.ErrorMessage = errorThrown;&#13;
	            _this.apiError.ErrorData = jqXHR + textStatus;&#13;
	            _this.logger.Info('SetBusinessOutcomeWithComments Error : ' + _this.apiError.ErrorMessage);&#13;
	            Callback(_this.apiError, _this.apiSuccess);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.SetCallOutcomeWithComments = function (AccountNumber, Outcome, DNCInfo, CallID, UserID, AgentComment, TargetAmount, TargetAmountSpecified, Callback) {&#13;
	        var _this = this;&#13;
	        this.apiError = new Models.ApiError();&#13;
	        this.apiSuccess = new Models.ApiSuccess();&#13;
	        var url = this.lcmURL + '/SetCallOutcomeWithComments';&#13;
	        this.ajax(url, 'POST', JSON.stringify({&#13;
	            AccountNumber: AccountNumber, Outcome: Outcome,&#13;
	            DNCInfo: DNCInfo, CallID: CallID, UserID: UserID,&#13;
	            AgentComment: AgentComment, TargetAmount: TargetAmount, TargetAmountSpecified: TargetAmountSpecified&#13;
	        })).done(function (data, textStatus, jqXHR) {&#13;
	            if (data.d == true) {&#13;
	                _this.apiSuccess.Data = data.d;&#13;
	                _this.apiSuccess.Message = "Call Outcome has been set successfully";&#13;
	                _this.logger.Info('SetCallOutcomeWithComments Success : ' + _this.apiSuccess.Message);&#13;
	            }&#13;
	            else {&#13;
	                _this.apiError.ErrorType = "API Response Error";&#13;
	                _this.apiError.ErrorMessage = 'Unable to save outcome';&#13;
	                _this.apiError.ErrorData = '[SetCallOutcomeWithComments] ' + data + textStatus;&#13;
	                _this.logger.Info('SetCallOutcomeWithComments Error : ' + _this.apiError.ErrorMessage);&#13;
	            }&#13;
	            Callback(_this.apiError, _this.apiSuccess);&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            _this.apiError.ErrorType = 'API Exception';&#13;
	            _this.apiError.ErrorMessage = errorThrown;&#13;
	            _this.apiError.ErrorData = jqXHR + textStatus;&#13;
	            _this.logger.Info('SetCallOutcomeWithComments Error : ' + _this.apiError.ErrorMessage);&#13;
	            Callback(_this.apiError, _this.apiSuccess);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.SetBusinessOutcomeWithCallOutcome = function (AccountNumber, BusinessOutcome, CallOutcome, DNCInfo, CallID, AgentComment, TargetAmount, TargetAmountSpecified, Callback) {&#13;
	        var _this = this;&#13;
	        this.apiError = new Models.ApiError();&#13;
	        this.apiSuccess = new Models.ApiSuccess();&#13;
	        var url = this.lcmURL + '/SetBusinessOutcomeWithCallOutcome';&#13;
	        this.ajax(url, 'POST', JSON.stringify({&#13;
	            AccountNumber: AccountNumber, BusinessOutcome: BusinessOutcome,&#13;
	            CallOutcome: CallOutcome, DNCInfo: DNCInfo, CallID: CallID,&#13;
	            AgentComment: AgentComment, TargetAmount: TargetAmount, TargetAmountSpecified: TargetAmountSpecified&#13;
	        })).done(function (data, textStatus, jqXHR) {&#13;
	            if (data.d == true) {&#13;
	                _this.apiSuccess.Data = data.d;&#13;
	                _this.apiSuccess.Message = "Business &amp; Call Outcome has been set successfully";&#13;
	                _this.logger.Info('SetBusinessOutcomeWithCallOutcome Success : ' + _this.apiSuccess.Message);&#13;
	            }&#13;
	            else {&#13;
	                _this.apiError.ErrorType = "API Response Error";&#13;
	                _this.apiError.ErrorMessage = 'Unable to save outcome';&#13;
	                _this.apiError.ErrorData = '[SetBusinessOutcomeWithCallOutcome] ' + data + textStatus;&#13;
	                _this.logger.Info('SetBusinessOutcomeWithCallOutcome Error : ' + _this.apiError.ErrorMessage);&#13;
	            }&#13;
	            Callback(_this.apiError, _this.apiSuccess);&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            _this.apiError.ErrorType = 'API Exception';&#13;
	            _this.apiError.ErrorMessage = errorThrown;&#13;
	            _this.apiError.ErrorData = jqXHR + textStatus;&#13;
	            _this.logger.Info('SetBusinessOutcomeWithCallOutcome Error : ' + _this.apiError.ErrorMessage);&#13;
	            Callback(_this.apiError, _this.apiSuccess);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.SetBusinessOutcomeCallback = function (AccountNumber, BusinessOutcome, StartDate, EndDate, StartTime, EndTime, ModeID, CallID, UserID, AgentComment, PCB, TargetAmount, TargetAmountSpecified, Callback) {&#13;
	        var _this = this;&#13;
	        this.apiError = new Models.ApiError();&#13;
	        this.apiSuccess = new Models.ApiSuccess();&#13;
	        var url;&#13;
	        if (PCB)&#13;
	            url = this.lcmURL + '/SetBusinessOutcomeWithPersonalCallback';&#13;
	        else&#13;
	            url = this.lcmURL + '/SetBusinessOutcomeWithCallback';&#13;
	        this.ajax(url, 'POST', JSON.stringify({&#13;
	            AccountNumber: AccountNumber,&#13;
	            BusinessOutcome: BusinessOutcome,&#13;
	            StartDate: StartDate,&#13;
	            EndDate: EndDate,&#13;
	            StartTime: StartTime,&#13;
	            EndTime: EndTime,&#13;
	            ModeID: ModeID,&#13;
	            CallID: CallID,&#13;
	            UserID: UserID,&#13;
	            AgentComment: AgentComment,&#13;
	            TargetAmount: TargetAmount,&#13;
	            TargetAmountSpecified: TargetAmountSpecified&#13;
	        })).done(function (data, textStatus, jqXHR) {&#13;
	            if (data.d == true) {&#13;
	                _this.apiSuccess.Data = data.d;&#13;
	                _this.apiSuccess.Message = "Business Outcome with Callback has been set successfully";&#13;
	                _this.logger.Info('SetBusinessOutcomeCallback Success : ' + _this.apiSuccess.Message);&#13;
	            }&#13;
	            else {&#13;
	                _this.apiError.ErrorType = "API Response Error";&#13;
	                _this.apiError.ErrorMessage = 'Unable to set callback with business outcome';&#13;
	                _this.apiError.ErrorData = '[SetBusinessOutcomeCallback] ' + data + textStatus;&#13;
	                _this.logger.Info('SetBusinessOutcomeCallback Error : ' + _this.apiError.ErrorMessage);&#13;
	            }&#13;
	            Callback(_this.apiError, _this.apiSuccess);&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            _this.apiError.ErrorType = 'API Exception';&#13;
	            _this.apiError.ErrorMessage = errorThrown;&#13;
	            _this.apiError.ErrorData = jqXHR + textStatus;&#13;
	            _this.logger.Info('SetBusinessOutcomeCallback Error : ' + _this.apiError.ErrorMessage);&#13;
	            Callback(_this.apiError, _this.apiSuccess);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.SetCallback = function (AccountNumber, StartDate, EndDate, StartTime, EndTime, ModeID, CallID, UserID, AgentComment, PCB, TargetAmount, TargetAmountSpecified, Callback) {&#13;
	        var _this = this;&#13;
	        this.apiError = new Models.ApiError();&#13;
	        this.apiSuccess = new Models.ApiSuccess();&#13;
	        var url;&#13;
	        if (PCB)&#13;
	            url = this.lcmURL + '/SetPersonalCallbackWithComments';&#13;
	        else&#13;
	            url = this.lcmURL + '/SetCallbackWithComments';&#13;
	        this.ajax(url, 'POST', JSON.stringify({&#13;
	            AccountNumber: AccountNumber,&#13;
	            StartDate: StartDate,&#13;
	            EndDate: EndDate,&#13;
	            StartTime: StartTime,&#13;
	            EndTime: EndTime,&#13;
	            ModeID: ModeID,&#13;
	            CallID: CallID,&#13;
	            UserID: UserID,&#13;
	            AgentComment: AgentComment,&#13;
	            TargetAmount: TargetAmount,&#13;
	            TargetAmountSpecified: TargetAmountSpecified&#13;
	        })).done(function (data, textStatus, jqXHR) {&#13;
	            if (data.d == true) {&#13;
	                _this.apiSuccess.Data = data.d;&#13;
	                _this.apiSuccess.Message = "Call Back has been set successfully";&#13;
	                _this.logger.Info('SetCallback Success : ' + _this.apiSuccess.Message);&#13;
	            }&#13;
	            else {&#13;
	                _this.apiError.ErrorType = "API Response Error";&#13;
	                _this.apiError.ErrorMessage = 'Unable to set call back';&#13;
	                _this.apiError.ErrorData = '[SetCallback] ' + data + textStatus;&#13;
	                _this.logger.Info('SetCallback Error : ' + _this.apiError.ErrorMessage);&#13;
	            }&#13;
	            Callback(_this.apiError, _this.apiSuccess);&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            _this.apiError.ErrorType = 'API Exception';&#13;
	            _this.apiError.ErrorMessage = errorThrown;&#13;
	            _this.apiError.ErrorData = jqXHR + textStatus;&#13;
	            _this.logger.Info('SetCallback Error : ' + _this.apiError.ErrorMessage);&#13;
	            Callback(_this.apiError, _this.apiSuccess);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.SetNewModeNumber = function (AccountNumber, ModeID, ModeIDSpecified, ContactNumber, DeleteOtherModes, DeleteOtherModesSpecified, Callback) {&#13;
	        var _this = this;&#13;
	        this.apiError = new Models.ApiError();&#13;
	        this.apiSuccess = new Models.ApiSuccess();&#13;
	        var url = this.lcmURL + '/SetNewModeNumber';&#13;
	        this.ajax(url, 'POST', JSON.stringify({&#13;
	            AccountNumber: AccountNumber,&#13;
	            ModeID: ModeID,&#13;
	            ModeIDSpecified: ModeIDSpecified,&#13;
	            ContactNumber: ContactNumber,&#13;
	            DeleteOtherModes: DeleteOtherModes,&#13;
	            DeleteOtherModesSpecified: DeleteOtherModesSpecified&#13;
	        })).done(function (data, textStatus, jqXHR) {&#13;
	            if (data.d == true) {&#13;
	                _this.apiSuccess.Data = data.d;&#13;
	                _this.apiSuccess.Message = "Number Changed Successfully";&#13;
	                _this.logger.Info('SetNewModeNumber Success : ' + _this.apiSuccess.Message);&#13;
	            }&#13;
	            else {&#13;
	                _this.apiError.ErrorType = "API Response Error";&#13;
	                _this.apiError.ErrorMessage = 'Unable to change number';&#13;
	                _this.apiError.ErrorData = '[SetNewModeNumber] ' + data + textStatus;&#13;
	                _this.logger.Info('SetNewModeNumber Error : ' + _this.apiError.ErrorMessage);&#13;
	            }&#13;
	            Callback(_this.apiError, _this.apiSuccess);&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            _this.apiError.ErrorType = 'API Exception';&#13;
	            _this.apiError.ErrorMessage = errorThrown;&#13;
	            _this.apiError.ErrorData = jqXHR + textStatus;&#13;
	            _this.logger.Info('SetNewModeNumber Error : ' + _this.apiError.ErrorMessage);&#13;
	            Callback(_this.apiError, _this.apiSuccess);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.SetContactBusinessFields = function (AccountNumber, FieldName, FieldValue, DataType, Callback) {&#13;
	        var _this = this;&#13;
	        this.apiError = new Models.ApiError();&#13;
	        this.apiSuccess = new Models.ApiSuccess();&#13;
	        var url = this.lcmURL + '/SetContactBusinessFields';&#13;
	        var XmlData = '&lt;DATA&gt;&lt;BussFlds&gt;' +&#13;
	            '&lt;FieldName&gt;' + FieldName + '&lt;/FieldName&gt;' +&#13;
	            '&lt;Value&gt;&lt;![CDATA[' + FieldValue + ']]&gt;&lt;/Value&gt;' +&#13;
	            '&lt;DataType&gt;' + DataType + '&lt;/DataType&gt;' +&#13;
	            '&lt;Format&gt;&lt;/Format&gt;' +&#13;
	            '&lt;/BussFlds&gt;&lt;/DATA&gt;';&#13;
	        this.ajax(url, 'POST', JSON.stringify({&#13;
	            AccountNumber: AccountNumber,&#13;
	            XmlData: XmlData&#13;
	        })).done(function (data, textStatus, jqXHR) {&#13;
	            if (data.d == true) {&#13;
	                _this.apiSuccess.Data = data.d;&#13;
	                _this.apiSuccess.Message = "Business field has been set successfully";&#13;
	                _this.logger.Info('SetContactBusinessFields Success : ' + _this.apiSuccess.Message);&#13;
	            }&#13;
	            else {&#13;
	                _this.apiError.ErrorType = "API Response Error";&#13;
	                _this.apiError.ErrorMessage = 'Unable to set business field';&#13;
	                _this.apiError.ErrorData = '[SetContactBusinessFields] ' + data + textStatus;&#13;
	                _this.logger.Info('SetContactBusinessFields Error : ' + _this.apiError.ErrorMessage);&#13;
	            }&#13;
	            Callback(_this.apiError, _this.apiSuccess);&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            _this.apiError.ErrorType = 'API Exception';&#13;
	            _this.apiError.ErrorMessage = errorThrown;&#13;
	            _this.apiError.ErrorData = jqXHR + textStatus;&#13;
	            _this.logger.Info('SetContactBusinessFields Error : ' + _this.apiError.ErrorMessage);&#13;
	            Callback(_this.apiError, _this.apiSuccess);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.UpdateSuccessCall = function (AccountNumber, AgentID, Outcome, Callback) {&#13;
	        var _this = this;&#13;
	        this.apiError = new Models.ApiError();&#13;
	        this.apiSuccess = new Models.ApiSuccess();&#13;
	        var url = this.lcmURL + '/UpdateSucessCall';&#13;
	        this.ajax(url, 'POST', JSON.stringify({&#13;
	            accountNo: AccountNumber,&#13;
	            agentID: AgentID,&#13;
	            outcomeID: Outcome&#13;
	        })).done(function (data, textStatus, jqXHR) {&#13;
	            if (data.d == true) {&#13;
	                _this.apiSuccess.Data = data.d;&#13;
	                _this.apiSuccess.Message = "UpdateSuccessCall done";&#13;
	                _this.logger.Info('UpdateSuccessCall Success : ' + _this.apiSuccess.Message);&#13;
	            }&#13;
	            else {&#13;
	                _this.apiError.ErrorType = "API Response Error";&#13;
	                _this.apiError.ErrorMessage = 'Unable to set UpdateSuccessCall';&#13;
	                _this.apiError.ErrorData = '[UpdateSuccessCall] ' + data + textStatus;&#13;
	                _this.logger.Info('UpdateSuccessCall Error : ' + _this.apiError.ErrorMessage);&#13;
	            }&#13;
	            Callback(_this.apiError, _this.apiSuccess);&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            _this.apiError.ErrorType = 'API Exception';&#13;
	            _this.apiError.ErrorMessage = errorThrown;&#13;
	            _this.apiError.ErrorData = jqXHR + textStatus;&#13;
	            _this.logger.Info('UpdateSuccessCall Error : ' + _this.apiError.ErrorMessage);&#13;
	            Callback(_this.apiError, _this.apiSuccess);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.UpdateSuccessCallWithDuration = function (AccountNumber, AgentID, Outcome, Duration, Callback) {&#13;
	        var _this = this;&#13;
	        if (Duration === void 0) { Duration = 0; }&#13;
	        this.apiError = new Models.ApiError();&#13;
	        this.apiSuccess = new Models.ApiSuccess();&#13;
	        var url = this.lcmURL + '/UpdateSucessCallWithDuration';&#13;
	        this.ajax(url, 'POST', JSON.stringify({&#13;
	            accountNo: AccountNumber,&#13;
	            agentID: AgentID,&#13;
	            outcomeID: Outcome,&#13;
	            Duration: Duration&#13;
	        })).done(function (data, textStatus, jqXHR) {&#13;
	            if (data.d == true) {&#13;
	                _this.apiSuccess.Data = data.d;&#13;
	                _this.apiSuccess.Message = "UpdateSuccessCall done";&#13;
	                _this.logger.Info('UpdateSuccessCallWithDuration Success : ' + _this.apiSuccess.Message);&#13;
	            }&#13;
	            else {&#13;
	                _this.apiError.ErrorType = "API Response Error";&#13;
	                _this.apiError.ErrorMessage = 'Unable to set UpdateSuccessCall';&#13;
	                _this.apiError.ErrorData = '[UpdateSuccessCall] ' + data + textStatus;&#13;
	                _this.logger.Info('UpdateSuccessCallWithDuration Error : ' + _this.apiError.ErrorMessage);&#13;
	            }&#13;
	            Callback(_this.apiError, _this.apiSuccess);&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            _this.apiError.ErrorType = 'API Exception';&#13;
	            _this.apiError.ErrorMessage = errorThrown;&#13;
	            _this.apiError.ErrorData = jqXHR + textStatus;&#13;
	            _this.logger.Info('UpdateSuccessCallWithDuration Error : ' + _this.apiError.ErrorMessage);&#13;
	            Callback(_this.apiError, _this.apiSuccess);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.GetAgentCallCount = function (agentId) {&#13;
	        if (this.agentCallCountTimer === null) {&#13;
	            this.agentCallCountTimer = -1;&#13;
	            this._getAgentCallCount(agentId);&#13;
	        }&#13;
	    };&#13;
	    LCMConnector.prototype._getAgentCallCount = function (agentId) {&#13;
	        var _this = this;&#13;
	        var url = this.lcmURL + '/GetAgentCallCount';&#13;
	        this.ajax(url, 'POST', JSON.stringify({&#13;
	            userID: agentId&#13;
	        })).done(function (data, textStatus, jqXHR) {&#13;
	            if (_this.v.IsNotNullOrUndefinedString(data.d)) {&#13;
	                var st = data.d.split('~');&#13;
	                if (_this.lcmCallCount == undefined)&#13;
	                    _this.lcmCallCount = new Models.CallCount();&#13;
	                if (st.length &gt;= 2 &amp;&amp; !isNaN(st[1])) {&#13;
	                    _this.lcmCallCount.count = parseInt(st[1]);&#13;
	                }&#13;
	                else {&#13;
	                    _this.lcmCallCount.count = 0;&#13;
	                }&#13;
	                if (st.length &gt;= 2 &amp;&amp; !isNaN(st[0])) {&#13;
	                    _this.lcmCallCount.PCBcount = parseInt(st[0]);&#13;
	                }&#13;
	                else {&#13;
	                    _this.lcmCallCount.PCBcount = 0;&#13;
	                }&#13;
	            }&#13;
	            else {&#13;
	                _this.lcmCallCount.count = 0;&#13;
	                _this.lcmCallCount.PCBcount = 0;&#13;
	            }&#13;
	            _this.store.SetData(Models.LCMTopics.LCMCallCount, JSON.stringify(_this.lcmCallCount));&#13;
	            _this.evnt.Broadcast(Models.LCMTopics.LCMCallCount, _this.lcmCallCount);&#13;
	            if (_this.agentCallCountTimer !== null) {&#13;
	                clearTimeout(_this.agentCallCountTimer);&#13;
	            }&#13;
	            _this.agentCallCountTimer = setTimeout(function () {&#13;
	                _this._getAgentCallCount(agentId);&#13;
	            }, 5000);&#13;
	        }).fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            _this.logger.Info('_getAgentCallCount Error ');&#13;
	            _this.lcmCallCount.count = 0;&#13;
	            _this.store.SetData(Models.LCMTopics.LCMCallCount, JSON.stringify(_this.lcmCallCount));&#13;
	            _this.evnt.Broadcast(Models.LCMTopics.LCMCallCount, _this.lcmCallCount);&#13;
	            if (_this.agentCallCountTimer !== null) {&#13;
	                clearTimeout(_this.agentCallCountTimer);&#13;
	            }&#13;
	            _this.agentCallCountTimer = setTimeout(function () {&#13;
	                _this._getAgentCallCount(agentId);&#13;
	            }, 5000);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.GetContact = function (agentId, Callback) {&#13;
	        var _this = this;&#13;
	        var url = this.lcmURL + '/GetContactOD';&#13;
	        this.apiError = new Models.ApiError();&#13;
	        this.apiSuccess = new Models.ApiSuccess();&#13;
	        this.ajax(url, 'POST', JSON.stringify({&#13;
	            userID: agentId&#13;
	        })).done(function (data, textStatus, jqXHR) {&#13;
	            _this.logger.Info('GetContact Success');&#13;
	            var toaster = new Models.SystemMessage();&#13;
	            if (_this.v.IsNotNullOrUndefinedString(data.d)) {&#13;
	                var st = data.d.split('~');&#13;
	                if (st.length &gt;= 10) {&#13;
	                    _this.apiSuccess.Data = data.d;&#13;
	                    try {&#13;
	                        _this.lcmContact = new Models.LcmContact();&#13;
	                        _this.lcmContact.PhoneNumber = st[0];&#13;
	                        _this.lcmContact.AccountNumber = st[1];&#13;
	                        _this.lcmContact.CampaignId = st[2];&#13;
	                        _this.lcmContact.Mode = st[3];&#13;
	                        _this.lcmContact.ContactId = st[4];&#13;
	                        _this.lcmContact.ExpiryTime = st[5];&#13;
	                        _this.lcmContact.CallbackTime = st[6];&#13;
	                        _this.lcmContact.CallType = st[7];&#13;
	                        _this.lcmContact.Prefix = st[8];&#13;
	                        _this.lcmContact.Suffix = st[9];&#13;
	                        _this.store.SetData(Models.LCMTopics.LCMContact, JSON.stringify(_this.lcmContact));&#13;
	                        _this.evnt.Broadcast(Models.LCMTopics.LCMContact, _this.lcmContact);&#13;
	                        Callback(_this.apiError, _this.apiSuccess);&#13;
	                    }&#13;
	                    catch (ex) {&#13;
	                        //throw error message&#13;
	                        toaster.Type = Models.MessageType.General;&#13;
	                        toaster.Level = Models.Severity.Info;&#13;
	                        toaster.Msg = "API Response Error";&#13;
	                        toaster.IsOk = false;&#13;
	                        Callback(_this.apiError, _this.apiSuccess);&#13;
	                    }&#13;
	                }&#13;
	                else {&#13;
	                    toaster.Type = Models.MessageType.General;&#13;
	                    toaster.Level = Models.Severity.Info;&#13;
	                    toaster.Msg = Models.Message.LCMNonPEWCEmptyResult;&#13;
	                    toaster.IsOk = false;&#13;
	                }&#13;
	                _this.store.SetData(Models.Topics.SystemMessage, JSON.stringify(toaster));&#13;
	                _this.evnt.Broadcast(_this.sfAppService.TopicList.SystemMessage, toaster);&#13;
	            }&#13;
	        }).fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            //throw error message.&#13;
	            _this.logger.Info('GetContact Error ');&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.SetNonPewcContactOutcome = function (AccountNumber, AgentId, PhoneNumber, Callback) {&#13;
	        var _this = this;&#13;
	        this.apiError = new Models.ApiError();&#13;
	        this.apiSuccess = new Models.ApiSuccess();&#13;
	        var url = this.lcmURL + '/SetNonPEWCContactOutcome';&#13;
	        this.ajax(url, 'POST', JSON.stringify({&#13;
	            AccountNumber: AccountNumber, AgentID: AgentId,&#13;
	            PhoneNumber: PhoneNumber&#13;
	        })).done(function (data, textStatus, jqXHR) {&#13;
	            if (data.d == true) {&#13;
	                _this.apiSuccess.Data = data.d;&#13;
	            }&#13;
	            else {&#13;
	                _this.apiError.ErrorType = "API Response Error";&#13;
	                _this.apiError.ErrorMessage = 'Unable to save Non PEWC';&#13;
	                _this.apiError.ErrorData = '[SetNonPEWCContactOutcome] ' + data + textStatus;&#13;
	                _this.logger.Info('SetNonPewcContactOutcome Error ' + _this.apiError.ErrorMessage);&#13;
	            }&#13;
	            Callback(_this.apiError, _this.apiSuccess);&#13;
	        })&#13;
	            .fail(function (jqXHR, textStatus, errorThrown) {&#13;
	            _this.apiError.ErrorType = 'API Exception';&#13;
	            _this.apiError.ErrorMessage = errorThrown;&#13;
	            _this.apiError.ErrorData = jqXHR + textStatus;&#13;
	            _this.logger.Info('SetNonPewcContactOutcome Error ' + _this.apiError.ErrorMessage);&#13;
	            Callback(_this.apiError, _this.apiSuccess);&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.ajax = function (url, method, data) {&#13;
	        return window.$.ajax({&#13;
	            url: url,&#13;
	            method: method,&#13;
	            data: data,&#13;
	            dataType: "json",&#13;
	            contentType: "application/json; charset=utf-8"&#13;
	        });&#13;
	    };&#13;
	    LCMConnector.prototype.OnCallEnd = function (callId) {&#13;
	        //Clearing modes&#13;
	        if (this.v.IsValidObject(this.lcmModes) &amp;&amp; this.lcmModes.CallId === callId) {&#13;
	            this.lcmModes = new Models.Modes();&#13;
	            this.store.SetData(Models.LCMTopics.LCMModes, JSON.stringify(this.lcmModes));&#13;
	            this.evnt.Broadcast(Models.LCMTopics.LCMModes, this.lcmModes);&#13;
	        }&#13;
	        if (this.v.IsValidObject(this.lcmCallbackModes) &amp;&amp; this.lcmCallbackModes.CallId === callId) {&#13;
	            this.lcmCallbackModes = new Models.Modes();&#13;
	            this.store.SetData(Models.LCMTopics.LCMCallbackModes, JSON.stringify(this.lcmCallbackModes));&#13;
	            this.evnt.Broadcast(Models.LCMTopics.LCMCallbackModes, this.lcmCallbackModes);&#13;
	        }&#13;
	        if (this.v.IsValidObject(this.lcmKeyInformation) &amp;&amp; this.lcmKeyInformation.CallId === callId) {&#13;
	            this.lcmKeyInformation = new Models.LCMKeyInformation();&#13;
	            this.store.SetData(Models.LCMTopics.LCMKeyInformation, JSON.stringify(this.lcmKeyInformation));&#13;
	            this.evnt.Broadcast(Models.LCMTopics.LCMKeyInformation, this.lcmKeyInformation);&#13;
	        }&#13;
	        if (this.v.IsValidObject(this.lcmBusinessFields) &amp;&amp; this.lcmBusinessFields.CallId === callId) {&#13;
	            this.lcmBusinessFields = new Models.BusinessFields();&#13;
	            this.store.SetData(Models.LCMTopics.LCMBusinessFields, JSON.stringify(this.lcmBusinessFields));&#13;
	            this.evnt.Broadcast(Models.LCMTopics.LCMBusinessFields, this.lcmBusinessFields);&#13;
	        }&#13;
	        if (this.v.IsValidObject(this.lcmBOGroupParents) &amp;&amp; this.lcmBOGroupParents.CallId === callId) {&#13;
	            this.lcmBOGroupParents = new Models.BOGroupParents();&#13;
	            this.store.SetData(Models.LCMTopics.LCMBOGroupParents, JSON.stringify(this.lcmBOGroupParents));&#13;
	            this.evnt.Broadcast(Models.LCMTopics.LCMBOGroupParents, this.lcmBOGroupParents);&#13;
	        }&#13;
	        if (this.v.IsValidObject(this.lcmBusinessOutComes) &amp;&amp; this.lcmBusinessOutComes.CallId === callId) {&#13;
	            this.lcmBusinessOutComes = new Models.BusinessOutComes();&#13;
	            this.store.SetData(Models.LCMTopics.LCMBusinessOutComes, JSON.stringify(this.lcmBusinessOutComes));&#13;
	            this.evnt.Broadcast(Models.LCMTopics.LCMBusinessOutComes, this.lcmBusinessOutComes);&#13;
	        }&#13;
	        if (this.v.IsValidObject(this.lcmCallOutComes) &amp;&amp; this.lcmCallOutComes.CallId === callId) {&#13;
	            this.lcmCallOutComes = new Models.CallOutComes();&#13;
	            this.store.SetData(Models.LCMTopics.LCMCallOutComes, JSON.stringify(this.lcmCallOutComes));&#13;
	            this.evnt.Broadcast(Models.LCMTopics.LCMCallOutComes, this.lcmCallOutComes);&#13;
	        }&#13;
	    };&#13;
	    LCMConnector.prototype.ClearData = function () {&#13;
	        this.logger.Debug('LCM Clear Data From Agent State Change ');&#13;
	        this.OnInit(true, true);&#13;
	        if (this.agentCallCountTimer !== null &amp;&amp; this.agentCallCountTimer !== -1) {&#13;
	            clearTimeout(this.agentCallCountTimer);&#13;
	            this.agentCallCountTimer = null;&#13;
	        }&#13;
	    };&#13;
	    LCMConnector.prototype.OnInit = function (clearStorage, isAgentLogout) {&#13;
	        if (isAgentLogout === void 0) { isAgentLogout = false; }&#13;
	        if (clearStorage === false) {&#13;
	            var value = void 0;&#13;
	            value = this.store.GetData(Models.LCMTopics.LCMKeyInformation);&#13;
	            if (value !== '') {&#13;
	                this.lcmKeyInformation = JSON.parse(value);&#13;
	                this.evnt.Broadcast(Models.LCMTopics.LCMKeyInformation, this.lcmKeyInformation);&#13;
	            }&#13;
	            value = this.store.GetData(Models.LCMTopics.LCMModes);&#13;
	            if (value !== '') {&#13;
	                this.lcmModes = JSON.parse(value);&#13;
	                this.evnt.Broadcast(Models.LCMTopics.LCMModes, this.lcmModes);&#13;
	            }&#13;
	            value = this.store.GetData(Models.LCMTopics.LCMCallbackModes);&#13;
	            if (value !== '') {&#13;
	                this.lcmCallbackModes = JSON.parse(value);&#13;
	                this.evnt.Broadcast(Models.LCMTopics.LCMCallbackModes, this.lcmCallbackModes);&#13;
	            }&#13;
	            value = this.store.GetData(Models.LCMTopics.LCMBusinessFields);&#13;
	            if (value !== '') {&#13;
	                this.lcmBusinessFields = JSON.parse(value);&#13;
	                this.evnt.Broadcast(Models.LCMTopics.LCMBusinessFields, this.lcmBusinessFields);&#13;
	            }&#13;
	            value = this.store.GetData(Models.LCMTopics.LCMBOGroupParents);&#13;
	            if (value !== '') {&#13;
	                this.lcmBOGroupParents = JSON.parse(value);&#13;
	                this.evnt.Broadcast(Models.LCMTopics.LCMBOGroupParents, this.lcmBOGroupParents);&#13;
	            }&#13;
	            value = this.store.GetData(Models.LCMTopics.LCMBusinessOutComes);&#13;
	            if (value !== '') {&#13;
	                this.lcmBusinessOutComes = JSON.parse(value);&#13;
	                this.evnt.Broadcast(Models.LCMTopics.LCMBusinessOutComes, this.lcmBusinessOutComes);&#13;
	            }&#13;
	            value = this.store.GetData(Models.LCMTopics.LCMCallOutComes);&#13;
	            if (value !== '') {&#13;
	                this.lcmCallOutComes = JSON.parse(value);&#13;
	                this.evnt.Broadcast(Models.LCMTopics.LCMCallOutComes, this.lcmCallOutComes);&#13;
	            }&#13;
	            //   if (this.isUCCX === true) {&#13;
	            value = this.store.GetData(Models.LCMTopics.LCMContact);&#13;
	            if (value !== '') {&#13;
	                this.lcmContact = JSON.parse(value);&#13;
	                this.evnt.Broadcast(Models.LCMTopics.LCMContact, this.lcmContact);&#13;
	            }&#13;
	            value = this.store.GetData(Models.LCMTopics.LCMCallCount);&#13;
	            if (value !== '') {&#13;
	                this.lcmCallCount = JSON.parse(value);&#13;
	                this.evnt.Broadcast(Models.LCMTopics.LCMCallCount, this.lcmCallCount);&#13;
	            }&#13;
	            else {&#13;
	                this.lcmCallCount = new Models.CallCount();&#13;
	                this.evnt.Broadcast(Models.LCMTopics.LCMCallCount, this.lcmCallCount);&#13;
	            }&#13;
	        }&#13;
	        else {&#13;
	            this.lcmModes = new Models.Modes();&#13;
	            this.store.SetData(Models.LCMTopics.LCMModes, JSON.stringify(this.lcmModes));&#13;
	            this.evnt.Broadcast(Models.LCMTopics.LCMModes, this.lcmModes);&#13;
	            this.lcmCallbackModes = new Models.Modes();&#13;
	            this.store.SetData(Models.LCMTopics.LCMCallbackModes, JSON.stringify(this.lcmCallbackModes));&#13;
	            this.evnt.Broadcast(Models.LCMTopics.LCMCallbackModes, this.lcmCallbackModes);&#13;
	            this.lcmKeyInformation = new Models.LCMKeyInformation();&#13;
	            this.store.SetData(Models.LCMTopics.LCMKeyInformation, JSON.stringify(this.lcmKeyInformation));&#13;
	            this.evnt.Broadcast(Models.LCMTopics.LCMKeyInformation, this.lcmKeyInformation);&#13;
	            this.lcmBusinessFields = new Models.BusinessFields();&#13;
	            this.store.SetData(Models.LCMTopics.LCMBusinessFields, JSON.stringify(this.lcmBusinessFields));&#13;
	            this.evnt.Broadcast(Models.LCMTopics.LCMBusinessFields, this.lcmBusinessFields);&#13;
	            this.lcmBOGroupParents = new Models.BOGroupParents();&#13;
	            this.store.SetData(Models.LCMTopics.LCMBOGroupParents, JSON.stringify(this.lcmBOGroupParents));&#13;
	            this.evnt.Broadcast(Models.LCMTopics.LCMBOGroupParents, this.lcmBOGroupParents);&#13;
	            this.lcmBusinessOutComes = new Models.BusinessOutComes();&#13;
	            this.store.SetData(Models.LCMTopics.LCMBusinessOutComes, JSON.stringify(this.lcmBusinessOutComes));&#13;
	            this.evnt.Broadcast(Models.LCMTopics.LCMBusinessOutComes, this.lcmBusinessOutComes);&#13;
	            this.lcmCallOutComes = new Models.CallOutComes();&#13;
	            this.store.SetData(Models.LCMTopics.LCMCallOutComes, JSON.stringify(this.lcmCallOutComes));&#13;
	            this.evnt.Broadcast(Models.LCMTopics.LCMCallOutComes, this.lcmCallOutComes);&#13;
	            // if (this.isUCCX === true) {&#13;
	            this.lcmCallCount = new Models.CallCount();&#13;
	            this.store.SetData(Models.LCMTopics.LCMCallCount, JSON.stringify(this.lcmCallCount));&#13;
	            this.evnt.Broadcast(Models.LCMTopics.LCMCallCount, this.lcmCallCount);&#13;
	            this.lcmContact = null;&#13;
	            this.store.SetData(Models.LCMTopics.LCMContact, JSON.stringify(this.lcmContact));&#13;
	            this.evnt.Broadcast(Models.LCMTopics.LCMContact, this.lcmContact);&#13;
	        }&#13;
	    };&#13;
	    return LCMConnector;&#13;
	}());&#13;
	exports.LCMConnector = LCMConnector;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 89 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "\r\n&lt;label title=\"Business fields\" class=\"agent-btn\" [ngClass]=\"{ 'active': isActive == false }\" (click)=\"toggle('BussFileds')\"&gt;\r\n    &lt;span class=\"pull-left\"&gt;Business fields&lt;/span&gt;\r\n&lt;/label&gt;\r\n&lt;label title=\"Optional Business Fields\" class=\"agent-btn\" [ngClass]=\"{ 'active': isActive == true }\" (click)=\"toggle('OpBussFileds')\"&gt;\r\n    &lt;span class=\"pull-left\"&gt;Optional Business Fields&lt;/span&gt;\r\n&lt;/label&gt;\r\n&lt;div *ngIf=\"BussFileds\"&gt;\r\n    &lt;div class=\"panel info-panel business-fields-com\" *ngIf=\"businessFields\"&gt;\r\n        &lt;div class=\"row info-title\"&gt;\r\n\r\n            &lt;div class=\"col-xs-6\"&gt;Business fields&lt;/div&gt;\r\n            &lt;div class=\"col-xs-6\"&gt;\r\n                &lt;span *ngIf=\"isEditMode == false &amp;&amp; isEditable\" class=\"btn btn-info btn-sm title-control pull-xs-right\" (click)=\"onEdit()\"&gt;Edit&lt;/span&gt;\r\n                &lt;span *ngIf=\"isEditMode == true\" class=\"btn btn-danger btn-sm title-control pull-xs-right\" (click)=\"onClose()\"&gt;Cancel&lt;/span&gt;\r\n                &lt;span *ngIf=\"isEditMode == true\" class=\"btn btn-success btn-sm title-control pull-xs-right\" style=\"margin-right:5px;\" (click)=\"onSave()\"&gt;Save&lt;/span&gt;\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n        &lt;div class=\"info-records\"&gt;\r\n            &lt;div class=\"row info-record\" *ngFor=\"let item of businessFields.BusinessField; let idx = index\"&gt;\r\n                &lt;div class=\"col-xs-5 no-padding-left\"&gt;{{item.FieldName}}&lt;/div&gt;\r\n                &lt;div class=\"col-xs-7 no-padding-left\" [ngSwitch]=\"(isEditMode &amp;&amp; item.Editable=='true')\"&gt;\r\n                    &lt;span *ngSwitchCase=\"true\"&gt;\r\n                        &lt;input type=\"text\" class=\"txt-field\" [(ngModel)]=\"item.Value\" (change)=\"onValueChanged(item.FieldName, item.Value, $event)\" /&gt;\r\n                        &lt;button type=\"button\" class=\"btn btn-sm btn-secondary no-padding\" (click)=\"cancelEdit(this, idx)\"&gt;&lt;span class=\"icon-close-button\"&gt;&lt;/span&gt;&lt;/button&gt;\r\n                    &lt;/span&gt;\r\n                    &lt;span *ngSwitchCase=\"false\"&gt;{{item.Value}}&lt;/span&gt;\r\n                &lt;/div&gt;\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n    &lt;/div&gt;\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;div *ngIf=\"OpBussFileds\"&gt;\r\n    &lt;div class=\"panel info-panel business-fields-com\" *ngIf=\"optionalBusinessFields\"&gt;\r\n        &lt;div class=\"info-records\"&gt;\r\n            &lt;div class=\"row info-record\" *ngFor=\"let item of optionalBusinessFields; let idx = index\"&gt;\r\n                &lt;div class=\"col-xs-5 no-padding-left\"&gt;{{item.FieldName}}&lt;/div&gt;\r\n                &lt;div class=\"col-xs-7 no-padding-left\"&gt;{{item.Value}}&lt;/div&gt;\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n    &lt;/div&gt;\r\n&lt;/div&gt;\r\n\r\n\r\n\r\n";&#13;
&#13;
/***/ }),&#13;
/* 90 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var __decorate = (this &amp;&amp; this.__decorate) || function (decorators, target, key, desc) {&#13;
	    var c = arguments.length, r = c &lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);&#13;
	    else for (var i = decorators.length - 1; i &gt;= 0; i--) if (d = decorators[i]) r = (c &lt; 3 ? d(r) : c &gt; 3 ? d(target, key, r) : d(target, key)) || r;&#13;
	    return c &gt; 3 &amp;&amp; r &amp;&amp; Object.defineProperty(target, key, r), r;&#13;
	};&#13;
	var __metadata = (this &amp;&amp; this.__metadata) || function (k, v) {&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.metadata === "function") return Reflect.metadata(k, v);&#13;
	};&#13;
	var core_1 = __webpack_require__(1);&#13;
	var Models = __webpack_require__(61);&#13;
	var app_service_1 = __webpack_require__(58);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var ChangeNumberComponent = (function () {&#13;
	    function ChangeNumberComponent(sfAppService) {&#13;
	        this.sfAppService = sfAppService;&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.evntLst = new Array();&#13;
	        this.deleteOthermode = false;&#13;
	        this.canShowDate = false;&#13;
	        this.modes = new Models.Modes();&#13;
	        this.modeSelected = null;&#13;
	        this.newNumber = '';&#13;
	    }&#13;
	    ChangeNumberComponent.prototype.ngOnInit = function () {&#13;
	        //console.log('%c REGISTER ', 'color:#AA8000'); &#13;
	    };&#13;
	    ChangeNumberComponent.prototype.ngOnDestroy = function () {&#13;
	        for (var _i = 0, _a = this.evntLst; _i &lt; _a.length; _i++) {&#13;
	            var id = _a[_i];&#13;
	            console.log('changeNumber Unregister event');&#13;
	            this.evnt.UnRegisterEvent(id);&#13;
	        }&#13;
	    };&#13;
	    ChangeNumberComponent.prototype.onKeyDownEvent = function (key) {&#13;
	        if ((key === 8 || key === 27 || key === 35 || key === 36 || key === 37 || key === 38 || key === 39 || key === 40 ||&#13;
	            key === 46 || key === 110 || key === 190) || (key &gt;= 48 &amp;&amp; key &lt;= 57) || (key &gt;= 96 &amp;&amp; key &lt;= 106)) {&#13;
	            return true;&#13;
	        }&#13;
	        return false;&#13;
	    };&#13;
	    ChangeNumberComponent.prototype.changeNumber = function () {&#13;
	        if (this.modeSelected !== null) {&#13;
	            console.log('onModeChange :', this.modeSelected);&#13;
	            console.log('newNumber :', this.newNumber);&#13;
	            console.log('deleteOthermode :', this.deleteOthermode);&#13;
	            var AccountNumber = void 0;&#13;
	        }&#13;
	    };&#13;
	    ChangeNumberComponent = __decorate([&#13;
	        core_1.Component({&#13;
	            selector: 'change-number',&#13;
	            template: __webpack_require__(91)&#13;
	        }), &#13;
	        __metadata('design:paramtypes', [(typeof (_a = typeof app_service_1.SFAppService !== 'undefined' &amp;&amp; app_service_1.SFAppService) === 'function' &amp;&amp; _a) || Object])&#13;
	    ], ChangeNumberComponent);&#13;
	    return ChangeNumberComponent;&#13;
	    var _a;&#13;
	}());&#13;
	exports.ChangeNumberComponent = ChangeNumberComponent;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 91 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "&lt;div class=\"panel info-panel change-Num-com\"&gt;\r\n    &lt;div class=\"row info-title\"&gt;\r\n        &lt;div class=\"col-xs-12\"&gt;Change Number&lt;/div&gt;\r\n    &lt;/div&gt;\r\n    &lt;!--&lt;select *ngIf=\"modes\" [ngModel]=\"modeSelected\" #m (ngModelChange)=\"onModeChange(m, $event)\"&gt;\r\n      &lt;option *ngFor=\"let mode of modes.Mode\" [ngValue]=\"mode\"&gt;\r\n        {{mode.Description}}\r\n      &lt;/option&gt;\r\n    &lt;/select&gt;--&gt;\r\n    &lt;div class=\"info-records\"&gt;\r\n        &lt;div class=\"form-group\"&gt;\r\n            Campaign Modes\r\n            &lt;select class=\"form-control form-control-sm\" *ngIf=\"modes\" [(ngModel)]=\"modeSelected\"&gt;\r\n                &lt;option *ngFor=\"let mode of modes.Mode\" [ngValue]=\"mode\"&gt;{{mode.Description}}&lt;/option&gt;\r\n            &lt;/select&gt;\r\n        &lt;/div&gt;\r\n        &lt;div class=\"form-group\"&gt;\r\n            Number\r\n            &lt;input type=\"text\" [(ngModel)]=\"newNumber\" class=\"form-control form-control-sm\" (keydown)=\"onKeyDownEvent($event.keyCode)\" /&gt;\r\n        &lt;/div&gt;\r\n        &lt;div class=\"form-group\"&gt;\r\n            &lt;label for=\"chk\"&gt;\r\n                &lt;input type=\"checkbox\" [(ngModel)]=\"deleteOthermode\" value=\"false\"&gt;Delete other mode\r\n            &lt;/label&gt;\r\n        &lt;/div&gt;\r\n    &lt;/div&gt;\r\n\r\n    &lt;button *ngIf=\"modeSelected == null || newNumber == ''\" class=\"btn btn-success btn-sm btn-block change-number-submit-button disabled\" type=\"submit\"&gt;Save&lt;/button&gt;\r\n    &lt;button *ngIf=\"modeSelected != null &amp;&amp; newNumber != ''\" class=\"btn btn-success btn-sm btn-block change-number-submit-button\" type=\"submit\" (click)=\"changeNumber()\"&gt;Save&lt;/button&gt;\r\n&lt;/div&gt;";&#13;
&#13;
/***/ }),&#13;
/* 92 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var __decorate = (this &amp;&amp; this.__decorate) || function (decorators, target, key, desc) {&#13;
	    var c = arguments.length, r = c &lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);&#13;
	    else for (var i = decorators.length - 1; i &gt;= 0; i--) if (d = decorators[i]) r = (c &lt; 3 ? d(r) : c &gt; 3 ? d(target, key, r) : d(target, key)) || r;&#13;
	    return c &gt; 3 &amp;&amp; r &amp;&amp; Object.defineProperty(target, key, r), r;&#13;
	};&#13;
	var __metadata = (this &amp;&amp; this.__metadata) || function (k, v) {&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.metadata === "function") return Reflect.metadata(k, v);&#13;
	};&#13;
	var core_1 = __webpack_require__(1);&#13;
	var Models = __webpack_require__(61);&#13;
	var app_config_1 = __webpack_require__(62);&#13;
	var app_service_1 = __webpack_require__(58);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var storage_1 = __webpack_require__(66);&#13;
	var logger_1 = __webpack_require__(63);&#13;
	var router_1 = __webpack_require__(29);&#13;
	var lcm_method_1 = __webpack_require__(88);&#13;
	var LCMOutcomeComponent = (function () {&#13;
	    //public clickCount : number = 0; //NBC&#13;
	    function LCMOutcomeComponent(sfAppService, router, zone) {&#13;
	        this.sfAppService = sfAppService;&#13;
	        this.router = router;&#13;
	        this.zone = zone;&#13;
	        this.logger = new logger_1.CustomLogger('AppService');&#13;
	        this.v = new validation_1.Validation();&#13;
	        this.IsUCCX = app_config_1.default.IsUCCX;&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.evntLst = new Array();&#13;
	        this.store = storage_1.default.getInstance();&#13;
	        this.lcm = new lcm_method_1.LCMConnector(this.IsUCCX, this.sfAppService);&#13;
	        this.isBusEnable = true;&#13;
	        this.campaignWiseDNCChecked = false;&#13;
	        this.pcbChecked = false;&#13;
	        this.isDisableOutcome = app_config_1.default.DisableOutCome; //NBC&#13;
	        this.callRes = null;&#13;
	        this.wrapupLst = new Array();&#13;
	        this.selectedWrapup = '';&#13;
	        this.selectedWho = '';&#13;
	        this.selectedWhat = '';&#13;
	        this.comment = '';&#13;
	        this.whoLst = new Array();&#13;
	        this.whatLst = new Array();&#13;
	        this.datePickerOpt = {};&#13;
	        this.targetAmount = 0;&#13;
	        this.DefaultOutboundDisposition = app_config_1.default.DefaultOutboundDisposition; // NBC&#13;
	        this.pageData = {};&#13;
	        this.noWrapupState = ['OUTBOUND_DIRECT_PREVIEW', 'OUTBOUND_PREVIEW'];&#13;
	        this.OutboundDefaultTab = app_config_1.default.OutboundDefaultTab;&#13;
	        this.InboundDefaultTab = app_config_1.default.InboundDefaultTab;&#13;
	        this.telephonyOutcomeOnChange = function (pworkspace) {&#13;
	            this.store.SetData('outcomeEdited', 'true');&#13;
	            if (this.telephonyOutcomeSelected == "4") {&#13;
	                this.lcmCBVisibility = true;&#13;
	                this.lcmDNCVisibility = false;&#13;
	                this.isBusEnable = true;&#13;
	            }&#13;
	            else if (this.telephonyOutcomeSelected == "5") {&#13;
	                this.lcmCBVisibility = false;&#13;
	                this.lcmDNCVisibility = true;&#13;
	                this.isBusEnable = true;&#13;
	            }&#13;
	            else if (this.telephonyOutcomeSelected == "10") {&#13;
	                this.lcmCBVisibility = false;&#13;
	                this.lcmDNCVisibility = false;&#13;
	                this.isBusEnable = true;&#13;
	            }&#13;
	            else if (this.telephonyOutcomeSelected == "-1") {&#13;
	                this.lcmCBVisibility = false;&#13;
	                this.lcmDNCVisibility = false;&#13;
	                this.isBusEnable = true;&#13;
	            }&#13;
	            else {&#13;
	                this.lcmCBVisibility = false;&#13;
	                this.lcmDNCVisibility = false;&#13;
	                this.isBusEnable = false;&#13;
	                this.busOutcomeCombo = this.busoutcomes.BusinessOutCome[0].OutComeID;&#13;
	            }&#13;
	            if (this.lcmCBVisibility == true) {&#13;
	                if (this.sfAppService.IsUCCX) {&#13;
	                    this.lcmCBVisibilityPCB = false;&#13;
	                }&#13;
	                else {&#13;
	                    this.lcmCBVisibilityPCB = true;&#13;
	                }&#13;
	            }&#13;
	            else {&#13;
	                this.lcmCBVisibilityPCB = false;&#13;
	            }&#13;
	        };&#13;
	        this.calloutcomes = new Models.CallOutComes();&#13;
	        this.modes = new Models.Modes();&#13;
	        this.boGroupParents = new Models.BOGroupParents();&#13;
	        this.busoutcomes = new Models.BusinessOutComes();&#13;
	        this.busoutcomeswithparent = new Models.BusinessOutComes();&#13;
	        //this.modeSelected = null;&#13;
	        this.datePickerOpt = {&#13;
	            icon: 'icon-date',&#13;
	            startDate: new Date()&#13;
	        };&#13;
	        console.log("isDisableOutcome : ", this.isDisableOutcome);&#13;
	    }&#13;
	    LCMOutcomeComponent.prototype.ngOnInit = function () {&#13;
	    };&#13;
	    LCMOutcomeComponent.prototype.ngOnDestroy = function () {&#13;
	        this.pageData = {&#13;
	            outcome: this.telephonyOutcomeSelected,&#13;
	            selectedDate: this.cbdatetime,&#13;
	            modes: this.modeSelected,&#13;
	            pcb: this.pcbChecked,&#13;
	            dnc: this.campaignWiseDNCChecked,&#13;
	            parentBusinOutcome: this.parentBusOutcomeCombo,&#13;
	            BusinessOut: this.busOutcomeCombo,&#13;
	            target: this.targetAmount,&#13;
	            name: this.selectedWho,&#13;
	            relateTo: this.selectedWhat,&#13;
	            comments: this.comment&#13;
	        };&#13;
	        this.store.SetData('sessPageData', JSON.stringify(this.pageData));&#13;
	        for (var _i = 0, _a = this.evntLst; _i &lt; _a.length; _i++) {&#13;
	            var id = _a[_i];&#13;
	            console.log('lcm-outcome Unregister event');&#13;
	            this.evnt.UnRegisterEvent(id);&#13;
	        }&#13;
	    };&#13;
	    LCMOutcomeComponent.prototype.updateUIData = function () {&#13;
	        if (this.callRes) {&#13;
	            this.comment = this.callRes.Comment;&#13;
	            if (this.comment == undefined) {&#13;
	                this.comment = '';&#13;
	            }&#13;
	            this.whoLst = this.callRes.WhoLst;&#13;
	            this.whatLst = this.callRes.WhatLst;&#13;
	            this.selectedWho = (this.v.IsValidObject(this.callRes.WhoId)) ? this.callRes.WhoId.Id : '';&#13;
	            this.selectedWhat = (this.v.IsValidObject(this.callRes.WhatId)) ? this.callRes.WhatId.Id : '';&#13;
	            this.selectedWrapup = (this.v.IsValidObject(this.callRes.Wrapup)) ? this.callRes.Wrapup.Id : '';&#13;
	        }&#13;
	        else {&#13;
	            this.comment = '';&#13;
	            this.selectedWrapup = '';&#13;
	            this.selectedWho = '';&#13;
	            this.selectedWhat = '';&#13;
	            this.callRes = null;&#13;
	        }&#13;
	    };&#13;
	    LCMOutcomeComponent.prototype.updateOutcomes = function () {&#13;
	    };&#13;
	    LCMOutcomeComponent.prototype.updateSelectedMode = function () {&#13;
	        if (!this.v.IsValidObject(this.modeSelected) &amp;&amp; this.modes &amp;&amp; this.v.IsNotNullOrEmptyArray(this.modes.Mode)) {&#13;
	            var accNo = this.sfAppService.AccountNumber;&#13;
	            var canSetMode = true;&#13;
	            var i = 0;&#13;
	            if (this.v.IsNotNullOrEmpty(accNo)) {&#13;
	                var index = accNo.indexOf("|") + 1;&#13;
	                var endIndex = accNo.slice(index).indexOf("|") + index;&#13;
	                var mId = accNo.slice(index, endIndex);&#13;
	                for (i = 0; i &lt; this.modes.Mode.length; i++) {&#13;
	                    if (this.modes.Mode[i].ModeID === mId) {&#13;
	                        this.modeSelected = this.modes.Mode[i].ModeID;&#13;
	                        canSetMode = true;&#13;
	                        break;&#13;
	                    }&#13;
	                }&#13;
	            }&#13;
	            if (canSetMode === true) {&#13;
	                this.modeSelected = this.modes.Mode[0].ModeID;&#13;
	            }&#13;
	        }&#13;
	    };&#13;
	    LCMOutcomeComponent.prototype.onCallResultChanged = function (type, data) {&#13;
	        console.log('Comment Box : ' + data);&#13;
	        if (this.callRes !== null) {&#13;
	            var res = {&#13;
	                id: this.callRes.CallId,&#13;
	                type: type,&#13;
	                val: data&#13;
	            };&#13;
	            var val = void 0;&#13;
	            if (type === 'Comment') {&#13;
	                this.comment = data;&#13;
	                this.sfAppService.UpdateCallResult(res);&#13;
	            }&#13;
	            else if (type === 'Wrapup') {&#13;
	                val = this.wrapupLst[data];&#13;
	                if (val !== undefined) {&#13;
	                    this.selectedWrapup = val.Id;&#13;
	                    res.val = val;&#13;
	                    this.sfAppService.UpdateCallResult(res);&#13;
	                }&#13;
	            }&#13;
	            else if (type === 'WhoId') {&#13;
	                val = this.whoLst[data];&#13;
	                if (val !== undefined) {&#13;
	                    //if(val.ObjectType === 'Lead'){&#13;
	                    //    this.selectedWhat = '';                        &#13;
	                    //}&#13;
	                    this.selectedWho = val.Id;&#13;
	                    res.val = val;&#13;
	                    this.sfAppService.UpdateCallResult(res);&#13;
	                }&#13;
	            }&#13;
	            else if (type === 'WhatId') {&#13;
	                val = this.whatLst[data];&#13;
	                if (val !== undefined) {&#13;
	                    this.selectedWhat = val.Id;&#13;
	                    res.val = val;&#13;
	                    this.sfAppService.UpdateCallResult(res);&#13;
	                }&#13;
	            }&#13;
	        }&#13;
	    };&#13;
	    LCMOutcomeComponent.prototype.getBusinessOutcomeBasedOnParent = function (parentIdParam) {&#13;
	    };&#13;
	    LCMOutcomeComponent.prototype.onKeyDownEvent = function (key) {&#13;
	        if ((key === 8 || key === 27 || key === 35 || key === 36 || key === 37 || key === 38 || key === 39 || key === 40 ||&#13;
	            key === 46 || key === 110 || key === 190) || (key &gt;= 48 &amp;&amp; key &lt;= 57) || (key &gt;= 96 &amp;&amp; key &lt;= 106)) {&#13;
	            return true;&#13;
	        }&#13;
	        return false;&#13;
	    };&#13;
	    LCMOutcomeComponent.prototype.UpdateLCMOutcome = function (form) {&#13;
	    };&#13;
	    LCMOutcomeComponent = __decorate([&#13;
	        core_1.Component({&#13;
	            selector: 'lcm-outcome',&#13;
	            template: __webpack_require__(93)&#13;
	        }), &#13;
	        __metadata('design:paramtypes', [(typeof (_a = typeof app_service_1.SFAppService !== 'undefined' &amp;&amp; app_service_1.SFAppService) === 'function' &amp;&amp; _a) || Object, (typeof (_b = typeof router_1.Router !== 'undefined' &amp;&amp; router_1.Router) === 'function' &amp;&amp; _b) || Object, (typeof (_c = typeof core_1.NgZone !== 'undefined' &amp;&amp; core_1.NgZone) === 'function' &amp;&amp; _c) || Object])&#13;
	    ], LCMOutcomeComponent);&#13;
	    return LCMOutcomeComponent;&#13;
	    var _a, _b, _c;&#13;
	}());&#13;
	exports.LCMOutcomeComponent = LCMOutcomeComponent;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 93 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "&lt;div class=\"panel info-panel call-log lcm-out-com\"&gt;\r\n    &lt;div class=\"row info-title\"&gt;\r\n        &lt;div class=\"col-xs-12\"&gt;Outcome&lt;/div&gt;\r\n    &lt;/div&gt;\r\n    &lt;form #outcomeForm=\"ngForm\" (ngSubmit)=\"UpdateLCMOutcome(outcomeForm)\"&gt;\r\n        &lt;div class=\"info-records\"&gt;\r\n            &lt;div class=\"form-group\" &gt;\r\n                &lt;label for=\"exampleInputEmail1\"&gt;Name&lt;/label&gt;\r\n                &lt;select class=\"form-control form-control-sm\" (change)=\"onCallResultChanged('WhoId' , $event.target.selectedIndex)\" [ngModel]=\"selectedWho\" name=\"whoId\"&gt;\r\n                    &lt;option *ngFor=\"let item of whoLst\" [value]=\"item.Id\"&gt;{{item.Name}}&lt;/option&gt;\r\n                &lt;/select&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"form-group\"&gt;\r\n                &lt;label for=\"exampleSelect1\"&gt;Related to&lt;/label&gt;\r\n                &lt;select class=\"form-control form-control-sm\" (change)=\"onCallResultChanged('WhatId' , $event.target.selectedIndex)\" [(ngModel)]=\"selectedWhat\" name=\"relateTo\"&gt;\r\n                    &lt;option *ngFor=\"let item of whatLst\" [value]=\"item.Id\"&gt;{{item.Name}}&lt;/option&gt;\r\n                &lt;/select&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"form-group\" [ngClass]=\"{'outcome-control': isDisableOutcome}\"&gt;\r\n                &lt;label&gt;Outcome&lt;/label&gt;\r\n                &lt;select name=\"Outcome\" class=\"form-control form-control-sm\" *ngIf=\"calloutcomes\" [(ngModel)]=\"telephonyOutcomeSelected\" (ngModelChange)=\"telephonyOutcomeOnChange($event)\"&gt;\r\n                    &lt;option *ngFor=\"let item of calloutcomes.CallOutCome\" [value]=\"item.OutComeID\"&gt;{{item.Description}}&lt;/option&gt;\r\n                &lt;/select&gt;\r\n            &lt;/div&gt;\r\n            &lt;div *ngIf=\"lcmCBVisibility\" class=\"form-group\"&gt;\r\n                &lt;label&gt;Select DateTime&lt;/label&gt;\r\n                &lt;!--&lt;div class=\"form-group\"&gt;\r\n                    &lt;div class='input-group date' id=\"stDate{{workspace.callDialogID}}\" ng-init=\"initializeCBDate('stDate'+workspace.callDialogID)\"&gt;\r\n                        &lt;input type='text' ng-model=\"workspace.startDate\" class=\"form-control input-sm\" readonly /&gt;\r\n                        &lt;span class=\"input-group-addon  input-sm\"&gt;\r\n                          &lt;span class=\"glyphicon glyphicon-calendar\"&gt;&lt;/span&gt;\r\n                        &lt;/span&gt;\r\n                    &lt;/div&gt;\r\n                &lt;/div&gt;--&gt;\r\n                &lt;datetime name=\"CallbackDateTime\" class=\"dt-control\" [(ngModel)]=\"cbdatetime\" [timepicker]=\"{ icon: 'icon-time',icons:{up:'icon-plus', down:'icon-minus'} }\" [datepicker]=\"datePickerOpt\"&gt;&lt;/datetime&gt;\r\n            &lt;/div&gt;\r\n            &lt;div *ngIf=\"lcmCBVisibility\" class=\"form-group\"&gt;\r\n                &lt;label&gt;List of modes&lt;/label&gt;\r\n                &lt;select name=\"List of modes\" *ngIf=\"modes\" [(ngModel)]=\"modeSelected\" class=\"form-control form-control-sm\"&gt;\r\n                    &lt;option *ngFor=\"let mode of modes.Mode\" [value]=\"mode.ModeID\"&gt;{{mode.Description}}&lt;/option&gt;\r\n                &lt;/select&gt;\r\n            &lt;/div&gt;\r\n            &lt;div *ngIf=\"lcmCBVisibilityPCB\" class=\"form-group\"&gt;\r\n                &lt;label&gt;\r\n                    &lt;input name=\"PCB\" type=\"checkbox\" [(ngModel)]=\"pcbChecked\" checked=\"checked\" value=\"false\" /&gt; PCB\r\n                &lt;/label&gt;\r\n            &lt;/div&gt;\r\n            &lt;div *ngIf=\"lcmDNCVisibility\" class=\"form-group\"&gt;\r\n                &lt;label&gt;\r\n                    &lt;input name=\"CampaignWiseDNC\" type=\"checkbox\" [(ngModel)]=\"campaignWiseDNCChecked\" title=\"CampaignWiseDNC\" value=\"false\" /&gt; Campaign Wise DNC\r\n                &lt;/label&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"form-group\" [ngClass]=\"{'outcome-control': isDisableOutcome}\"&gt;\r\n                &lt;label&gt;Parent Business Outcome&lt;/label&gt;\r\n                &lt;select name=\"ParentBusinessOutcome\" [disabled]=\"!isBusEnable\" class=\"form-control form-control-sm\" *ngIf=\"boGroupParents\" [(ngModel)]=\"parentBusOutcomeCombo\" (ngModelChange)=\"getBusinessOutcomeBasedOnParent($event)\"&gt;\r\n                    &lt;option *ngFor=\"let item of boGroupParents.BOGroupParent\" [value]=\"item.ParentId\"&gt;{{item.ParentName}}&lt;/option&gt;\r\n                &lt;/select&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"form-group\"&gt;\r\n                &lt;label&gt;Business Outcome&lt;/label&gt;\r\n                &lt;select name=\"BusinessOutcome\" [disabled]=\"!isBusEnable\" class=\"form-control form-control-sm\" *ngIf=\"busoutcomes\" [(ngModel)]=\"busOutcomeCombo\"&gt;\r\n                    &lt;option *ngFor=\"let item of busoutcomes.BusinessOutCome\" [value]=\"item.OutComeID\"&gt;{{item.Description}}&lt;/option&gt;\r\n                &lt;/select&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"form-group\" [ngClass]=\"{'outcome-control': isDisableOutcome}\"&gt;\r\n                &lt;label&gt;Target Achieved&lt;/label&gt;\r\n                &lt;input name=\"TargetAchieved\" type=\"text\" class=\"form-control form-control-sm\" [(ngModel)]=\"targetAmount\" (keydown)=\"onKeyDownEvent($event.keyCode)\" /&gt;\r\n            &lt;/div&gt;\r\n            &lt;!-- &lt;div class=\"form-group\"&gt;\r\n                &lt;label for=\"exampleSelect2\"&gt;Wrap up&lt;/label&gt;\r\n                &lt;select class=\"form-control form-control-sm\" (change)=\"onCallResultChanged('Wrapup' , $event.target.selectedIndex)\" [ngModel]=\"selectedWrapup\" name=\"callwrapSelected\"&gt;\r\n                        &lt;option *ngFor=\"let item of wrapupLst\" [ngValue]=\"item.Id\"&gt;{{item.Label}}&lt;/option&gt;\r\n                    &lt;/select&gt;\r\n            &lt;/div&gt; --&gt;\r\n            &lt;div class=\"form-group\"&gt;\r\n                &lt;label&gt;Comments&lt;/label&gt;\r\n                &lt;textarea #ta [(value)]='comment' (blur)=\"onCallResultChanged('Comment', ta.value)\" class=\"form-control form-control-sm\" id=\"Textarea1\" placeholder=\"Comments\" style=\"width: 100%; margin-bottom: 5px; border: 1px solid lightgrey;resize:none;\"&gt;&lt;/textarea&gt;\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n        &lt;!-- &lt;button type=\"button\" class=\"btn btn-success btn-sm btn-block wrap-submit-button\" (click)=\"UpdateLCMOutcome()\"&gt;Save&lt;/button&gt; --&gt;\r\n        &lt;button [disabled]=\"outcomeForm.submitted\" type=\"submit\" class=\"btn btn-success btn-sm btn-block wrap-submit-button\"&gt;Submit&lt;/button&gt;\r\n\r\n    &lt;/form&gt;\r\n&lt;/div&gt;";&#13;
&#13;
/***/ }),&#13;
/* 94 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var __decorate = (this &amp;&amp; this.__decorate) || function (decorators, target, key, desc) {&#13;
	    var c = arguments.length, r = c &lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);&#13;
	    else for (var i = decorators.length - 1; i &gt;= 0; i--) if (d = decorators[i]) r = (c &lt; 3 ? d(r) : c &gt; 3 ? d(target, key, r) : d(target, key)) || r;&#13;
	    return c &gt; 3 &amp;&amp; r &amp;&amp; Object.defineProperty(target, key, r), r;&#13;
	};&#13;
	var __metadata = (this &amp;&amp; this.__metadata) || function (k, v) {&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.metadata === "function") return Reflect.metadata(k, v);&#13;
	};&#13;
	var core_1 = __webpack_require__(1);&#13;
	var Models = __webpack_require__(61);&#13;
	var app_service_1 = __webpack_require__(58);&#13;
	var lcm_method_1 = __webpack_require__(88);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var storage_1 = __webpack_require__(66);&#13;
	var NonPEWCComponent = (function () {&#13;
	    function NonPEWCComponent(sfAppService, zone) {&#13;
	        this.sfAppService = sfAppService;&#13;
	        this.zone = zone;&#13;
	        this.agentState = 'LOGOUT';&#13;
	        this.count = 0;&#13;
	        this.PCBcount = 0;&#13;
	        this.contact = null;&#13;
	        this.store = storage_1.default.getInstance();&#13;
	        this.v = new validation_1.Validation();&#13;
	        this.canGetContact = false;&#13;
	        this.lcm = new lcm_method_1.LCMConnector(this.IsUCCX, this.sfAppService);&#13;
	        this.showPEWC = true;&#13;
	        this.PCB = false;&#13;
	        this.showPCB = false;&#13;
	        this.canReject = false;&#13;
	        this.canDialCall = false;&#13;
	        this.prefixenable = false;&#13;
	        this.suffixenable = false;&#13;
	        this.lstKey = [&#13;
	            Models.LCMTopics.LCMContact,&#13;
	            Models.Topics.CallDetail&#13;
	        ];&#13;
	        this.CallInfo = new Array();&#13;
	        this.prefix = "";&#13;
	        this.suffix = "";&#13;
	        this.phone = "";&#13;
	        this.rejectclicked = false;&#13;
	        this.isActive = false;&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.evntLst = new Array();&#13;
	    }&#13;
	    NonPEWCComponent.prototype.ngOnInit = function () {&#13;
	    };&#13;
	    NonPEWCComponent.prototype.GetLatestCallResult = function () {&#13;
	    };&#13;
	    NonPEWCComponent.prototype.ngOnDestroy = function () {&#13;
	        for (var _i = 0, _a = this.evntLst; _i &lt; _a.length; _i++) {&#13;
	            var id = _a[_i];&#13;
	            console.log('AgentState Unregister event');&#13;
	            this.evnt.UnRegisterEvent(id);&#13;
	        }&#13;
	    };&#13;
	    NonPEWCComponent.prototype.changeControlOption = function () {&#13;
	    };&#13;
	    NonPEWCComponent = __decorate([&#13;
	        core_1.Component({&#13;
	            selector: 'non-pewc',&#13;
	            template: __webpack_require__(95),&#13;
	            styles: [__webpack_require__(96)]&#13;
	        }), &#13;
	        __metadata('design:paramtypes', [(typeof (_a = typeof app_service_1.SFAppService !== 'undefined' &amp;&amp; app_service_1.SFAppService) === 'function' &amp;&amp; _a) || Object, (typeof (_b = typeof core_1.NgZone !== 'undefined' &amp;&amp; core_1.NgZone) === 'function' &amp;&amp; _b) || Object])&#13;
	    ], NonPEWCComponent);&#13;
	    return NonPEWCComponent;&#13;
	    var _a, _b;&#13;
	}());&#13;
	exports.NonPEWCComponent = NonPEWCComponent;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 95 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "&lt;div *ngIf=\"showPCB\"&gt;\r\n    &lt;label title=\"Dial a call\" class=\"agent-btn\" [ngClass]=\"{ 'active': isActive == false }\" (click)=\"toggle('showPEWC')\"&gt;\r\n        &lt;span class=\"pull-left\"&gt;Dial a Call&lt;/span&gt;\r\n    &lt;/label&gt;\r\n    &lt;label title=\"PCB\" class=\"agent-btn\" [ngClass]=\"{ 'active': isActive == true }\" (click)=\"toggle('PCB')\"&gt;\r\n        &lt;span class=\"pull-left\"&gt;PCB&lt;/span&gt;\r\n    &lt;/label&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div *ngIf=\"showPEWC\"&gt;\r\n    &lt;div class=\"panel info-panel non-pewc-com\"&gt;\r\n        &lt;div class=\"row info-title\"&gt;\r\n            &lt;div class=\"col-xs-8\"&gt;Regular/NCB Calls&lt;/div&gt;\r\n            &lt;div class=\"col-xs-4 count\"&gt;\r\n                &lt;span class=\"badge badge-default\"&gt;{{count}}&lt;/span&gt;\r\n            &lt;/div&gt;\r\n            &lt;div *ngIf=\"showPCB\" class=\"col-xs-8\"&gt;PCB Calls&lt;/div&gt;\r\n            &lt;div *ngIf=\"showPCB\" class=\"col-xs-4 count\"&gt;\r\n                &lt;span class=\"badge badge-default\"&gt;{{PCBcount}}&lt;/span&gt;\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n        &lt;div class=\"dial-contact\"&gt;\r\n            &lt;div class=\"row col-xs-12\"&gt;\r\n                &lt;div class=\"icon-button\"&gt;\r\n                    &lt;button *ngIf=\"!canGetContact\" title=\"Get Contact\" class=\"btn btn-sm btn-secondary disabled\"&gt;\r\n                        &lt;span class=\"icon-user-button\"&gt;&lt;/span&gt;\r\n                    &lt;/button&gt;\r\n                    &lt;button *ngIf=\"canGetContact\" title=\"Get Contact\" class=\"btn btn-sm btn-secondary \" (click)=\"getContact()\"&gt;\r\n                        &lt;span class=\"icon-user-button\"&gt;&lt;/span&gt;\r\n                    &lt;/button&gt;\r\n                &lt;/div&gt;\r\n                &lt;div class=\"icon-button\"&gt;\r\n                    &lt;button *ngIf=\"!canReject\" title=\"Reject &amp; Close\" class=\"btn btn-sm btn-secondary disabled\"&gt;\r\n                        &lt;span class=\"icon-end-call-button-outline\"&gt;&lt;/span&gt;\r\n                    &lt;/button&gt;\r\n                    &lt;button *ngIf=\"canReject\" class=\"btn btn-sm btn-secondary btn-block\" (click)=\"reject()\"&gt;\r\n                        &lt;span class=\"icon-end-call-button-outline\"&gt;&lt;/span&gt;\r\n                    &lt;/button&gt;\r\n                &lt;/div&gt;\r\n                &lt;div class=\"icon-button\"&gt;\r\n                    &lt;button *ngIf=\"!canDialCall\" title=\"Make Call\" class=\"btn btn-sm btn-secondary disabled\"&gt;\r\n                        &lt;span class=\"icon-call-button-outline\"&gt;&lt;/span&gt;\r\n                    &lt;/button&gt;\r\n                    &lt;button *ngIf=\"canDialCall\" class=\"btn btn-sm btn-secondary\" (click)=\"dialCall()\"&gt;\r\n                        &lt;span class=\"icon-call-button-outline\"&gt;&lt;/span&gt;\r\n                    &lt;/button&gt;\r\n                &lt;/div&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"row\"&gt;\r\n                &lt;div class=\"col-xs-12\"&gt;Contact Number&lt;/div&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"row info-record contact-num\"&gt;\r\n                &lt;div class=\"col-xs-3\"&gt;\r\n                    &lt;input class=\"txtInput\" [disabled]=\"prefixenable\" type=\"number\" class=\"form-control form-control-sm\" [(ngModel)]=\"prefix\" /&gt;\r\n                &lt;/div&gt;\r\n                &lt;div class=\"col-xs-6\" no-padding&gt;\r\n                    &lt;input class=\"txtInput\" type=\"number\" class=\"form-control form-control-sm\" [(ngModel)]=\"phone\" readonly=\"readonly\" /&gt;\r\n                &lt;/div&gt;\r\n                &lt;div class=\"col-xs-3\"&gt;\r\n                    &lt;input class=\"txtInput\" [disabled]=\"suffixenable\" type=\"number\" class=\"form-control form-control-sm\" [(ngModel)]=\"suffix\" /&gt;\r\n                &lt;/div&gt;\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n        &lt;div class=\"row info-title\"&gt;\r\n            &lt;div class=\"col-xs-12\"&gt;Contact Details&lt;/div&gt;\r\n        &lt;/div&gt;\r\n        &lt;div class=\"info-records\"&gt;\r\n            &lt;div class=\"row info-record\"&gt;\r\n                &lt;div class=\"col-xs-6\"&gt;Campaign&lt;/div&gt;\r\n                &lt;div class=\"col-xs-6\"&gt;{{contact!= null ? contact.CampaignId : ''}}&lt;/div&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"row info-record\"&gt;\r\n                &lt;div class=\"col-xs-6\"&gt;Contact ID&lt;/div&gt;\r\n                &lt;div class=\"col-xs-6\"&gt;{{contact!= null ? contact.ContactId : ''}}&lt;/div&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"row info-record\"&gt;\r\n                &lt;div class=\"col-xs-6\"&gt;Call Type&lt;/div&gt;\r\n                &lt;div class=\"col-xs-6\"&gt;{{contact!= null ? contact.CallType : ''}}&lt;/div&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"row info-record\"&gt;\r\n                &lt;div class=\"col-xs-6\"&gt;Expiry Time&lt;/div&gt;\r\n                &lt;div class=\"col-xs-6\"&gt;{{contact!= null ? contact.ExpiryTime : ''}}&lt;/div&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"row info-record\"&gt;\r\n                &lt;div class=\"col-xs-6\"&gt;Callback Time&lt;/div&gt;\r\n                &lt;div class=\"col-xs-6\"&gt;{{contact!= null ? contact.CallbackTime : ''}}&lt;/div&gt;\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n    &lt;/div&gt;\r\n&lt;/div&gt;\r\n&lt;div *ngIf=\"PCB\"&gt;\r\n    &lt;table style=\"font-size: 14px;\" border=\"1\"&gt;\r\n        &lt;tr&gt;\r\n            &lt;td&gt;Contact ID&lt;/td&gt;\r\n            &lt;td&gt;Number&lt;/td&gt;\r\n            &lt;td&gt;Expiry Time&lt;/td&gt;\r\n            &lt;td&gt;CallBack Time&lt;/td&gt;\r\n        &lt;/tr&gt;\r\n        &lt;tr *ngFor=\"let item of PCBData; let idx = index\"&gt;\r\n            &lt;td&gt;{{item.ContactID}}&lt;/td&gt;\r\n            &lt;td&gt;{{item.PhoneNumber}}&lt;/td&gt;\r\n            &lt;td&gt;{{item.ExpiryTime}}&lt;/td&gt;\r\n            &lt;td&gt;{{item.CallBackTime}}&lt;/td&gt;\r\n        &lt;/tr&gt;\r\n    &lt;/table&gt;\r\n&lt;/div&gt;";&#13;
&#13;
/***/ }),&#13;
/* 96 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "/** Acquone theme**/\n/** Acquone theme end**/\n.agent-btn {\n  padding: .25rem 0.3rem !important;\n  border-bottom: 2px solid rgba(102, 102, 102, 0.2);\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 12px; }\n\n.agent-btn.active {\n  border-bottom-color: #004487 !important; }\n\n.panel.non-pewc-com .info-records {\n  height: 140px;\n  overflow-y: auto;\n  overflow-x: hidden;\n  font-size: 10px; }\n\n.panel.non-pewc-com .dial-contact .row {\n  border-bottom: none !important;\n  font-size: smaller; }\n\n.panel.non-pewc-com .dial-contact .icon-button {\n  display: inline-flex;\n  margin-right: 5px; }\n  .panel.non-pewc-com .dial-contact .icon-button .btn {\n    outline: none; }\n    .panel.non-pewc-com .dial-contact .icon-button .btn.disabled {\n      color: #ccc; }\n      .panel.non-pewc-com .dial-contact .icon-button .btn.disabled .icon-user-button:before, .panel.non-pewc-com .dial-contact .icon-button .btn.disabled .icon-call-button-outline:before, .panel.non-pewc-com .dial-contact .icon-button .btn.disabled .icon-call-button-outline:before {\n        color: #969492 !important; }\n  .panel.non-pewc-com .dial-contact .icon-button .btn {\n    outline: none;\n    padding: 0px;\n    font-size: 20px;\n    border: none;\n    background: none; }\n    .panel.non-pewc-com .dial-contact .icon-button .btn.disabled {\n      color: #ccc; }\n      .panel.non-pewc-com .dial-contact .icon-button .btn.disabled .icon-user-button:before, .panel.non-pewc-com .dial-contact .icon-button .btn.disabled .icon-call-button-outline:before, .panel.non-pewc-com .dial-contact .icon-button .btn.disabled .icon-end-call-button-outline:before {\n        color: #969492 !important; }\n\n.panel.non-pewc-com .row .count {\n  padding-right: 10px;\n  text-align: right; }\n\n.panel.non-pewc-com .row.container {\n  border: 0px;\n  padding: 0px; }\n  .panel.non-pewc-com .row.container .txtPadding {\n    padding-left: 2px;\n    padding-right: 2px; }\n    .panel.non-pewc-com .row.container .txtPadding .txtInput {\n      width: 100%;\n      border-radius: 0px; }\n\n.panel.non-pewc-com .badge {\n  display: inline-block;\n  padding: .25em .4em;\n  font-size: 75%;\n  font-weight: 700;\n  line-height: 1;\n  color: #fff;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: baseline;\n  border-radius: .25rem;\n  font-size: 11px;\n  padding: 3px 5px; }\n\n.panel.non-pewc-com .badge-default {\n  background-color: #636c72; }\n\n.panel.non-pewc-com .contact-num .form-control-sm {\n  padding: 4px 4px;\n  font-size: 15px; }\n\n.panel.non-pewc-com .contact-num .form-control-ph {\n  padding: 4px 4px;\n  font-size: 10px; }\n\n.panel.non-pewc-com input[type=number]::-webkit-inner-spin-button,\n.panel.non-pewc-com input[type=number]::-webkit-outer-spin-button {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  margin: 0; }\n"&#13;
&#13;
/***/ }),&#13;
/* 97 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var __decorate = (this &amp;&amp; this.__decorate) || function (decorators, target, key, desc) {&#13;
	    var c = arguments.length, r = c &lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);&#13;
	    else for (var i = decorators.length - 1; i &gt;= 0; i--) if (d = decorators[i]) r = (c &lt; 3 ? d(r) : c &gt; 3 ? d(target, key, r) : d(target, key)) || r;&#13;
	    return c &gt; 3 &amp;&amp; r &amp;&amp; Object.defineProperty(target, key, r), r;&#13;
	};&#13;
	var __metadata = (this &amp;&amp; this.__metadata) || function (k, v) {&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.metadata === "function") return Reflect.metadata(k, v);&#13;
	};&#13;
	var core_1 = __webpack_require__(1);&#13;
	var PageNotFoundComponent = (function () {&#13;
	    function PageNotFoundComponent() {&#13;
	    }&#13;
	    PageNotFoundComponent.prototype.ngOnInit = function () { };&#13;
	    PageNotFoundComponent = __decorate([&#13;
	        core_1.Component({&#13;
	            selector: 'page-not-found',&#13;
	            template: __webpack_require__(98)&#13;
	        }), &#13;
	        __metadata('design:paramtypes', [])&#13;
	    ], PageNotFoundComponent);&#13;
	    return PageNotFoundComponent;&#13;
	}());&#13;
	exports.PageNotFoundComponent = PageNotFoundComponent;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 98 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "Page not found";&#13;
&#13;
/***/ }),&#13;
/* 99 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var __decorate = (this &amp;&amp; this.__decorate) || function (decorators, target, key, desc) {&#13;
	    var c = arguments.length, r = c &lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);&#13;
	    else for (var i = decorators.length - 1; i &gt;= 0; i--) if (d = decorators[i]) r = (c &lt; 3 ? d(r) : c &gt; 3 ? d(target, key, r) : d(target, key)) || r;&#13;
	    return c &gt; 3 &amp;&amp; r &amp;&amp; Object.defineProperty(target, key, r), r;&#13;
	};&#13;
	var __metadata = (this &amp;&amp; this.__metadata) || function (k, v) {&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.metadata === "function") return Reflect.metadata(k, v);&#13;
	};&#13;
	var core_1 = __webpack_require__(1);&#13;
	var app_service_1 = __webpack_require__(58);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var logger_1 = __webpack_require__(63);&#13;
	var CallIncidentComponent = (function () {&#13;
	    function CallIncidentComponent(sfAppService, zone) {&#13;
	        //console.log('%c REGISTER ', 'color:#AA8000'); &#13;
	        this.sfAppService = sfAppService;&#13;
	        this.zone = zone;&#13;
	        this.logger = new logger_1.CustomLogger('CallIncidentComponent');&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.evntLst = new Array();&#13;
	        this.call = null;&#13;
	        this.incident = null;&#13;
	    }&#13;
	    CallIncidentComponent.prototype.ngOnInit = function () {&#13;
	        var _this = this;&#13;
	        console.log("Call INCIDENT : ONINIT");&#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.CurrentCallDetail, function (type, data) {&#13;
	            _this.zone.run(function () {&#13;
	                console.log('call-incident.components - CurrentCallDetail : ', data);&#13;
	                _this.call = data;&#13;
	                _this.updateCallVariable();&#13;
	            });&#13;
	        }));&#13;
	        this.zone.run(function () {&#13;
	            console.log('call-incident.components - zone run : ', _this.sfAppService.Call);&#13;
	            _this.call = _this.sfAppService.Call;&#13;
	            _this.updateCallVariable();&#13;
	        });&#13;
	    };&#13;
	    CallIncidentComponent.prototype.ngOnDestroy = function () {&#13;
	        for (var _i = 0, _a = this.evntLst; _i &lt; _a.length; _i++) {&#13;
	            var id = _a[_i];&#13;
	            console.log('CallIncident Unregister event');&#13;
	            this.evnt.UnRegisterEvent(id);&#13;
	        }&#13;
	    };&#13;
	    CallIncidentComponent.prototype.updateCallVariable = function () {&#13;
	        // if (this.call !== null) {&#13;
	        if (this.sfAppService.incident != null) {&#13;
	            this.incident = this.sfAppService.incident;&#13;
	        }&#13;
	        if (this.sfAppService != null) {&#13;
	            this.allincident = this.sfAppService.allincidents;&#13;
	        }&#13;
	        // } &#13;
	    };&#13;
	    CallIncidentComponent.prototype.openIncident = function (incidentId) {&#13;
	        console.log('CALL INCIDENT COMPONENT : Open Incident : ' + incidentId);&#13;
	        this.sfAppService.currentSelectedIncident = incidentId;&#13;
	        this.sfAppService.sn.openIncident(incidentId);&#13;
	    };&#13;
	    CallIncidentComponent = __decorate([&#13;
	        core_1.Component({&#13;
	            selector: 'call-incident',&#13;
	            template: __webpack_require__(100),&#13;
	            styles: [__webpack_require__(101)]&#13;
	        }), &#13;
	        __metadata('design:paramtypes', [(typeof (_a = typeof app_service_1.SFAppService !== 'undefined' &amp;&amp; app_service_1.SFAppService) === 'function' &amp;&amp; _a) || Object, (typeof (_b = typeof core_1.NgZone !== 'undefined' &amp;&amp; core_1.NgZone) === 'function' &amp;&amp; _b) || Object])&#13;
	    ], CallIncidentComponent);&#13;
	    return CallIncidentComponent;&#13;
	    var _a, _b;&#13;
	}());&#13;
	exports.CallIncidentComponent = CallIncidentComponent;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 100 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "&lt;div class=\"panel info-panel call-incident-com\"&gt;\r\n    &lt;div class=\"row info-title\"&gt;\r\n        &lt;div class=\"col-xs-12\"&gt;Caller Incidents&lt;/div&gt;\r\n    &lt;/div&gt;\r\n    \r\n    &lt;div&gt;\r\n        &lt;div class=\"row\"&gt;\r\n            &lt;div class=\"col-xs-6\" style=\"width: 33%;font-size: x-small;\"&gt;Incident ID&lt;/div&gt;\r\n            &lt;div class=\"col-xs-6\" style=\"width: 33%;font-size: x-small;\"&gt;Created On&lt;/div&gt;\r\n            &lt;div class=\"col-xs-6\" style=\"width: 33%;font-size: x-small;\"&gt;Created By&lt;/div&gt;\r\n        &lt;/div&gt;\r\n    &lt;/div&gt;\r\n\r\n    &lt;div *ngIf=\"incident !== null &amp;&amp; incident !== undefined\" class=\"info-records\"&gt;\r\n        &lt;div class=\"row info-record\" *ngFor=\"let v of allincident\"&gt;\r\n            &lt;div class=\"col-xs-6\" style=\"width: 33%;font-size: x-small;\"&gt;&lt;a [routerLink]=\"\" (click)=\"openIncident($event.target.innerText)\"&gt;{{v.Number}}&lt;/a&gt;&lt;/div&gt;\r\n            &lt;div class=\"col-xs-6\" style=\"width: 33%;font-size: x-small;\"&gt;{{v.CreatedOn}}&lt;/div&gt;\r\n            &lt;div class=\"col-xs-6\" style=\"width: 33%;font-size: x-small;\"&gt;{{v.CreatedBy}}&lt;/div&gt;\r\n        &lt;/div&gt;\r\n    &lt;/div&gt;\r\n&lt;/div&gt;";&#13;
&#13;
/***/ }),&#13;
/* 101 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = ".panel.call-incident-com .info-records {\n  height: 150px;\n  overflow-y: auto;\n  overflow-x: hidden;\n  font-size: x-small; }\n"&#13;
&#13;
/***/ }),&#13;
/* 102 */,&#13;
/* 103 */,&#13;
/* 104 */,&#13;
/* 105 */,&#13;
/* 106 */,&#13;
/* 107 */,&#13;
/* 108 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var __decorate = (this &amp;&amp; this.__decorate) || function (decorators, target, key, desc) {&#13;
	    var c = arguments.length, r = c &lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);&#13;
	    else for (var i = decorators.length - 1; i &gt;= 0; i--) if (d = decorators[i]) r = (c &lt; 3 ? d(r) : c &gt; 3 ? d(target, key, r) : d(target, key)) || r;&#13;
	    return c &gt; 3 &amp;&amp; r &amp;&amp; Object.defineProperty(target, key, r), r;&#13;
	};&#13;
	var __metadata = (this &amp;&amp; this.__metadata) || function (k, v) {&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.metadata === "function") return Reflect.metadata(k, v);&#13;
	};&#13;
	var core_1 = __webpack_require__(1);&#13;
	var app_service_1 = __webpack_require__(58);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var logger_1 = __webpack_require__(63);&#13;
	var AgentStateComponent = (function () {&#13;
	    function AgentStateComponent(appService, zone) {&#13;
	        var _this = this;&#13;
	        this.appService = appService;&#13;
	        this.zone = zone;&#13;
	        this.logger = new logger_1.CustomLogger('AgentStateComponent');&#13;
	        this.evntLst = new Array();&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.agentStateTimerId = null;&#13;
	        this.agentTime = 0;&#13;
	        this.extn = '';&#13;
	        this.loginId = '';&#13;
	        this.agentTimeText = '00:00';&#13;
	        this.currentState = 'LOGOUT';&#13;
	        this.reasonText = '';&#13;
	        this.currentStateColor = 'red';&#13;
	        this.nextStates = new Array();&#13;
	        this.v = new validation_1.Validation();&#13;
	        this.logger.Debug('Constructor loaded...');&#13;
	        //console.log('%c REGISTER ', 'color:#AA8000'); &#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.appService.TopicList.AgentDetail, function (event, data) {&#13;
	            _this.logger.Debug('On Agent State Change');&#13;
	            _this.zone.run(function () {&#13;
	                _this.onAgentStateChange(data);&#13;
	                _this.refreshNextStates(_this.appService.NotReadyReasonCode);&#13;
	            });&#13;
	        }));&#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.appService.TopicList.NotReadyResonCode, function (event, data) {&#13;
	            _this.logger.Debug('On Next state refresh');&#13;
	            _this.zone.run(function () {&#13;
	                _this.refreshNextStates(data);&#13;
	            });&#13;
	        }));&#13;
	        this.zone.run(function () {&#13;
	            _this.onAgentStateChange(_this.appService.AgentDetail);&#13;
	            _this.refreshNextStates(_this.appService.NotReadyReasonCode);&#13;
	        });&#13;
	    }&#13;
	    AgentStateComponent.prototype.ngOnInit = function () {&#13;
	    };&#13;
	    AgentStateComponent.prototype.ngOnDestroy = function () {&#13;
	        for (var _i = 0, _a = this.evntLst; _i &lt; _a.length; _i++) {&#13;
	            var id = _a[_i];&#13;
	            this.logger.Debug('');&#13;
	            console.log('ngOnDestroy - AgentState Unregister event :' + id);&#13;
	            this.evnt.UnRegisterEvent(id);&#13;
	        }&#13;
	        if (this.agentStateTimerId !== null) {&#13;
	            clearInterval(this.agentStateTimerId);&#13;
	            this.agentStateTimerId = null;&#13;
	        }&#13;
	    };&#13;
	    //change method for not ready reason code binding. &#13;
	    AgentStateComponent.prototype.onAgentStateChange = function (agent) {&#13;
	        var currState = agent.State;&#13;
	        var self = this;&#13;
	        this.extn = agent.Extension;&#13;
	        this.agentTime = agent.StateChangeTime;&#13;
	        //if (agent.State === 'LOGOUT' &amp;&amp; this.agentStateTimerId === null ) {&#13;
	        if (agent.State === 'LOGOUT') {&#13;
	            clearInterval(this.agentStateTimerId);&#13;
	            this.agentStateTimerId = null;&#13;
	            //this.startTimer(0);&#13;
	            this.startTimer("CLEAR");&#13;
	        }&#13;
	        else if (this.agentStateTimerId === null) {&#13;
	            this.startTimer("SET");&#13;
	        }&#13;
	        if (currState.toUpperCase() == "BUSY") {&#13;
	            currState = "TALKING";&#13;
	        }&#13;
	        this.currentState = this.capitalizeFirstLetter(currState.toLowerCase());&#13;
	        if (this.currentState == 'Available') {&#13;
	            this.currentStateColor = 'green';&#13;
	        }&#13;
	        else {&#13;
	            this.currentStateColor = 'red';&#13;
	        }&#13;
	    };&#13;
	    AgentStateComponent.prototype.startTimer = function (flag) {&#13;
	        var duration = 0;&#13;
	        var self = this;&#13;
	        var timer = duration, minutes, seconds;&#13;
	        if (flag == "SET") {&#13;
	            this.agentStateTimerId = setInterval(function () {&#13;
	                minutes = parseInt(timer / 60, 10);&#13;
	                seconds = parseInt(timer % 60, 10);&#13;
	                minutes = minutes &lt; 10 ? "0" + minutes : minutes;&#13;
	                seconds = seconds &lt; 10 ? "0" + seconds : seconds;&#13;
	                self.agentTimeText = minutes + ":" + seconds;&#13;
	                if (++timer &lt; 0) {&#13;
	                    timer = duration;&#13;
	                }&#13;
	            }, 1000);&#13;
	        }&#13;
	        else if (flag == "CLEAR") {&#13;
	            clearInterval(this.agentStateTimerId);&#13;
	        }&#13;
	    };&#13;
	    AgentStateComponent.prototype.refreshNextStates = function (reasonCodes) {&#13;
	        var reasonCode;&#13;
	        this.nextStates = [];&#13;
	        if (this.v.IsNotNullOrEmptyArray(reasonCodes)) {&#13;
	            for (var i = 0; i &lt; reasonCodes.length; i++) {&#13;
	                //Sorting Statest Text&#13;
	                reasonCodes.sort(function (a, b) {&#13;
	                    var nameA = a.Label.toLowerCase(), nameB = b.Label.toLowerCase();&#13;
	                    if (nameA &lt; nameB)&#13;
	                        return -1;&#13;
	                    if (nameA &gt; nameB)&#13;
	                        return 1;&#13;
	                    return 0; //default return value (no sorting)&#13;
	                });&#13;
	                reasonCode = reasonCodes[i];&#13;
	                if (reasonCode.Label == 'Available') {&#13;
	                    this.nextStates.push({ id: reasonCode.Label, value: reasonCode.Label, color: 'green' });&#13;
	                }&#13;
	                else if (reasonCode.Label == 'LOGOUT') {&#13;
	                    this.nextStates.push({ id: reasonCode.Label, value: reasonCode.Label, color: 'yellow' });&#13;
	                }&#13;
	                else {&#13;
	                    this.nextStates.push({ id: reasonCode.Label, value: reasonCode.Label, color: 'red' });&#13;
	                }&#13;
	            }&#13;
	        }&#13;
	    };&#13;
	    AgentStateComponent.prototype.changeAgentStateTime = function () {&#13;
	    };&#13;
	    AgentStateComponent.prototype.capitalizeFirstLetter = function (str) {&#13;
	        return str.charAt(0).toUpperCase() + str.slice(1);&#13;
	    };&#13;
	    AgentStateComponent.prototype.changeAgentState = function (state) {&#13;
	        this.logger.Debug('changeAgentState state :' + state);&#13;
	        // clearInterval(this.agentStateTimerId);&#13;
	        // this.startTimer(0);&#13;
	        this.startTimer("CLEAR");&#13;
	        this.startTimer("SET");&#13;
	        this.appService.ChangeAgentState(state.id);&#13;
	    };&#13;
	    AgentStateComponent = __decorate([&#13;
	        core_1.Component({&#13;
	            selector: 'sf-agent',&#13;
	            template: __webpack_require__(109),&#13;
	            styles: [__webpack_require__(110)]&#13;
	        }), &#13;
	        __metadata('design:paramtypes', [(typeof (_a = typeof app_service_1.SFAppService !== 'undefined' &amp;&amp; app_service_1.SFAppService) === 'function' &amp;&amp; _a) || Object, (typeof (_b = typeof core_1.NgZone !== 'undefined' &amp;&amp; core_1.NgZone) === 'function' &amp;&amp; _b) || Object])&#13;
	    ], AgentStateComponent);&#13;
	    return AgentStateComponent;&#13;
	    var _a, _b;&#13;
	}());&#13;
	exports.AgentStateComponent = AgentStateComponent;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 109 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "\r\n&lt;div ngbDropdown class=\"d-block state-option\"&gt;\r\n    &lt;div class=\"btn-status\" id=\"dropdownMenu1\" ngbDropdownToggle&gt;\r\n        &lt;span class=\"state-dot {{currentStateColor}}\"&gt;&lt;/span&gt; &lt;span class=\"current-state\"&gt;{{currentState}}&lt;/span&gt; &lt;span class=\"reason-text\"&gt;{{reasonText}}&lt;/span&gt;\r\n        &lt;small class=\"text-muted state-time\"&gt;{{agentTimeText}}&lt;/small&gt;\r\n    &lt;/div&gt;\r\n    &lt;div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\"&gt;\r\n        &lt;button *ngFor=\"let st of nextStates\" class=\"dropdown-item\" (click)=\"changeAgentState(st)\"&gt;&lt;span class=\"state-dot {{st.color}}\"&gt;&lt;/span&gt; {{st.value}}&lt;/button&gt;\r\n    &lt;/div&gt;\r\n&lt;/div&gt;\r\n\r\n\r\n";&#13;
&#13;
/***/ }),&#13;
/* 110 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "/** Acquone theme**/\n/** Acquone theme end**/\n/** Lightning Theme **/\n.skin-lightning .sf-wrap.sf-agent .sf-banner .panel .btn-status {\n  text-transform: uppercase; }\n  .skin-lightning .sf-wrap.sf-agent .sf-banner .panel .btn-status .state-time {\n    color: #004487 !important; }\n\n/** End of Lightning Theme **/\n/** Classic Theme **/\n.skin-classic .sf-wrap.sf-agent .sf-banner .panel .btn-status {\n  text-transform: uppercase; }\n  .skin-classic .sf-wrap.sf-agent .sf-banner .panel .btn-status .state-time {\n    color: #f99b41 !important; }\n\n/** End of Classic Theme **/\n.sf-wrap.sf-agent .sf-banner {\n  padding: 1px 0; }\n  .sf-wrap.sf-agent .sf-banner .panel {\n    border: 0;\n    font-size: 13px;\n    font-weight: 600;\n    margin: 0 0px -1px;\n    background-color: #fff;\n    color: #3c3c3c;\n    position: relative;\n    z-index: 9;\n    /*z-index:9*/\n    overflow: visible; }\n    .sf-wrap.sf-agent .sf-banner .panel .id-extn {\n      padding-bottom: 5px; }\n    .sf-wrap.sf-agent .sf-banner .panel .state-option {\n      font-size: 13px; }\n      .sf-wrap.sf-agent .sf-banner .panel .state-option .btn-status {\n        text-align: left;\n        font-size: 12px;\n        color: #333;\n        font-family: 'open_sansbold';\n        outline: none;\n        padding: 2px 10px 0 5px;\n        border: 1px solid rgba(102, 102, 102, 0.2);\n        height: 38px;\n        border-radius: 3px;\n        cursor: pointer; }\n        .sf-wrap.sf-agent .sf-banner .panel .state-option .btn-status .current-state,\n        .sf-wrap.sf-agent .sf-banner .panel .state-option .btn-status .reason-text {\n          font-family: 'open_sansbold';\n          font-size: 11px;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          float: left;\n          position: relative;\n          white-space: nowrap; }\n        .sf-wrap.sf-agent .sf-banner .panel .state-option .btn-status .reason-text {\n          font-family: 'open_sansregular'; }\n        .sf-wrap.sf-agent .sf-banner .panel .state-option .btn-status:after {\n          position: absolute;\n          right: 7px;\n          top: 10px;\n          border-width: 6px; }\n        .sf-wrap.sf-agent .sf-banner .panel .state-option .btn-status:hover, .sf-wrap.sf-agent .sf-banner .panel .state-option .btn-status:focus {\n          text-decoration: none; }\n      .sf-wrap.sf-agent .sf-banner .panel .state-option .dropdown-menu {\n        z-index: 9999;\n        width: 100%;\n        padding: 0;\n        border-radius: 5px; }\n        .sf-wrap.sf-agent .sf-banner .panel .state-option .dropdown-menu .dropdown-item {\n          font-size: 12px;\n          padding: 3px 10px;\n          font-weight: 500;\n          text-transform: uppercase; }\n        .sf-wrap.sf-agent .sf-banner .panel .state-option .dropdown-menu .dropdown-item:hover {\n          background-color: #d3d3d3; }\n    .sf-wrap.sf-agent .sf-banner .panel .state-time {\n      padding-left: 15px;\n      position: absolute;\n      left: 3px;\n      top: 22px;\n      color: #01549b !important; }\n"&#13;
&#13;
/***/ }),&#13;
/* 111 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var __decorate = (this &amp;&amp; this.__decorate) || function (decorators, target, key, desc) {&#13;
	    var c = arguments.length, r = c &lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);&#13;
	    else for (var i = decorators.length - 1; i &gt;= 0; i--) if (d = decorators[i]) r = (c &lt; 3 ? d(r) : c &gt; 3 ? d(target, key, r) : d(target, key)) || r;&#13;
	    return c &gt; 3 &amp;&amp; r &amp;&amp; Object.defineProperty(target, key, r), r;&#13;
	};&#13;
	var __metadata = (this &amp;&amp; this.__metadata) || function (k, v) {&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.metadata === "function") return Reflect.metadata(k, v);&#13;
	};&#13;
	var core_1 = __webpack_require__(1);&#13;
	var app_service_1 = __webpack_require__(58);&#13;
	var models_1 = __webpack_require__(61);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var storage_1 = __webpack_require__(66); //NBC&#13;
	var ng_bootstrap_1 = __webpack_require__(102);&#13;
	var logger_1 = __webpack_require__(63); //NBC&#13;
	var CallControlComponent = (function () {&#13;
	    function CallControlComponent(modalService, sfAppService, zone) {&#13;
	        this.modalService = modalService;&#13;
	        this.sfAppService = sfAppService;&#13;
	        this.zone = zone;&#13;
	        this.call = null;&#13;
	        this.showDialpad = false;&#13;
	        this.agentState = '';&#13;
	        this.phoneNumber = '';&#13;
	        this.dialpadAction = '';&#13;
	        this.modalRef = null;&#13;
	        //NBC&#13;
	        this.logger = new logger_1.CustomLogger('CallControlComponent');&#13;
	        this.calls = new Array();&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.store = storage_1.default.getInstance();&#13;
	        this.evntLst = new Array();&#13;
	        this.onKeyPadPress = function (btnValue, txtBoxId) {&#13;
	            if (txtBoxId !== undefined) {&#13;
	                var el = document.getElementById(txtBoxId);&#13;
	                var val = el.value;&#13;
	                var position = val.slice(0, el.selectionStart).length;&#13;
	                var output = val.substr(0, position) + btnValue + val.substr(position);&#13;
	                el.value = output;&#13;
	                this.phoneNumber = output;&#13;
	                this.setCaretPosition(el, position + 1);&#13;
	            }&#13;
	        };&#13;
	    }&#13;
	    //NBC&#13;
	    CallControlComponent.prototype.ngOnChanges = function (changes) {&#13;
	        var _this = this;&#13;
	        if (changes.hasOwnProperty('showDialpad')) {&#13;
	            var t = changes['showDialpad'];&#13;
	            if (t.hasOwnProperty('currentValue') &amp;&amp; t['currentValue'] === false &amp;&amp; this.modalRef !== null) {&#13;
	                this.zone.run(function () {&#13;
	                    _this.clearModelRef(true);&#13;
	                });&#13;
	            }&#13;
	        }&#13;
	    };&#13;
	    CallControlComponent.prototype.ngOnDestroy = function () {&#13;
	    };&#13;
	    CallControlComponent.prototype.open = function (content, action) {&#13;
	        var _this = this;&#13;
	        this.logger.Debug('Agent Click ACTION : ' + action);&#13;
	        if (this.modalRef === null) {&#13;
	            this.dialpadAction = action;&#13;
	            this.modalRef = this.modalService.open(content);&#13;
	            this.modalRef.result.then(function (result) {&#13;
	            }, function (reason) {&#13;
	                if (reason === 'MakeCall') {&#13;
	                    _this.makeCallAction();&#13;
	                }&#13;
	                else {&#13;
	                    _this.clearModelRef(false);&#13;
	                }&#13;
	            });&#13;
	        }&#13;
	        else {&#13;
	            this.clearModelRef(true);&#13;
	        }&#13;
	    };&#13;
	    CallControlComponent.prototype.clearModelRef = function (canClose) {&#13;
	        var _this = this;&#13;
	        this.dialpadAction = '';&#13;
	        if (canClose === true &amp;&amp; this.modalRef !== null) {&#13;
	            setTimeout(function () {&#13;
	                console.log('Closing Modal pop up');&#13;
	                _this.modalRef.close('CancelCall');&#13;
	                _this.phoneNumber = '';&#13;
	                _this.modalRef = null;&#13;
	            }, 100);&#13;
	        }&#13;
	    };&#13;
	    CallControlComponent.prototype.makeCallAction = function (canClose) {&#13;
	        if (canClose === void 0) { canClose = false; }&#13;
	        this.logger.Debug('Agent Click makeCallAction ');&#13;
	        if (this.dialpadAction === 'MakeCall') {&#13;
	            this.store.SetData("IsConferenceDone", 'false'); //NBC&#13;
	            this.sfAppService.MakeCall(this.phoneNumber);&#13;
	        }&#13;
	        else if (this.dialpadAction === 'CONSULT' || this.dialpadAction === 'SST') {&#13;
	            this.sfAppService.DoCallAction(this.dialpadAction, { callId: this.call.Id, toAddress: this.phoneNumber });&#13;
	        }&#13;
	        this.clearModelRef(canClose);&#13;
	    };&#13;
	    CallControlComponent.prototype.doCallAction = function (action) {&#13;
	        this.logger.Debug('Agent Click ACTION : ' + action);&#13;
	        var option = {};&#13;
	        if (action === 'ANSWER' || action === 'DROP' || action === 'HOLD' || action === 'RETRIEVE'&#13;
	            || action === 'CONFERENCE' || action === 'TRANSFER' || action === 'CONSULT_ACCEPT'&#13;
	            || action === 'PREVIEWREJECT' || action === 'PREVIEWCLOSE') {&#13;
	            option = { callId: this.call.Id };&#13;
	        }&#13;
	        else if (action === 'BARGEIN') {&#13;
	        }&#13;
	        this.store.SetData('IsRejectOrClose', action);&#13;
	        this.sfAppService.DoCallAction(action, option);&#13;
	    };&#13;
	    CallControlComponent.prototype.onKeyDownEvent = function (key) {&#13;
	        var _this = this;&#13;
	        if (key === 13) {&#13;
	            //Dial a call from here&#13;
	            this.zone.run(function () {&#13;
	                _this.makeCallAction(true);&#13;
	            });&#13;
	            return true;&#13;
	        }&#13;
	        else if ((key === 8 || key === 27 || key === 35 || key === 36 || key === 37 || key === 38 || key === 39 || key === 40 ||&#13;
	            key === 46 || key === 110 || key === 190) || (key &gt;= 48 &amp;&amp; key &lt;= 57) || (key &gt;= 96 &amp;&amp; key &lt;= 106)) {&#13;
	            return true;&#13;
	        }&#13;
	        return false;&#13;
	    };&#13;
	    CallControlComponent.prototype.setCaretPosition = function (elem, caretPos) {&#13;
	        if (elem != null) {&#13;
	            if (elem.createTextRange) {&#13;
	                var range = elem.createTextRange();&#13;
	                range.move('character', caretPos);&#13;
	                range.select();&#13;
	            }&#13;
	            else {&#13;
	                if (elem.selectionStart) {&#13;
	                    elem.focus();&#13;
	                    elem.setSelectionRange(caretPos, caretPos);&#13;
	                }&#13;
	                else&#13;
	                    elem.focus();&#13;
	            }&#13;
	        }&#13;
	    };&#13;
	    ;&#13;
	    CallControlComponent.prototype.getDismissReason = function (reason) {&#13;
	        if (reason === ng_bootstrap_1.ModalDismissReasons.ESC) {&#13;
	            return 'by pressing ESC';&#13;
	        }&#13;
	        else if (reason === ng_bootstrap_1.ModalDismissReasons.BACKDROP_CLICK) {&#13;
	            return 'by clicking on a backdrop';&#13;
	        }&#13;
	        else {&#13;
	            return "with: " + reason;&#13;
	        }&#13;
	    };&#13;
	    __decorate([&#13;
	        core_1.Input(), &#13;
	        __metadata('design:type', (typeof (_a = typeof models_1.CallInfo !== 'undefined' &amp;&amp; models_1.CallInfo) === 'function' &amp;&amp; _a) || Object)&#13;
	    ], CallControlComponent.prototype, "call", void 0);&#13;
	    __decorate([&#13;
	        core_1.Input(), &#13;
	        __metadata('design:type', Boolean)&#13;
	    ], CallControlComponent.prototype, "showDialpad", void 0);&#13;
	    __decorate([&#13;
	        core_1.Input(), &#13;
	        __metadata('design:type', String)&#13;
	    ], CallControlComponent.prototype, "agentState", void 0);&#13;
	    CallControlComponent = __decorate([&#13;
	        //NBC&#13;
	        core_1.Component({&#13;
	            selector: 'sf-call',&#13;
	            template: __webpack_require__(112),&#13;
	            styles: [__webpack_require__(113)]&#13;
	        }), &#13;
	        __metadata('design:paramtypes', [(typeof (_b = typeof ng_bootstrap_1.NgbModal !== 'undefined' &amp;&amp; ng_bootstrap_1.NgbModal) === 'function' &amp;&amp; _b) || Object, (typeof (_c = typeof app_service_1.SFAppService !== 'undefined' &amp;&amp; app_service_1.SFAppService) === 'function' &amp;&amp; _c) || Object, (typeof (_d = typeof core_1.NgZone !== 'undefined' &amp;&amp; core_1.NgZone) === 'function' &amp;&amp; _d) || Object])&#13;
	    ], CallControlComponent);&#13;
	    return CallControlComponent;&#13;
	    var _a, _b, _c, _d;&#13;
	}());&#13;
	exports.CallControlComponent = CallControlComponent;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 112 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "&lt;template ngbModalContainer #content let-c=\"close\" let-d=\"dismiss\"&gt;\r\n\t&lt;div class=\"modal-body dial-pad call-control-com\" keyboard=\"false\"&gt;\r\n\t\t&lt;div class=\"row\"&gt;\r\n\t\t\t&lt;div class=\"dialpad-input\"&gt;\r\n\t\t\t\t&lt;input id=\"dialPadCallControl\" type=\"text\" placeholder=\"Dial now..\" [(ngModel)]=\"phoneNumber\" [ngClass]=\"{'form-control': true, 'dial-display': true, 'reduce-size': phoneNumber &amp;&amp; phoneNumber.length &gt; 10}\"  (keydown)=\"onKeyDownEvent($event.keyCode)\"&gt;\r\n\t\t\t&lt;/div&gt;\r\n\t\t&lt;/div&gt;\r\n\t\t&lt;div class=\"row\"&gt;\r\n\t\t\t&lt;div class=\"col-xs-4 col-sm-4\"&gt;&lt;button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('1','dialPadCallControl')\"&gt;1&lt;/button&gt;&lt;/div&gt;\r\n\t\t\t&lt;div class=\"col-xs-4 col-sm-4\"&gt;&lt;button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('2','dialPadCallControl')\"&gt;2&lt;/button&gt;&lt;/div&gt;\r\n\t\t\t&lt;div class=\"col-xs-4 col-sm-4\"&gt;&lt;button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('3','dialPadCallControl')\" &gt;3&lt;/button&gt;&lt;/div&gt;\r\n\t\t&lt;/div&gt;\r\n\t\t&lt;div class=\"row\"&gt;\r\n\t\t\t&lt;div class=\"col-xs-4 col-sm-4\"&gt;&lt;button type=\"button\" class=\"btn btn-sm btn-secondary\"  (click)=\"onKeyPadPress('4','dialPadCallControl')\"&gt;4&lt;/button&gt;&lt;/div&gt;\r\n\t\t\t&lt;div class=\"col-xs-4 col-sm-4\"&gt;&lt;button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('5','dialPadCallControl')\"&gt;5&lt;/button&gt;&lt;/div&gt;\r\n\t\t\t&lt;div class=\"col-xs-4 col-sm-4\"&gt;&lt;button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('6','dialPadCallControl')\"&gt;6&lt;/button&gt;&lt;/div&gt;\r\n\t\t&lt;/div&gt;\r\n\t\t&lt;div class=\"row\"&gt;\r\n\t\t\t&lt;div class=\"col-xs-4 col-sm-4\"&gt;&lt;button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('7','dialPadCallControl')\"&gt;7&lt;/button&gt;&lt;/div&gt;\r\n\t\t\t&lt;div class=\"col-xs-4 col-sm-4\"&gt;&lt;button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('8','dialPadCallControl')\"&gt;8&lt;/button&gt;&lt;/div&gt;\r\n\t\t\t&lt;div class=\"col-xs-4 col-sm-4\"&gt;&lt;button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('9','dialPadCallControl')\"&gt;9&lt;/button&gt;&lt;/div&gt;\r\n\t\t&lt;/div&gt;\r\n\t\t&lt;div class=\"row\"&gt;\r\n\t\t\t&lt;div class=\"col-xs-4 col-sm-4\"&gt;&lt;button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('*','dialPadCallControl')\"&gt;*&lt;/button&gt;&lt;/div&gt;\r\n\t\t\t&lt;div class=\"col-xs-4 col-sm-4\"&gt;&lt;button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('0','dialPadCallControl')\"&gt;0&lt;/button&gt;&lt;/div&gt;\r\n\t\t\t&lt;div class=\"col-xs-4 col-sm-4\"&gt;&lt;button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('#','dialPadCallControl')\"&gt;#&lt;/button&gt;&lt;/div&gt;\r\n\t\t&lt;/div&gt;\r\n\t\t&lt;div class=\"row call-action-btn\"&gt;\r\n\t\t\t&lt;div class=\"col-xs-6 col-sm-6\"&gt;\r\n\t\t\t\t&lt;button type=\"button\" class=\"btn btn-sm btn-danger\" aria-label=\"Close\" (click)=\"d('CancelCall')\"&gt;&lt;span class=\"icon-end-call\"&gt;&lt;/span&gt; Cancel&lt;/button&gt;\r\n\t\t\t&lt;/div&gt;\r\n\t\t\t&lt;div class=\"col-xs-6 col-sm-6\"&gt;\r\n\t\t\t\t&lt;button type=\"button\" class=\"btn btn-sm btn-success\" (click)=\"d('MakeCall')\"&gt;&lt;span class=\"icon-call\"&gt;&lt;/span&gt; Call&lt;/button&gt;\r\n\t\t\t&lt;/div&gt;\r\n\t\t&lt;/div&gt;\r\n\t&lt;/div&gt;\r\n\t&lt;!-- &lt;div class=\"modal-footer\"&gt;\r\n    &lt;button type=\"button\" class=\"btn btn-secondary\" (click)=\"c('Close click')\"&gt;Close&lt;/button&gt;\r\n  &lt;/div&gt; --&gt;\r\n&lt;/template&gt;\r\n\r\n&lt;div class=\"clearfix call-control\"&gt;\r\n    &lt;ul class=\"list-inline clearfix\" *ngIf=\"agentState === 'Available' || agentState === 'AfterCallWork' || agentState === 'Not Ready' \"&gt;\r\n        &lt;li class=\"list-inline-item\"&gt;&lt;button type=\"button\" title=\"Call\" class=\"btn btn-sm btn-secondary disabled\"&gt;&lt;span class=\"icon-call-button\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;\r\n        &lt;li class=\"list-inline-item\"&gt;&lt;button type=\"button\" title=\"Hold\" class=\"btn btn-sm btn-secondary disabled\"&gt;&lt;span class=\"icon-pause-button\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;\r\n         &lt;li class=\"list-inline-item\"&gt;&lt;button type=\"button\" title=\"Transfer\" class=\"btn btn-sm btn-secondary disabled\"&gt;&lt;span class=\"icon-call-transfer\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;\r\n        &lt;li class=\"list-inline-item\"&gt;&lt;button type=\"button\" title=\"Consult\" class=\"btn btn-sm btn-secondary disabled\"&gt;&lt;span class=\"icon-user-call-button\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt; \r\n        &lt;li class=\"list-inline-item\"&gt;\r\n            &lt;!--&lt;button *ngIf=\"!showDialpad\" type=\"button\" class=\"btn btn-secondary btn-sm disabled\"&gt;&lt;span class=\"icon-keypad\"&gt;&lt;/span&gt;&lt;/button&gt;--&gt;\r\n            &lt;button *ngIf=\"showDialpad\" type=\"button\" title=\"Dialpad\" class=\"btn btn-secondary btn-sm\" (click)=\"open(content,'MakeCall')\"&gt;&lt;span class=\"icon-dialpad-button\"&gt;&lt;/span&gt;&lt;/button&gt;\r\n\t\t&lt;/li&gt;\r\n\t&lt;/ul&gt;\r\n\r\n    &lt;ul class=\"list-inline clearfix\" *ngIf=\"call !== null &amp;&amp; (agentState === 'Busy' || agentState === 'PendingBusy' || agentState === 'CallingCustomer') \"&gt;\r\n        &lt;li title=\"Answer\" *ngIf=\"call.Actions.CanAnswer\" (click)=\"doCallAction('ANSWER')\" class=\"list-inline-item\"&gt;&lt;button type=\"button\" class=\"btn btn-sm\" title=\"Answer\"&gt;&lt;span class=\"icon-call-button\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;\r\n        &lt;li title=\"Drop\" *ngIf=\"call.Actions.CanDrop\" (click)=\"doCallAction('DROP')\" class=\"list-inline-item\"&gt;&lt;button type=\"button\" class=\"btn btn-sm\" title=\"Drop\"&gt;&lt;span class=\"icon-end-call-button\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;\r\n        &lt;li title=\"Hold\" *ngIf=\"call.Actions.CanHold\" (click)=\"doCallAction('HOLD')\" class=\"list-inline-item\"&gt;&lt;button type=\"button\" class=\"btn btn-sm\" title=\"Hold\"&gt;&lt;span class=\"icon-pause-button\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;\r\n        &lt;li title=\"Retrieve\" *ngIf=\"call.Actions.CanRetrieve\" (click)=\"doCallAction('RETRIEVE')\" class=\"list-inline-item\"&gt;&lt;button type=\"button\" class=\"btn btn-sm\" title=\"Retrieve\"&gt;&lt;span class=\"icon-play-button\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;\r\n        &lt;li title=\"Consult\" *ngIf=\"call.Actions.CanConsult\" (click)=\"open(content,'CONSULT')\" class=\"list-inline-item\"&gt;&lt;button type=\"button\" class=\"btn btn-sm\" title=\"Consult\"&gt;&lt;span class=\"icon-user-call-button\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;\r\n        &lt;li title=\"Transfer\" *ngIf=\"call.Actions.CanTransfer\" (click)=\"doCallAction('TRANSFER')\" class=\"list-inline-item\"&gt;&lt;button type=\"button\" class=\"btn btn-sm\" title=\"Transfer\"&gt;&lt;span class=\"icon-call-transfer\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;\r\n        &lt;!-- &lt;li title=\"TransferSST\" *ngIf=\"call.Actions.CanTransferSST\" (click)=\"open(content,'SST')\" class=\"list-inline-item\"&gt;&lt;button type=\"button\" class=\"btn btn-sm\" title=\"TransferSST\"&gt;&lt;span class=\"icon-call-direct-transfer\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt; --&gt;\r\n        &lt;li title=\"Conference\" *ngIf=\"call.Actions.CanConference\" (click)=\"doCallAction('CONFERENCE')\" class=\"list-inline-item\"&gt;&lt;button type=\"button\" class=\"btn btn-sm\" title=\"Conference\"&gt;&lt;span class=\"icon-team-button\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;\r\n        &lt;!-- &lt;li title=\"BargeCall\" *ngIf=\"call.Actions.CanBargeCall\" (click)=\"doCallAction('TRANSFER')\" class=\"list-inline-item\"&gt;&lt;button type=\"button\" class=\"btn btn-sm\" title=\"BargeCall\"&gt;&lt;span class=\"icon-call-bargin\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt; --&gt;\r\n        &lt;li title=\"ParticipantDrop\" *ngIf=\"call.Actions.CanParticipantDrop\" (click)=\"doCallAction('TRANSFER')\" class=\"list-inline-item\"&gt;&lt;button type=\"button\" class=\"btn btn-sm\" title=\"ParticipantDrop\"&gt;&lt;span class=\"icon-end-call-button\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;\r\n        &lt;li title=\"Accept\" *ngIf=\"call.Actions.CanAccept\" (click)=\"doCallAction('CONSULT_ACCEPT')\" class=\"list-inline-item\"&gt;&lt;button type=\"button\" class=\"btn btn-sm\" title=\"Accept\"&gt;&lt;span class=\"icon-call-button-outline\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;\r\n        &lt;!-- &lt;li title=\"Reject\" *ngIf=\"call.Actions.CanReject\" (click)=\"doCallAction('PREVIEWREJECT')\" class=\"list-inline-item\"&gt;&lt;button type=\"button\" class=\"btn btn-sm\" title=\"Reject\"&gt;&lt;span class=\"icon-end-call-button\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt; --&gt;\r\n\t\t&lt;!-- &lt;li title=\"Close\" *ngIf=\"call.Actions.CanClose\" (click)=\"doCallAction('PREVIEWCLOSE')\" class=\"list-inline-item\"&gt;&lt;button type=\"button\" class=\"btn btn-sm\" title=\"Close\"&gt;&lt;span class=\"icon-end-call-button-outline\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt; --&gt;\r\n\t\t\r\n\t&lt;/ul&gt;\r\n&lt;/div&gt;";&#13;
&#13;
/***/ }),&#13;
/* 113 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "/** Acquone theme**/\n/** Acquone theme end**/\n.call-control {\n  padding-top: 6px;\n  text-align: left; }\n  .call-control ul.list-inline {\n    margin-bottom: 0; }\n    .call-control ul.list-inline .list-inline-item:not(:last-child) {\n      margin-right: 6px; }\n    .call-control ul.list-inline .btn {\n      outline: none;\n      padding: 0px;\n      font-size: 20px;\n      border: none;\n      background: none; }\n      .call-control ul.list-inline .btn.disabled {\n        color: #ccc; }\n        .call-control ul.list-inline .btn.disabled .icon-call-button:before, .call-control ul.list-inline .btn.disabled .icon-pause-button:before, .call-control ul.list-inline .btn.disabled .icon-user-call-button:before, .call-control ul.list-inline .btn.disabled .icon-call-transfer:before {\n          color: #969492 !important; }\n\n.sf-banner .modal-backdrop {\n  width: 50%;\n  margin: 140px 1px 1px;\n  opacity: 0.8 !important;\n  /* width: 200px; */\n  /* height: 373px; */\n  border-radius: 5px;\n  /* background-color: #5d5d5d; */ }\n\n.sf-banner .dialpad-input input {\n  padding: 0 20px;\n  text-align: center; }\n\n.sf-banner .modal {\n  width: 50%;\n  margin-top: 140px; }\n  .sf-banner .modal .modal-dialog {\n    margin: 1px; }\n    .sf-banner .modal .modal-dialog .modal-content {\n      background: transparent;\n      color: #fff;\n      border: 0px; }\n      .sf-banner .modal .modal-dialog .modal-content .dial-pad {\n        text-align: center;\n        padding-top: 0; }\n        .sf-banner .modal .modal-dialog .modal-content .dial-pad .dial-display {\n          border: 0;\n          background-color: transparent;\n          color: #fff;\n          font-size: 20px;\n          border: 0;\n          border-bottom: 1px solid #7d7d7d;\n          border-radius: 0;\n          padding: 0 10px; }\n          .sf-banner .modal .modal-dialog .modal-content .dial-pad .dial-display:focus {\n            border-bottom-color: #757575; }\n          .sf-banner .modal .modal-dialog .modal-content .dial-pad .dial-display::-webkit-input-placeholder {\n            font-size: 16px;\n            text-align: left; }\n          .sf-banner .modal .modal-dialog .modal-content .dial-pad .dial-display:-moz-placeholder {\n            /* Firefox 18- */\n            font-size: 16px;\n            text-align: left; }\n          .sf-banner .modal .modal-dialog .modal-content .dial-pad .dial-display::-moz-placeholder {\n            /* Firefox 19+ */\n            font-size: 16px;\n            text-align: left; }\n          .sf-banner .modal .modal-dialog .modal-content .dial-pad .dial-display:-ms-input-placeholder {\n            font-size: 16px;\n            text-align: left; }\n        .sf-banner .modal .modal-dialog .modal-content .dial-pad .reduce-size {\n          height: 37px;\n          font-size: 15px; }\n        .sf-banner .modal .modal-dialog .modal-content .dial-pad .btn-secondary {\n          background: transparent;\n          border: transparent;\n          color: #fff;\n          margin: 0;\n          width: 100%;\n          padding: 10px;\n          height: 30px;\n          outline: none;\n          margin: 10px 0;\n          line-height: 30px;\n          transition: all 0.3s ease-in-out; }\n          .sf-banner .modal .modal-dialog .modal-content .dial-pad .btn-secondary:hover {\n            font-weight: bold;\n            color: #85d2ff;\n            font-size: 30px; }\n        .sf-banner .modal .modal-dialog .modal-content .dial-pad .call-action-btn {\n          padding: 20px 0; }\n          .sf-banner .modal .modal-dialog .modal-content .dial-pad .call-action-btn .btn {\n            padding: 8px;\n            width: 100%;\n            margin: 5px 0;\n            border-radius: 0; }\n            .sf-banner .modal .modal-dialog .modal-content .dial-pad .call-action-btn .btn.disabled {\n              color: #ccc; }\n          .sf-banner .modal .modal-dialog .modal-content .dial-pad .call-action-btn &gt; div {\n            padding: 0; }\n"&#13;
&#13;
/***/ }),&#13;
/* 114 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var __decorate = (this &amp;&amp; this.__decorate) || function (decorators, target, key, desc) {&#13;
	    var c = arguments.length, r = c &lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);&#13;
	    else for (var i = decorators.length - 1; i &gt;= 0; i--) if (d = decorators[i]) r = (c &lt; 3 ? d(r) : c &gt; 3 ? d(target, key, r) : d(target, key)) || r;&#13;
	    return c &gt; 3 &amp;&amp; r &amp;&amp; Object.defineProperty(target, key, r), r;&#13;
	};&#13;
	var __metadata = (this &amp;&amp; this.__metadata) || function (k, v) {&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.metadata === "function") return Reflect.metadata(k, v);&#13;
	};&#13;
	var core_1 = __webpack_require__(1);&#13;
	var app_service_1 = __webpack_require__(58);&#13;
	var models_1 = __webpack_require__(61);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var LoginComponent = (function () {&#13;
	    function LoginComponent(sfAppService, zone) {&#13;
	        var _this = this;&#13;
	        this.sfAppService = sfAppService;&#13;
	        this.zone = zone;&#13;
	        this.user = new models_1.UserCredentials();&#13;
	        this.isError = false;&#13;
	        this.showLoader = false;&#13;
	        this.errorMessage = '';&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.evntLst = new Array();&#13;
	        //console.log('%c REGISTER ', 'color:#AA8000'); &#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.LoginResponse, function (type, data) {&#13;
	            _this.zone.run(function () {&#13;
	                _this.onMessageReceived(type, data);&#13;
	            });&#13;
	        }));&#13;
	        //console.log('%c REGISTER ', 'color:#AA8000'); &#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.SystemMessage, function (type, data) {&#13;
	            _this.zone.run(function () {&#13;
	                _this.onMessageReceived(type, data);&#13;
	            });&#13;
	        }));&#13;
	        //console.log('%c REGISTER ', 'color:#AA8000'); &#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.AgentDetail, function (type, data) {&#13;
	            console.log('LoginComponent State changed -');&#13;
	            _this.zone.run(function () {&#13;
	                if (data.State === 'LOGOUT') {&#13;
	                    _this.showLoader = false;&#13;
	                }&#13;
	            });&#13;
	        }));&#13;
	        if (this.sfAppService.IsSingleSignOn === true) {&#13;
	            this.showLoader = true;&#13;
	        }&#13;
	    }&#13;
	    LoginComponent.prototype.OnLogin = function () {&#13;
	        var _this = this;&#13;
	        console.log('Login component. ', this.user);&#13;
	        this.errorMessage = '';&#13;
	        this.showLoader = true;&#13;
	        this.sfAppService.AgentLogin(this.user, function (msg) {&#13;
	            console.log(_this.user);&#13;
	            console.log(msg);&#13;
	        });&#13;
	    };&#13;
	    LoginComponent.prototype.onMessageReceived = function (topic, data) {&#13;
	    };&#13;
	    LoginComponent.prototype.ngOnDestroy = function () {&#13;
	        for (var _i = 0, _a = this.evntLst; _i &lt; _a.length; _i++) {&#13;
	            var id = _a[_i];&#13;
	            console.log('LoginComponent Unregister event');&#13;
	            this.evnt.UnRegisterEvent(id);&#13;
	        }&#13;
	    };&#13;
	    LoginComponent.prototype.onKeyDownEvent = function (key) {&#13;
	        var _this = this;&#13;
	        if (key === 13) {&#13;
	            this.zone.run(function () {&#13;
	                _this.OnLogin();&#13;
	            });&#13;
	        }&#13;
	        else if ((key === 8 || key === 27 || key === 35 || key === 36 || key === 37 || key === 38 || key === 39 || key === 40 ||&#13;
	            key === 46 || key === 110 || key === 190 || key === 187 || key === 107 || key === 61) || (key &gt;= 48 &amp;&amp; key &lt;= 57) || (key &gt;= 96 &amp;&amp; key &lt;= 106)) {&#13;
	            return true;&#13;
	        }&#13;
	        return false;&#13;
	    };&#13;
	    __decorate([&#13;
	        core_1.Input(), &#13;
	        __metadata('design:type', (typeof (_a = typeof models_1.UserCredentials !== 'undefined' &amp;&amp; models_1.UserCredentials) === 'function' &amp;&amp; _a) || Object)&#13;
	    ], LoginComponent.prototype, "user", void 0);&#13;
	    LoginComponent = __decorate([&#13;
	        core_1.Component({&#13;
	            selector: 'sf-login',&#13;
	            template: __webpack_require__(115),&#13;
	            styles: [__webpack_require__(116)]&#13;
	        }), &#13;
	        __metadata('design:paramtypes', [(typeof (_b = typeof app_service_1.SFAppService !== 'undefined' &amp;&amp; app_service_1.SFAppService) === 'function' &amp;&amp; _b) || Object, (typeof (_c = typeof core_1.NgZone !== 'undefined' &amp;&amp; core_1.NgZone) === 'function' &amp;&amp; _c) || Object])&#13;
	    ], LoginComponent);&#13;
	    return LoginComponent;&#13;
	    var _a, _b, _c;&#13;
	}());&#13;
	exports.LoginComponent = LoginComponent;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 115 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "&lt;!--&lt;div class=\"jumbotron sf-wrap sf-login login-com\"&gt;    \r\n    &lt;form class=\"form-signin\"&gt;\r\n        &lt;div class=\"sf-banner clearfix\"&gt;\r\n        &lt;/div&gt;\r\n        &lt;div class=\"panel\"&gt;\r\n            &lt;div class=\"form-group\"&gt;\r\n                &lt;label for=\"user-name\"&gt;&lt;span class=\"icon-user-phone\"&gt;&lt;/span&gt;&lt;/label&gt;\r\n                &lt;input type=\"text\" [(ngModel)]=\"user.Username\" placeholder=\"Agent ID\" name=\"username\" id=\"user-name\" (keyup.enter)=\"OnLogin()\" /&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"form-group\"&gt;\r\n                &lt;label for=\"password\"&gt;&lt;span class=\"icon-lock\"&gt;&lt;/span&gt;&lt;/label&gt;\r\n                &lt;input [(ngModel)]=\"user.Password\" placeholder=\"Password\" name=\"password\" type=\"password\" id=\"password\" (keyup.enter)=\"OnLogin()\" /&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"form-group\"&gt;\r\n                &lt;label for=\"extn\"&gt;&lt;span class=\"icon-telephone\"&gt;&lt;/span&gt;&lt;/label&gt;\r\n                &lt;input type=\"text\" [(ngModel)]=\"user.Extension\" name=\"extension\" placeholder=\"Extension\" id=\"extn\" (keydown)=\"onKeyDownEvent($event.keyCode)\" /&gt;\r\n            &lt;/div&gt;\r\n\r\n            &lt;button class=\"btn btn-mini btn-primary btn-block login-btn\" (click)=\"OnLogin()\" type=\"submit\"&gt;Sign in&lt;/button&gt;\r\n            &lt;p class=\"login-caption\"&gt;Salesforce connector &lt;br&gt;for finesse&lt;/p&gt;\r\n            &lt;div *ngIf=\"errorMessage\" class=\"alert alert-danger\"&gt;\r\n                &lt;label&gt;{{errorMessage}}&lt;/label&gt;\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n    &lt;/form&gt;\r\n    &lt;span *ngIf=\"showLoader\" style=\"display:block;\" class=\"pre-loader\"&gt;&lt;/span&gt;\r\n    &lt;div class=\"login-footer\"&gt;Powered by Acqueon&lt;/div&gt;\r\n&lt;/div&gt;--&gt;\r\n&lt;div class=\"jumbotron sf-wrap sf-login login-com\"&gt;   \r\n    &lt;div class=\"login-header\"&gt;&lt;/div&gt; \r\n    &lt;div class=\"login-header-text\"&gt;\r\n        Collaboration App\r\n    &lt;/div&gt; \r\n    &lt;form class=\"form-signin\"&gt;\r\n        &lt;div class=\"sf-banner clearfix\"&gt;\r\n        &lt;/div&gt;\r\n        &lt;div class=\"panel\"&gt;           \r\n            &lt;div class=\"form-group\"&gt;                               \r\n                &lt;label for=\"user-name\"&gt;&lt;span class=\"icon-user\"&gt;&lt;/span&gt;&lt;/label&gt;\r\n                &lt;input tabindex=\"1\" type=\"text\" [(ngModel)]=\"user.Username\" placeholder=\"Agent ID\" name=\"username\" id=\"user-name\" (keyup.enter)=\"OnLogin()\" /&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"form-group\"&gt;\r\n                &lt;label for=\"password\"&gt;&lt;span class=\"icon-lock\"&gt;&lt;/span&gt;&lt;/label&gt;\r\n                &lt;input tabindex=\"2\" [(ngModel)]=\"user.Password\" placeholder=\"Password\" name=\"password\" type=\"password\" id=\"password\" (keyup.enter)=\"OnLogin()\" /&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"form-group\"&gt;\r\n                &lt;label for=\"extn\"&gt;&lt;span class=\"icon-extension\"&gt;&lt;/span&gt;&lt;/label&gt;\r\n                &lt;input tabindex=\"3\" type=\"text\" [(ngModel)]=\"user.Extension\" name=\"extension\" placeholder=\"Extension\" id=\"extn\" (keydown)=\"onKeyDownEvent($event.keyCode)\" /&gt;\r\n            &lt;/div&gt;\r\n\r\n            &lt;button tabindex=\"4\" class=\"btn btn-mini btn-block login-btn\" (click)=\"OnLogin()\" type=\"submit\"&gt;Sign in&lt;/button&gt;\r\n            &lt;p class=\"login-caption\"&gt;ServiceNow connector for finesse&lt;/p&gt; &lt;!-- Updated by Prakash --&gt;\r\n            &lt;div *ngIf=\"errorMessage\" class=\"alert alert-danger\"&gt;\r\n                &lt;label&gt;{{errorMessage}}&lt;/label&gt;\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n    &lt;/form&gt;\r\n    &lt;span *ngIf=\"showLoader\" style=\"display:block;\" class=\"pre-loader\"&gt;&lt;/span&gt;   \r\n&lt;/div&gt;\r\n\r\n";&#13;
&#13;
/***/ }),&#13;
/* 116 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "/** Acquone theme**/\n/** Acquone theme end**/\n/* .sf-login {\r\n    border: 1px solid $prime1;\r\n    background: $loginbg $prime1;\r\n    height: 100%;\r\n    //height: 550px; //Prabha Changed\r\n    // @mixin login-boxes($path) {\r\n    //   content: \"\";\r\n    //   display: inline-block;\r\n    //   width: 11px;\r\n    //   height: 14px;\r\n    //   background: url($path) no-repeat;\r\n    // }\r\n    // .icon-user:before{@include login-boxes($userIcon)}\r\n    // .icon-lock:before{@include login-boxes($PasswordIcon)}\r\n    // .icon-extn:before{@include login-boxes($extensionIcon)}\r\n    h4 {\r\n        line-height: 36px;\r\n        text-align: center;\r\n        &amp;:before {\r\n            content: \"\";\r\n            display: none;\r\n            float: left;\r\n            width: 25px;\r\n            height: 25px;\r\n            margin: 8px 10px 0;\r\n            // background: url('../ui/images/serv-icon.png');\r\n        }\r\n    }\r\n    .sf-banner {\r\n        text-align: center;\r\n        padding: 5px;\r\n        background-color: transparent;\r\n        .login-logo {\r\n            display: block;\r\n            text-align: center;\r\n            &amp;:before {\r\n                content: \"\";\r\n                width: 100%;\r\n                height: 76px;\r\n                background: $sflogo;\r\n                display: block;\r\n            }\r\n        }\r\n    }\r\n    .form-group {\r\n        position: relative;\r\n        padding-bottom: 5px;\r\n        margin-bottom: 0;\r\n        input[type=\"text\"],\r\n        input[type=\"password\"] {\r\n            width: 100%;\r\n            border: 0px;\r\n            height: 40px;\r\n            padding-left: 30px;\r\n            border-bottom: 1px solid $whiteShadebright;\r\n            background-color: transparent;\r\n            color: #333;\r\n            transition: border-color ease-in-out 0.3s;\r\n            &amp;:focus {\r\n                border-bottom-color: $white;\r\n                outline: none;\r\n            }\r\n            &amp;::-webkit-input-placeholder {\r\n                color: #333;\r\n            }\r\n            &amp;::-moz-placeholder {\r\n                color: #333;\r\n            }\r\n            &amp;:-ms-input-placeholder {\r\n                color: #333;\r\n            }\r\n            &amp;:-moz-placeholder {\r\n                color: #333;\r\n            }\r\n        }\r\n        label {\r\n            position: absolute;\r\n            left: 5px;\r\n            top: 15px;\r\n            color: #333;\r\n        }\r\n    }\r\n    .login-btn {\r\n        background-color: rgba(0, 0, 0, 0.5);\r\n        color: #fff;\r\n        font-size: 16px;\r\n        text-transform: uppercase;\r\n        border-radius: 6px;\r\n        border: 0px;\r\n        padding: 8px;\r\n        width: 100%;\r\n        cursor: pointer;\r\n        font-size: 16px;\r\n        text-align: center;\r\n        margin-top: 10px;\r\n        outline: none;\r\n        font-weight: bold;\r\n    }\r\n}\r\n\r\n.sf-wrap.sf-login .panel {\r\n    margin-top: 130px;\r\n    background-color: transparent;\r\n    border: 0px;\r\n    max-height: inherit;\r\n    overflow: inherit;\r\n}\r\n\r\n.login-footer {\r\n    position: absolute;\r\n    bottom: 0px;\r\n    left: 0;\r\n    right: 0;\r\n    text-align: center;\r\n    font-size: 11px;\r\n    background: rgba(0, 0, 0, 0.25);\r\n    height: 26px;\r\n    line-height: 26px;\r\n    color: #fff;\r\n}\r\n\r\n.alert {\r\n    margin: 5px 0;\r\n    padding: 5px;\r\n    max-height: 135px;\r\n    overflow: auto;\r\n    background-color: #fff;\r\n    label {\r\n        margin: 0;\r\n    }\r\n}\r\n\r\n.login-caption {\r\n    text-align: center;\r\n    color: #fff;\r\n    padding: 10px 0 0;\r\n}\r\n\r\n*/\n.sf-wrap.sf-login .panel {\n  background-color: transparent;\n  border: 0px;\n  max-height: inherit;\n  overflow: inherit; }\n\n.alert {\n  margin: 5px 0;\n  padding: 5px;\n  max-height: 135px;\n  font-size: 14px;\n  overflow: auto;\n  background-color: #fff; }\n  .alert label {\n    margin: 0; }\n\n.login-caption {\n  text-align: center;\n  color: #333;\n  padding: 20px 0 0;\n  font-weight: 600;\n  font-size: 13px; }\n\n.jumbotron {\n  padding: 0 !important; }\n\n.btn.active.focus, .btn.active:focus, .btn.focus, .btn:active.focus, .btn:active:focus, .btn:focus {\n  outline: none; }\n\n/** Lightning Theme **/\n.skin-lightning .sf-login {\n  background: none;\n  height: 100%;\n  font-size: 13px;\n  font-weight: 500; }\n  .skin-lightning .sf-login h4 {\n    line-height: 36px;\n    text-align: center; }\n    .skin-lightning .sf-login h4:before {\n      content: \"\";\n      display: none;\n      float: left;\n      width: 25px;\n      height: 25px;\n      margin: 8px 10px 0; }\n  .skin-lightning .sf-login .login-header {\n    height: 100px;\n    background: url(\"/ui/images/acqueon-logo-sfdc-login.png\") no-repeat center; }\n  .skin-lightning .sf-login .login-header-text {\n    text-align: center;\n    text-transform: uppercase;\n    font-weight: 700;\n    font-size: 13px;\n    margin-bottom: 15px; }\n  .skin-lightning .sf-login .sf-banner {\n    text-align: center;\n    padding: 5px;\n    background-color: transparent; }\n    .skin-lightning .sf-login .sf-banner .login-logo {\n      display: block;\n      text-align: center; }\n      .skin-lightning .sf-login .sf-banner .login-logo:before {\n        content: \"\";\n        width: 100%;\n        height: 76px;\n        background: url(/ui/images/acquon-logo.png) no-repeat center;\n        display: block; }\n  .skin-lightning .sf-login .form-group {\n    position: relative;\n    margin-bottom: 20; }\n    .skin-lightning .sf-login .form-group input[type=\"text\"],\n    .skin-lightning .sf-login .form-group input[type=\"password\"] {\n      width: 100%;\n      border: 0px;\n      height: 24px;\n      padding-left: 30px;\n      border-bottom: 1px solid #a5a5a5;\n      background-color: transparent;\n      color: #333;\n      transition: border-color ease-in-out 0.3s; }\n      .skin-lightning .sf-login .form-group input[type=\"text\"]:focus,\n      .skin-lightning .sf-login .form-group input[type=\"password\"]:focus {\n        outline: none; }\n      .skin-lightning .sf-login .form-group input[type=\"text\"]::-webkit-input-placeholder,\n      .skin-lightning .sf-login .form-group input[type=\"password\"]::-webkit-input-placeholder {\n        color: #333; }\n      .skin-lightning .sf-login .form-group input[type=\"text\"]::-moz-placeholder,\n      .skin-lightning .sf-login .form-group input[type=\"password\"]::-moz-placeholder {\n        color: #333; }\n      .skin-lightning .sf-login .form-group input[type=\"text\"]:-ms-input-placeholder,\n      .skin-lightning .sf-login .form-group input[type=\"password\"]:-ms-input-placeholder {\n        color: #333; }\n      .skin-lightning .sf-login .form-group input[type=\"text\"]:-moz-placeholder,\n      .skin-lightning .sf-login .form-group input[type=\"password\"]:-moz-placeholder {\n        color: #333; }\n    .skin-lightning .sf-login .form-group label {\n      position: absolute;\n      left: 5px;\n      top: 5px;\n      color: #00a1e0;\n      font-size: 13px; }\n    .skin-lightning .sf-login .form-group ::-moz-placeholder,\n    .skin-lightning .sf-login .form-group :-ms-input-placeholder,\n    .skin-lightning .sf-login .form-group ::-ms-input-placeholder {\n      font-weight: 600; }\n  .skin-lightning .sf-login .login-btn {\n    background-color: #01549b;\n    color: #fff;\n    font-size: 15px;\n    text-transform: uppercase;\n    border-radius: 6px;\n    border: 0px;\n    padding: 6px;\n    width: 100%;\n    cursor: pointer;\n    font-size: 16px;\n    text-align: center;\n    margin-top: 10px;\n    outline: none; }\n  .skin-lightning .sf-login .icon-user:before {\n    color: #0072d2; }\n  .skin-lightning .sf-login .icon-lock:before {\n    color: #0072d2; }\n  .skin-lightning .sf-login .icon-extension:before {\n    color: #0072d2; }\n\n/** End of Lightning Theme **/\n/** Classic Theme **/\n.skin-classic .sf-login {\n  border: 1px solid #f99b41;\n  background: linear-gradient(orange, #FCBB75, orange);\n  height: 100%;\n  font-size: 13px;\n  font-weight: 500; }\n  .skin-classic .sf-login h4 {\n    line-height: 36px;\n    text-align: center; }\n    .skin-classic .sf-login h4:before {\n      content: \"\";\n      display: none;\n      float: left;\n      width: 25px;\n      height: 25px;\n      margin: 8px 10px 0; }\n  .skin-classic .sf-login .login-header {\n    height: 100px;\n    background: url(\"/ui/images/acqueon-logo-sfdc-login.png\") no-repeat center; }\n  .skin-classic .sf-login .login-header-text {\n    text-align: center;\n    text-transform: uppercase;\n    font-weight: 700;\n    font-size: 13px;\n    margin-bottom: 15px; }\n  .skin-classic .sf-login .sf-banner {\n    text-align: center;\n    padding: 5px;\n    background-color: transparent; }\n    .skin-classic .sf-login .sf-banner .login-logo {\n      display: block;\n      text-align: center; }\n      .skin-classic .sf-login .sf-banner .login-logo:before {\n        content: \"\";\n        width: 100%;\n        height: 76px;\n        background: url(/ui/images/acquon-logo.png) no-repeat center;\n        display: block; }\n  .skin-classic .sf-login .form-group {\n    position: relative;\n    margin-bottom: 20; }\n    .skin-classic .sf-login .form-group input[type=\"text\"],\n    .skin-classic .sf-login .form-group input[type=\"password\"] {\n      width: 100%;\n      border: 0px;\n      height: 24px;\n      padding-left: 30px;\n      border-bottom: 1px solid #a5a5a5;\n      background-color: transparent;\n      color: #333;\n      transition: border-color ease-in-out 0.3s; }\n      .skin-classic .sf-login .form-group input[type=\"text\"]:focus,\n      .skin-classic .sf-login .form-group input[type=\"password\"]:focus {\n        outline: none; }\n      .skin-classic .sf-login .form-group input[type=\"text\"]::-webkit-input-placeholder,\n      .skin-classic .sf-login .form-group input[type=\"password\"]::-webkit-input-placeholder {\n        color: #333; }\n      .skin-classic .sf-login .form-group input[type=\"text\"]::-moz-placeholder,\n      .skin-classic .sf-login .form-group input[type=\"password\"]::-moz-placeholder {\n        color: #333; }\n      .skin-classic .sf-login .form-group input[type=\"text\"]:-ms-input-placeholder,\n      .skin-classic .sf-login .form-group input[type=\"password\"]:-ms-input-placeholder {\n        color: #333; }\n      .skin-classic .sf-login .form-group input[type=\"text\"]:-moz-placeholder,\n      .skin-classic .sf-login .form-group input[type=\"password\"]:-moz-placeholder {\n        color: #333; }\n    .skin-classic .sf-login .form-group label {\n      position: absolute;\n      left: 5px;\n      top: 5px;\n      color: #00a1e0;\n      font-size: 13px; }\n    .skin-classic .sf-login .form-group ::-moz-placeholder,\n    .skin-classic .sf-login .form-group :-ms-input-placeholder,\n    .skin-classic .sf-login .form-group ::-ms-input-placeholder {\n      font-weight: 600; }\n  .skin-classic .sf-login .login-btn {\n    background-color: rgba(0, 0, 0, 0.5);\n    color: #fff;\n    font-size: 15px;\n    text-transform: uppercase;\n    border-radius: 6px;\n    border: 0px;\n    padding: 6px;\n    width: 100%;\n    cursor: pointer;\n    font-size: 16px;\n    text-align: center;\n    margin-top: 10px;\n    outline: none;\n    font-weight: bold; }\n  .skin-classic .sf-login .icon-user:before {\n    color: #333; }\n  .skin-classic .sf-login .icon-lock:before {\n    color: #333; }\n  .skin-classic .sf-login .icon-extension:before {\n    color: #333; }\n\n/** End of Classic Theme **/\n"&#13;
&#13;
/***/ }),&#13;
/* 117 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var __decorate = (this &amp;&amp; this.__decorate) || function (decorators, target, key, desc) {&#13;
	    var c = arguments.length, r = c &lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);&#13;
	    else for (var i = decorators.length - 1; i &gt;= 0; i--) if (d = decorators[i]) r = (c &lt; 3 ? d(r) : c &gt; 3 ? d(target, key, r) : d(target, key)) || r;&#13;
	    return c &gt; 3 &amp;&amp; r &amp;&amp; Object.defineProperty(target, key, r), r;&#13;
	};&#13;
	var __metadata = (this &amp;&amp; this.__metadata) || function (k, v) {&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.metadata === "function") return Reflect.metadata(k, v);&#13;
	};&#13;
	var core_1 = __webpack_require__(1);&#13;
	var app_service_1 = __webpack_require__(58);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var QueueInfoComponent = (function () {&#13;
	    function QueueInfoComponent(sfAppService, zone) {&#13;
	        var _this = this;&#13;
	        this.sfAppService = sfAppService;&#13;
	        this.zone = zone;&#13;
	        //Subscribe to queue information&#13;
	        this.queues = new Array();&#13;
	        this.searchTerm = '';&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.evntLst = new Array();&#13;
	        this.timerId = null;&#13;
	        //console.log('%c REGISTER ', 'color:#AA8000'); &#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.QueuesDetail, function (event) {&#13;
	            _this.zone.run(function () {&#13;
	                _this.onQueueChanged();&#13;
	            });&#13;
	        }));&#13;
	        this.zone.run(function () {&#13;
	            _this.onQueueChanged();&#13;
	        });&#13;
	    }&#13;
	    QueueInfoComponent.prototype.ngOnDestroy = function () {&#13;
	        for (var _i = 0, _a = this.evntLst; _i &lt; _a.length; _i++) {&#13;
	            var id = _a[_i];&#13;
	            console.log('QueueComponent Unregister event');&#13;
	            this.evnt.UnRegisterEvent(id);&#13;
	        }&#13;
	        if (this.timerId !== null) {&#13;
	            clearTimeout(this.timerId);&#13;
	        }&#13;
	    };&#13;
	    QueueInfoComponent.prototype.onQueueChanged = function () {&#13;
	        var queues = JSON.parse(JSON.stringify(this.sfAppService.Queues));&#13;
	        this.queues = [];&#13;
	        if (this.searchTerm === '') {&#13;
	            this.queues = queues;&#13;
	        }&#13;
	        else {&#13;
	            var st = this.searchTerm.toLowerCase();&#13;
	            for (var i = 0; i &lt; queues.length; i++) {&#13;
	                var queue = queues[i];&#13;
	                if (queue.Name.toLowerCase().indexOf(st) !== -1) {&#13;
	                    this.queues.push(queue);&#13;
	                }&#13;
	            }&#13;
	        }&#13;
	        //add an extra property dynamically the time value to the queue.&#13;
	        //For each 5 seconds update the queue time &#13;
	        if (this.timerId !== null) {&#13;
	            clearTimeout(this.timerId);&#13;
	        }&#13;
	        this.setQueueTime();&#13;
	    };&#13;
	    QueueInfoComponent.prototype.setQueueTime = function () {&#13;
	        var _this = this;&#13;
	        for (var i = 0; i &lt; this.queues.length; i++) {&#13;
	            var queue = this.queues[i];&#13;
	            if (queue.LongestCallInQueue &gt; -1) {&#13;
	                queue.LongestCallInQueueText = this.sfAppService.GetElapsedTime(queue.LongestCallInQueue);&#13;
	            }&#13;
	            else {&#13;
	                queue.LongestCallInQueueText = queue.LongestCallInQueue.toString();&#13;
	            }&#13;
	            this.queues[i] = queue;&#13;
	        }&#13;
	        this.timerId = setTimeout(function () {&#13;
	            _this.setQueueTime();&#13;
	        }, 5000);&#13;
	    };&#13;
	    QueueInfoComponent.prototype.isMatch = function (queue) {&#13;
	        if (this.searchTerm !== '') {&#13;
	            return false;&#13;
	        }&#13;
	        return true;&#13;
	    };&#13;
	    QueueInfoComponent = __decorate([&#13;
	        core_1.Component({&#13;
	            selector: 'queue-info',&#13;
	            template: __webpack_require__(118),&#13;
	            styles: [__webpack_require__(119)]&#13;
	        }), &#13;
	        __metadata('design:paramtypes', [(typeof (_a = typeof app_service_1.SFAppService !== 'undefined' &amp;&amp; app_service_1.SFAppService) === 'function' &amp;&amp; _a) || Object, (typeof (_b = typeof core_1.NgZone !== 'undefined' &amp;&amp; core_1.NgZone) === 'function' &amp;&amp; _b) || Object])&#13;
	    ], QueueInfoComponent);&#13;
	    return QueueInfoComponent;&#13;
	    var _a, _b;&#13;
	}());&#13;
	exports.QueueInfoComponent = QueueInfoComponent;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 118 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "&lt;div *ngIf=\"isUccx === true\"  class=\"panel sub-tab queue-panel queue-info-com\"&gt;\r\n    &lt;h4 class=\"panel-title\"&gt;\r\n\r\n        &lt;div class=\"row info-title\"&gt;\r\n            &lt;div class=\"col-xs-12\"&gt;Queue&lt;/div&gt;\r\n        &lt;/div&gt;\r\n        &lt;div class=\"form-group search-box \"&gt;\r\n            &lt;label for=\"searchQueue\" class=\"pull-xs-right\"&gt;\r\n                &lt;span class=\"icon-search\"&gt;&lt;/span&gt;\r\n            &lt;/label&gt;\r\n            &lt;input type=\"text\" class=\"form-control form-control-sm\" [(ngModel)]=\"searchTerm\" (ngModelChange)=\"onQueueChanged()\" id=\"searchQueue\"\r\n                   placeholder=\"Search Queue\"&gt;\r\n        &lt;/div&gt;\r\n    &lt;/h4&gt;\r\n    &lt;ngb-accordion #acc=\"ngbAccordion\" activeIds=\"{{queues.length === 1 ? '1' : ''}}\"&gt;\r\n        &lt;ngb-panel *ngFor=\"let queue of queues; let i = index;\" id=\"{{i+1}}\" [title]=\"queue.Name\"&gt;\r\n            &lt;template ngbPanelContent&gt;\r\n                &lt;div class=\"panel info-panel queue-list \"&gt;\r\n                    &lt;div class=\"info-records\"&gt;\r\n                        &lt;div class=\"row info-record\"&gt;\r\n                            &lt;div class=\"col-xs-5\"&gt;NotReady&lt;/div&gt;\r\n                            &lt;div class=\"col-xs-7\"&gt;{{queue.NotReady}}&lt;/div&gt;\r\n                        &lt;/div&gt;\r\n                        &lt;div class=\"row info-record\"&gt;\r\n                            &lt;div class=\"col-xs-5\"&gt;Ready&lt;/div&gt;\r\n                            &lt;div class=\"col-xs-7\"&gt;{{queue.Ready}}&lt;/div&gt;\r\n                        &lt;/div&gt;\r\n                        &lt;div class=\"row info-record\"&gt;\r\n                            &lt;div class=\"col-xs-5\"&gt;Longest call&lt;/div&gt;\r\n                            &lt;div class=\"col-xs-7\"&gt;{{queue.LongestCallInQueueText}}&lt;/div&gt;\r\n                        &lt;/div&gt;\r\n                        &lt;div class=\"row info-record\"&gt;\r\n                            &lt;div class=\"col-xs-5\"&gt;Inbound&lt;/div&gt;\r\n                            &lt;div class=\"col-xs-7\"&gt;{{queue.Inbound}}&lt;/div&gt;\r\n                        &lt;/div&gt;\r\n                        &lt;div class=\"row info-record\"&gt;\r\n                            &lt;div class=\"col-xs-5\"&gt;Outbound&lt;/div&gt;\r\n                            &lt;div class=\"col-xs-7\"&gt;{{queue.Outbound}}&lt;/div&gt;\r\n                        &lt;/div&gt;\r\n                    &lt;/div&gt;\r\n                &lt;/div&gt;\r\n            &lt;/template&gt;\r\n        &lt;/ngb-panel&gt;\r\n    &lt;/ngb-accordion&gt;\r\n&lt;/div&gt;";&#13;
&#13;
/***/ }),&#13;
/* 119 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "/** Acquone theme**/\n/** Acquone theme end**/\n.queue-panel {\n  margin-top: 5px;\n  background-color: transparent;\n  border: 0;\n  padding: 0;\n  height: inherit; }\n\n.panel.queue-info-com .info-records {\n  height: 200px;\n  overflow-y: auto;\n  overflow-x: hidden; }\n\n.panel.sub-tab.queue-info-com .card {\n  height: 250px;\n  overflow-y: auto;\n  overflow-x: hidden; }\n\n.panel.sub-tab.queue-info-com .row.info-title {\n  color: #1b5297; }\n"&#13;
&#13;
/***/ }),&#13;
/* 120 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	// import { Component, OnDestroy, OnInit, NgZone } from '@angular/core';&#13;
	// import { SFAppService } from '../../app.service';&#13;
	// import { TeamAgent, Agent, CallInfo } from '../../models';&#13;
	// import { MessageEvent, Validation } from '../../utility/validation';&#13;
	"use strict";&#13;
	var __decorate = (this &amp;&amp; this.__decorate) || function (decorators, target, key, desc) {&#13;
	    var c = arguments.length, r = c &lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);&#13;
	    else for (var i = decorators.length - 1; i &gt;= 0; i--) if (d = decorators[i]) r = (c &lt; 3 ? d(r) : c &gt; 3 ? d(target, key, r) : d(target, key)) || r;&#13;
	    return c &gt; 3 &amp;&amp; r &amp;&amp; Object.defineProperty(target, key, r), r;&#13;
	};&#13;
	var __metadata = (this &amp;&amp; this.__metadata) || function (k, v) {&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.metadata === "function") return Reflect.metadata(k, v);&#13;
	};&#13;
	// @Component({&#13;
	//     selector: 'team-info',&#13;
	//     template: require('./team-info.component.html'),&#13;
	//     styles: [require('./team-info.component.scss')]&#13;
	// })&#13;
	// export class TeamInfoComponent implements OnDestroy, OnInit {&#13;
	//     //Subscribe to queue information&#13;
	//     public teams: any = {};&#13;
	//     public teamIds: any = [];&#13;
	//     public searchTerm: string = '';&#13;
	//     public agentLoginId: string = '';&#13;
	//     public agentState: string = '';&#13;
	//     public isSupervisor: boolean = false;&#13;
	//     public isUccx: boolean = false;&#13;
	//     private evnt: MessageEvent = MessageEvent.getInstance();&#13;
	//     private v: Validation = new Validation();&#13;
	//     private evntLst: Array&lt;string&gt; = new Array&lt;string&gt;();&#13;
	//     private timerId: any = null;&#13;
	//     private activeCall: CallInfo = null;&#13;
	//     constructor(private sfAppService: SFAppService, private zone: NgZone) { }&#13;
	//     ngOnInit() {&#13;
	//         this.isUccx = this.sfAppService.IsUCCX;&#13;
	//         //console.log('%c REGISTER ', 'color:#AA8000'); &#13;
	//         this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.TeamsDetail, (type, data: any) =&gt; {&#13;
	//             this.zone.run(() =&gt; {&#13;
	//                 this.onTeamChanged();&#13;
	//             });&#13;
	//         }));&#13;
	//         //console.log('%c REGISTER ', 'color:#AA8000'); &#13;
	//         this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.AgentDetail, (type, data) =&gt; {&#13;
	//             this.zone.run(() =&gt; {&#13;
	//                 this.onAgentInfoChanged(data);&#13;
	//                 this.onTeamChanged();&#13;
	//             });&#13;
	//         }));&#13;
	//         //console.log('%c REGISTER ', 'color:#AA8000'); &#13;
	//         this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.CurrentCallDetail, (type, data) =&gt; {&#13;
	//             //this.onAgentInfoChanged(data);&#13;
	//             this.zone.run(() =&gt; {        &#13;
	//                 console.log('team-info.components - CurrentCallDetail : ', data);        &#13;
	//                 this.activeCall = data;&#13;
	//                 this.onTeamChanged();&#13;
	//             });&#13;
	//         }));&#13;
	//         this.zone.run(() =&gt; {&#13;
	//             this.activeCall = this.sfAppService.Call;            &#13;
	//             this.onAgentInfoChanged(this.sfAppService.AgentDetail);&#13;
	//             this.onTeamChanged();&#13;
	//         });&#13;
	//     }&#13;
	//     ngOnDestroy() {&#13;
	//         for (let id of this.evntLst) {&#13;
	//             console.log('QueueComponent Unregister event');&#13;
	//             this.evnt.UnRegisterEvent(id);&#13;
	//         }&#13;
	//         if (this.timerId !== null) {&#13;
	//             clearTimeout(this.timerId);&#13;
	//         }&#13;
	//     }&#13;
	//     onAgentInfoChanged(agent: Agent) {&#13;
	//         this.agentLoginId = agent.LoginId;&#13;
	//         this.isSupervisor = agent.Roles.Supervisor;&#13;
	//         this.agentState = agent.State;&#13;
	//     }&#13;
	//     onTeamChanged() {&#13;
	//         let teams = this.sfAppService.Teams;&#13;
	//         this.teams = {};&#13;
	//         this.teamIds = [];&#13;
	//         for (let i = 0; i &lt; teams.length; i++) {&#13;
	//             let team = teams[i];&#13;
	//             if (this.canAddMember(team)) {&#13;
	//                 if (!this.teams.hasOwnProperty(team.TeamId)) {&#13;
	//                     this.teams[team.TeamId] = {&#13;
	//                         Name: team.TeamName,&#13;
	//                         agents: []&#13;
	//                     };&#13;
	//                     this.teamIds.push(team.TeamId);&#13;
	//                 }&#13;
	//                 this.processTeamMember(team);&#13;
	//                 this.teams[team.TeamId].agents.push(team);&#13;
	//             }&#13;
	//         }&#13;
	//         if (this.timerId !== null) {&#13;
	//             clearTimeout(this.timerId);&#13;
	//         }&#13;
	//         this.setTeamTime();&#13;
	//     }&#13;
	//     processTeamMember(agent: TeamAgent) {&#13;
	//         agent.StateChangeTimeText = this.sfAppService.GetElapsedTime(agent.StateChangeTime);&#13;
	//         agent['CanMonitor'] = false;&#13;
	//         agent['CanReady'] = false;&#13;
	//         agent['CanLogout'] = false;&#13;
	//         agent['CanNotReady'] = false;&#13;
	//         agent['CanConsult'] = false;&#13;
	//         agent['CanTransfer'] = false;&#13;
	//         if (agent.LoginId !== this.agentLoginId) {&#13;
	//             if (this.isSupervisor) {&#13;
	//                 if (this.agentState === 'NOT_READY' &amp;&amp; agent.State === 'TALKING') {&#13;
	//                     agent['CanMonitor'] = true;&#13;
	//                 }&#13;
	//                 if (agent.State === 'READY') {&#13;
	//                     agent['CanNotReady'] = true;&#13;
	//                 } else if (agent.State === 'NOT_READY') {&#13;
	//                     agent['CanReady'] = true;&#13;
	//                 }&#13;
	//                 if (agent.State !== 'LOGOUT') {&#13;
	//                     agent['CanLogout'] = true;&#13;
	//                 }&#13;
	//             }&#13;
	//             //Class for call handling            &#13;
	//             if (this.v.IsValidObject(this.activeCall) &amp;&amp; (agent.State === 'READY' || agent.State === 'NOT_READY')) {&#13;
	//                 agent['CanConsult'] = this.activeCall.Actions.CanConsult;&#13;
	//                 agent['CanTransfer'] = this.activeCall.Actions.CanTransferSST;&#13;
	//             }&#13;
	//         }&#13;
	//         return agent;&#13;
	//     }&#13;
	//     canAddMember(agent: TeamAgent): boolean {&#13;
	//         if (this.searchTerm === '') {&#13;
	//             return true;&#13;
	//         }&#13;
	//         let key = this.searchTerm.toLowerCase();&#13;
	//         if (agent.TeamName.toLowerCase().indexOf(key) !== -1 || agent.Extension.toLowerCase().indexOf(key) !== -1 ||&#13;
	//             agent.FirstName.toLowerCase().indexOf(key) !== -1 || agent.LastName.toLowerCase().indexOf(key) !== -1 ||&#13;
	//             agent.LoginId.toLowerCase().indexOf(key) !== -1 || agent.TeamId.toLowerCase().indexOf(key) !== -1 ||&#13;
	//             agent.State.toLowerCase().indexOf(key) !== -1 || (agent.Reason !== null &amp;&amp; (agent.Reason.Label.toLowerCase().indexOf(key) !== -1))) {&#13;
	//             return true;&#13;
	//         }&#13;
	//         return false;&#13;
	//     }&#13;
	//     setTeamTime() {&#13;
	//         for (let t in this.teams) {&#13;
	//             if (this.teams.hasOwnProperty(t)) {&#13;
	//                 let team = this.teams[t];&#13;
	//                 for (let i = 0; i &lt; team.agents.length; i++) {&#13;
	//                     let agent = team.agents[i];&#13;
	//                     agent.StateChangeTimeText = this.sfAppService.GetElapsedTime(agent.StateChangeTime);&#13;
	//                     team.agents[i] = agent;&#13;
	//                 }&#13;
	//             }&#13;
	//         }&#13;
	//         this.timerId = setTimeout(() =&gt; {&#13;
	//             this.setTeamTime();&#13;
	//         }, 5000);&#13;
	//     }&#13;
	//     getStateClass(state): string {&#13;
	//         let cl: string = 'state-dot ';&#13;
	//         if (state === 'LOGOUT') {&#13;
	//             cl += 'grey';&#13;
	//         } else if (state === 'READY') {&#13;
	//             cl += 'green';&#13;
	//         } else if (state === 'NOT_READY') {&#13;
	//             cl += 'red';&#13;
	//         } else {&#13;
	//             cl += 'yellow';&#13;
	//         }&#13;
	//         return cl;&#13;
	//     }&#13;
	//     silentMonitor(extn) {&#13;
	//         console.log('On Silent monitor :', extn);&#13;
	//         this.sfAppService.DoCallAction('SILENTMONITOR', { toAddress: extn });&#13;
	//     }&#13;
	//     agentReady(loginId) {&#13;
	//         this.sfAppService.ChangeTeamAgentState(loginId, 'READY', '');&#13;
	//     }&#13;
	//     agentNotReady(loginId) {&#13;
	//         this.sfAppService.ChangeTeamAgentState(loginId, 'NOT_READY', '');&#13;
	//     }&#13;
	//     logoutAgent(loginId) {&#13;
	//         this.sfAppService.TeamAgentLogout(loginId, '-1');&#13;
	//     }&#13;
	//     getCanDisableButton(btnType, loginId, state): boolean {&#13;
	//         if (loginId === this.agentLoginId) {&#13;
	//             return false;&#13;
	//         }&#13;
	//         return false;&#13;
	//     }&#13;
	//     teamCallAction(callAction: string, extn: string) {&#13;
	//         if (this.v.IsValidObject(this.activeCall) &amp;&amp; (callAction === 'CONSULT' || callAction === 'SST')) {&#13;
	//             this.sfAppService.DoCallAction(callAction, { callId: this.activeCall.Id, toAddress: extn });&#13;
	//         }&#13;
	//     }&#13;
	// }&#13;
	/******************************* */&#13;
	var core_1 = __webpack_require__(1);&#13;
	var app_service_1 = __webpack_require__(58);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var logger_1 = __webpack_require__(63);&#13;
	var TeamInfoComponent = (function () {&#13;
	    function TeamInfoComponent(sfAppService, zone) {&#13;
	        this.sfAppService = sfAppService;&#13;
	        this.zone = zone;&#13;
	        //Subscribe to queue information&#13;
	        this.logger = new logger_1.CustomLogger('teamInfo');&#13;
	        this.teams = {};&#13;
	        this.teamIds = [];&#13;
	        this.searchTerm = '';&#13;
	        this.agentLoginId = '';&#13;
	        this.agentState = '';&#13;
	        this.isSupervisor = false;&#13;
	        this.isUccx = false;&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.v = new validation_1.Validation();&#13;
	        this.evntLst = new Array();&#13;
	        this.timerId = null;&#13;
	        this.activeCall = null;&#13;
	        this.teamDetails = '';&#13;
	        this.isActive = false;&#13;
	    }&#13;
	    TeamInfoComponent.prototype.ngOnInit = function () {&#13;
	    };&#13;
	    TeamInfoComponent.prototype.ngOnDestroy = function () {&#13;
	    };&#13;
	    TeamInfoComponent = __decorate([&#13;
	        core_1.Component({&#13;
	            selector: 'team-info',&#13;
	            template: __webpack_require__(121),&#13;
	            styles: [__webpack_require__(122)]&#13;
	        }), &#13;
	        __metadata('design:paramtypes', [(typeof (_a = typeof app_service_1.SFAppService !== 'undefined' &amp;&amp; app_service_1.SFAppService) === 'function' &amp;&amp; _a) || Object, (typeof (_b = typeof core_1.NgZone !== 'undefined' &amp;&amp; core_1.NgZone) === 'function' &amp;&amp; _b) || Object])&#13;
	    ], TeamInfoComponent);&#13;
	    return TeamInfoComponent;&#13;
	    var _a, _b;&#13;
	}());&#13;
	exports.TeamInfoComponent = TeamInfoComponent;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 121 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "&lt;div *ngIf=\"isUccx === true\" class=\"panel sub-tab team-panel\"&gt;\r\n    &lt;h4 class=\"panel-title\"&gt;\r\n        &lt;div class=\"row info-title\"&gt;\r\n            &lt;div class=\"col-xs-12\"&gt;Teams&lt;/div&gt;\r\n        &lt;/div&gt;\r\n        &lt;div class=\"form-group search-box \"&gt;\r\n            &lt;label for=\"searchTeam\" class=\"pull-xs-right\"&gt;&lt;span class=\"icon-search\"&gt;&lt;/span&gt;&lt;/label&gt;\r\n            &lt;input *ngIf=\"!isActive;\" type=\"text\" class=\"form-control form-control-sm\" [(ngModel)]=\"searchTerm\" (ngModelChange)=\"onAllAgent()\" id=\"searchTeam\" placeholder=\"Search Team\"&gt;\r\n            &lt;input *ngIf=\"isActive;\" type=\"text\" class=\"form-control form-control-sm\" [(ngModel)]=\"searchTerm\" (ngModelChange)=\"onActiveAgent('LOGOUT')\" id=\"searchTeam\" placeholder=\"Search Team\"&gt;\r\n        &lt;/div&gt;\r\n    &lt;/h4&gt;\r\n\r\n    &lt;div class=\"team-panel\"&gt;\r\n        &lt;label class=\"agent-btn\" [ngClass]=\"{ 'active': isActive == false }\" (click)=\"onAllAgent()\"&gt;\r\n            &lt;span class=\"pull-left\"&gt;All Agent&lt;/span&gt;\r\n        &lt;/label&gt;\r\n\r\n        &lt;label class=\"agent-btn\" [ngClass]=\"{ 'active': isActive == true}\" (click)=\"onActiveAgent('LOGOUT')\"&gt;\r\n            &lt;span class=\"pull-right\"&gt;Active Agent&lt;/span&gt;\r\n        &lt;/label&gt;\r\n    &lt;/div&gt;\r\n\r\n    &lt;ngb-accordion #acc=\"ngbAccordion\" activeIds=\"{{teamIds.length === 1 ? '1' : ''}}\"&gt;\r\n        &lt;ngb-panel *ngFor=\"let id of teamIds; let i = index;\" id=\"{{i+1}}\" title=\"{{teams[id].Name}}\"&gt;\r\n            &lt;template ngbPanelContent&gt;\r\n                &lt;ul class=\"list-unstyled team-list clearfix\"&gt;\r\n                    &lt;li *ngFor=\"let agent of teams[id].agents\" class=\"clearfix\" [ngClass]=\"{'clearfix': true}\"&gt;\r\n                        &lt;span [ngClass]=\"getStateClass(agent.State)\"&gt;&lt;/span&gt; &lt;span class=\"team-users\"&gt;{{agent.FirstName + ' ' + agent.LastName}}&lt;/span&gt;\r\n                        &lt;small class=\"text-muted state-time pull-left\"&gt;{{agent.StateChangeTimeText}}&lt;/small&gt;\r\n                        &lt;span class=\"team-user-extn\" *ngIf=\"agent.Extension\"&gt;&lt;span class=\"icon-extension\"&gt;&lt;/span&gt; {{agent.Extension}}&lt;/span&gt;\r\n                        &lt;ul class=\"list-inline action-btns\"&gt;\r\n                            &lt;div *ngIf=\"isSupervisor\"&gt;\r\n                                &lt;li class=\"list-inline-item\"&gt;&lt;button [ngClass]=\"{'btn': true, ' btn-sm': true, 'btn-secondary': true, 'disabled': !agent.CanMonitor}\" (click)=\"agent.CanMonitor &amp;&amp; silentMonitor(agent.Extension)\"&gt;&lt;span class=\"icon-monitor\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;\r\n                                &lt;li class=\"list-inline-item\"&gt;&lt;button [ngClass]=\"{'btn': true, ' btn-sm': true, 'btn-success': true, 'disabled': !agent.CanReady}\" (click)=\"agent.CanReady &amp;&amp; agentReady(agent.LoginId)\"&gt;&lt;span class=\"icon-checked\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;\r\n                                &lt;li class=\"list-inline-item\"&gt;&lt;button [ngClass]=\"{'btn': true, ' btn-sm': true, 'btn-danger': true, 'disabled': !agent.CanNotReady}\" (click)=\"agent.CanNotReady &amp;&amp; agentNotReady(agent.LoginId)\"&gt;&lt;span class=\"icon-cancel\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;\r\n                                &lt;li class=\"list-inline-item\"&gt;&lt;button [ngClass]=\"{'btn': true, ' btn-sm': true, 'btn-info': true, 'disabled': !agent.CanLogout}\" (click)=\"agent.CanLogout &amp;&amp; logoutAgent(agent.LoginId)\"&gt;&lt;span class=\"icon-logout\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;\r\n                            &lt;/div&gt;\r\n                            &lt;div *ngIf=\"!isSupervisor\"&gt;\r\n                                &lt;li class=\"list-inline-item\" title=\"Consult\"&gt;&lt;button [ngClass]=\"{'btn': true, ' btn-sm': true, 'btn-secondary': true, 'disabled': !agent.CanConsult}\" (click)=\"agent.CanConsult &amp;&amp; teamCallAction('CONSULT',agent.Extension)\"&gt;&lt;span class=\"icon-user-call\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;\r\n                                &lt;li *ngIf=\"isUccx == false\" class=\"list-inline-item\" title=\"Direct Transfer\"&gt;&lt;button [ngClass]=\"{'btn': true, ' btn-sm': true, 'btn-secondary': true, 'disabled': !agent.CanTransfer}\" (click)=\"agent.CanTransfer &amp;&amp; teamCallAction('SST',agent.Extension)\"&gt;&lt;span class=\"icon-call-transfer\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;\r\n                            &lt;/div&gt;\r\n                        &lt;/ul&gt;\r\n                    &lt;/li&gt;\r\n                &lt;/ul&gt;\r\n            &lt;/template&gt;\r\n        &lt;/ngb-panel&gt;\r\n    &lt;/ngb-accordion&gt;\r\n&lt;/div&gt;";&#13;
&#13;
/***/ }),&#13;
/* 122 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "/** Acquone theme**/\n/** Acquone theme end**/\n.team-panel {\n  margin-top: 5px;\n  background-color: transparent;\n  border: 0;\n  padding: 0;\n  height: inherit; }\n  .team-panel .agent-btn {\n    padding: .25rem 0.3rem !important;\n    border-bottom: 2px solid rgba(102, 102, 102, 0.2);\n    cursor: pointer;\n    font-weight: 600;\n    font-size: 12px; }\n  .team-panel .row.info-title {\n    color: #1b5297; }\n\n/** Lightning Theme **/\n.skin-lightning .team-panel .agent-btn.active {\n  border-bottom-color: #004487 !important; }\n\n.skin-classic .team-panel .agent-btn.active {\n  border-bottom-color: #f99b41 !important; }\n\n/** End of Lightning Theme **/\n.team-list {\n  margin-bottom: 0;\n  height: 165px;\n  overflow-x: hidden;\n  overflow-y: auto; }\n  .team-list &gt; li {\n    border-bottom: 1px solid rgba(102, 102, 102, 0.2);\n    padding: 5px;\n    position: relative;\n    transition: all 0.3s ease-in-out;\n    float: left;\n    width: 100%;\n    height: 50px;\n    overflow: hidden; }\n    .team-list &gt; li .state-dot {\n      margin: 5px 5px 0 0; }\n    .team-list &gt; li .team-users {\n      width: 150px;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n      font-weight: 600; }\n    .team-list &gt; li .team-user-extn {\n      font-size: 12px;\n      float: right; }\n    .team-list &gt; li .state-time {\n      padding: 5px 0 0 15px;\n      display: inline-block; }\n    .team-list &gt; li .action-btns {\n      position: absolute;\n      bottom: 5px;\n      padding-left: 15px;\n      visibility: hidden;\n      opacity: 0;\n      left: -100px;\n      transition: all 0.3s ease-in-out; }\n      .team-list &gt; li .action-btns .btn {\n        border-color: #666;\n        text-align: center;\n        padding: 3px 5px;\n        border: 0; }\n    .team-list &gt; li:hover {\n      background-color: #fff; }\n      .team-list &gt; li:hover .action-btns {\n        opacity: 1;\n        left: 0;\n        width: 100%;\n        visibility: visible; }\n      .team-list &gt; li:hover .state-time,\n      .team-list &gt; li:hover .team-user-extn {\n        display: none; }\n    .team-list &gt; li.self:hover .action-btns {\n      display: none; }\n    .team-list &gt; li.self:hover .state-time,\n    .team-list &gt; li.self:hover .team-user-extn {\n      display: block; }\n"&#13;
&#13;
/***/ }),&#13;
/* 123 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var __decorate = (this &amp;&amp; this.__decorate) || function (decorators, target, key, desc) {&#13;
	    var c = arguments.length, r = c &lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);&#13;
	    else for (var i = decorators.length - 1; i &gt;= 0; i--) if (d = decorators[i]) r = (c &lt; 3 ? d(r) : c &gt; 3 ? d(target, key, r) : d(target, key)) || r;&#13;
	    return c &gt; 3 &amp;&amp; r &amp;&amp; Object.defineProperty(target, key, r), r;&#13;
	};&#13;
	var __metadata = (this &amp;&amp; this.__metadata) || function (k, v) {&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.metadata === "function") return Reflect.metadata(k, v);&#13;
	};&#13;
	var core_1 = __webpack_require__(1);&#13;
	var Models = __webpack_require__(61);&#13;
	var app_service_1 = __webpack_require__(58);&#13;
	var validation_1 = __webpack_require__(60);&#13;
	var logger_1 = __webpack_require__(63);&#13;
	var storage_1 = __webpack_require__(66);&#13;
	var app_config_1 = __webpack_require__(62);&#13;
	var IVRComponent = (function () {&#13;
	    function IVRComponent(sfAppService, zone) {&#13;
	        var _this = this;&#13;
	        this.sfAppService = sfAppService;&#13;
	        this.zone = zone;&#13;
	        this.logger = new logger_1.CustomLogger('IVRComponent');&#13;
	        this.callDetailInfo = null;&#13;
	        this.evnt = validation_1.MessageEvent.getInstance();&#13;
	        this.evntLst = new Array();&#13;
	        this.calls = new Array();&#13;
	        this.activeCall = null;&#13;
	        this.phoneNumber = '';&#13;
	        this.dialpadAction = '';&#13;
	        this.modalRef = null;&#13;
	        this.isActiveBtn = true;&#13;
	        this.dialedIvr = '';&#13;
	        this.isOnBtn = false;&#13;
	        this.callDetail = null;&#13;
	        this.store = storage_1.default.getInstance();&#13;
	        this.successMessage = '';&#13;
	        this.oneTouchMessage = '';&#13;
	        this.messageType = 'success';&#13;
	        this.messageTimer = null;&#13;
	        this.showLoader = false;&#13;
	        this.OneTouchApiUrl = app_config_1.default.OneTouchApiUrl;&#13;
	        this.ivrNumbers = this.sfAppService.ivrConfNumbers;&#13;
	        this.dialedIvr = this.sfAppService.DialedIvrNumber;&#13;
	        //console.log('%c call-ivr-components - constructor() ', 'background:#177778; color:#FFF');&#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.AutoConference, function (event, data) {&#13;
	            _this.zone.run(function () {&#13;
	                if (data != null) {&#13;
	                    _this.callDetailInfo = data;&#13;
	                    _this.isOnBtn = true;&#13;
	                    _this.sfAppService.DoCallAction('CONFERENCE', { callId: _this.callDetailInfo.Id });&#13;
	                }&#13;
	            });&#13;
	        })); //push&#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.IvrButtonStatus, function (event, data) {&#13;
	            _this.zone.run(function () {&#13;
	                if (data != null &amp;&amp; data.AgentState === "ACTIVE" &amp;&amp; data.CallType != null) {&#13;
	                    _this.callDetailInfo = data;&#13;
	                    if (_this.callDetailInfo.IsOutbound === true) {&#13;
	                        _this.isIVRBtnVisible = true;&#13;
	                        _this.isOneTuchBtnVisible = false;&#13;
	                    }&#13;
	                    else if (_this.callDetailInfo.IsOutbound === false) {&#13;
	                        _this.isIVRBtnVisible = true;&#13;
	                        _this.isOneTuchBtnVisible = true;&#13;
	                    }&#13;
	                    else {&#13;
	                        _this.isIVRBtnVisible = false;&#13;
	                        _this.isOneTuchBtnVisible = false;&#13;
	                    }&#13;
	                    var ivrBtnClicked = _this.store.GetData("IsConferenceDone");&#13;
	                    if (ivrBtnClicked == 'true') {&#13;
	                        _this.isOnBtn = true;&#13;
	                    }&#13;
	                    else {&#13;
	                        _this.isOnBtn = false;&#13;
	                    }&#13;
	                }&#13;
	                else {&#13;
	                    _this.isIVRBtnVisible = false;&#13;
	                    _this.isOneTuchBtnVisible = false;&#13;
	                }&#13;
	            });&#13;
	        }));&#13;
	        // this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.IvrButtonStatus, (event: any, data) =&gt; {&#13;
	        //     this.zone.run(() =&gt; {&#13;
	        //         //console.log('%c call-ivr-components - Zone Tirggered ', 'background:#177778; color:#FFF');&#13;
	        //         let ivrbtnState  = this.store.GetData("IsConferenceDone");&#13;
	        //             if (ivrbtnState != null) {                    &#13;
	        //                 this.isOnBtn = (ivrbtnState == 'false' )? true : false;&#13;
	        //             } else {&#13;
	        //                 this.isOnBtn = true;&#13;
	        //             }&#13;
	        //         })&#13;
	        // }))&#13;
	        // this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.CurrentCallDetail, (event: any, data) =&gt; {&#13;
	        //     this.zone.run(() =&gt; {&#13;
	        //         this.calls = this.sfAppService.CallDetails;&#13;
	        //         this.activeCall = data;&#13;
	        //         if(this.calls.length &gt; 0 &amp;&amp; this.activeCall != null){&#13;
	        //             this.isOnBtn = false;&#13;
	        //         }&#13;
	        //     });&#13;
	        // }));&#13;
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.OneTouchCall, function (event, data) {&#13;
	            //console.log('%c Register OneTouch Err', 'color:#AA8000'); &#13;
	            _this.zone.run(function () {&#13;
	                //Set the data to&#13;
	                _this.showLoader = false;&#13;
	                //this.messageType = 'success'; &#13;
	                if (data.Level === Models.Severity.Error) {&#13;
	                    _this.messageType = 'danger';&#13;
	                }&#13;
	                else if (data.Level === Models.Severity.Warn) {&#13;
	                    _this.messageType = 'warning';&#13;
	                }&#13;
	                else if (data.Level === Models.Severity.Info) {&#13;
	                    _this.messageType = 'success';&#13;
	                }&#13;
	                _this.oneTouchMessage = data.Msg;&#13;
	                if (_this.messageTimer !== null) {&#13;
	                    clearTimeout(_this.messageTimer);&#13;
	                    _this.messageTimer = null;&#13;
	                }&#13;
	                _this.messageTimer = setTimeout(function () {&#13;
	                    _this.messageTimer = null;&#13;
	                    _this.oneTouchMessage = '';&#13;
	                }, _this.sfAppService.MessageTimeout);&#13;
	                // if(data.Msg != null &amp;&amp; data.Msg != undefined){&#13;
	                //     this.messageType = 'success';&#13;
	                //     this.oneTouchMessage = data.Msg;&#13;
	                // } else {&#13;
	                //     this.messageType = 'danger';&#13;
	                //     this.oneTouchMessage = data.toString();&#13;
	                // }&#13;
	            });&#13;
	        }));&#13;
	        this.zone.run(function () {&#13;
	            var ivrBtnClicked = _this.store.GetData("IsConferenceDone");&#13;
	            if (ivrBtnClicked == 'true') {&#13;
	                _this.isOnBtn = true;&#13;
	            }&#13;
	            if (_this.sfAppService.Call != undefined &amp;&amp; _this.sfAppService.Call.AgentState === "ACTIVE") {&#13;
	                if (_this.sfAppService.Call.IsOutbound === true) {&#13;
	                    _this.isIVRBtnVisible = true;&#13;
	                    _this.isOneTuchBtnVisible = false;&#13;
	                }&#13;
	                else if (_this.sfAppService.Call.IsOutbound === false) {&#13;
	                    _this.isIVRBtnVisible = true;&#13;
	                    _this.isOneTuchBtnVisible = true;&#13;
	                }&#13;
	                else {&#13;
	                    _this.isIVRBtnVisible = false;&#13;
	                    _this.isOneTuchBtnVisible = false;&#13;
	                }&#13;
	            }&#13;
	        });&#13;
	    }&#13;
	    IVRComponent.prototype.ngOnInit = function () {&#13;
	        //console.log('%c call-ivr-components - ngOnInit() ', 'background:#177778; color:#FFF');&#13;
	    };&#13;
	    IVRComponent.prototype.ngOnDestroy = function () {&#13;
	        //console.log('%c call-ivr-components - ngOnDestroy()', 'background:#177778; color:#FFF');&#13;
	        this.logger.Warn('ngOnDestroy called');&#13;
	        for (var _i = 0, _a = this.evntLst; _i &lt; _a.length; _i++) {&#13;
	            var id = _a[_i];&#13;
	            this.logger.Debug('ngOnDestroy -Unregister event :' + id);&#13;
	            this.evnt.UnRegisterEvent(id);&#13;
	        }&#13;
	    };&#13;
	    IVRComponent.prototype.myConferenceCall = function () {&#13;
	    };&#13;
	    IVRComponent.prototype.makeCallActionIvr = function (phoneNumber) {&#13;
	        console.log('%c call-ivr-components - makeCallAction(phoneNumber : string)', 'background:#177778; color:#FFF');&#13;
	        this.sfAppService.MakeCall(phoneNumber);&#13;
	        //this.sfAppService.ConferenceCall(phoneNumber);&#13;
	        this.store.SetData("IsConferenceDone", 'false');&#13;
	    };&#13;
	    /* One Touch Click Functionality */&#13;
	    IVRComponent.prototype.oneTouchClick = function () {&#13;
	        this.showLoader = true;&#13;
	        this.sfAppService.GetOneTouchResult();&#13;
	    };&#13;
	    IVRComponent.prototype.onOneTouchMsgClose = function () {&#13;
	        if (this.messageTimer !== null) {&#13;
	            clearTimeout(this.messageTimer);&#13;
	            this.messageTimer = null;&#13;
	        }&#13;
	        this.oneTouchMessage = '';&#13;
	        this.messageType = 'success';&#13;
	    };&#13;
	    IVRComponent.prototype.clearModelRef = function (canClose) {&#13;
	        //console.log('%c call-ivr-components - clearModelRef(canClose) ', 'background:#177778; color:#FFF');&#13;
	        this.dialpadAction = '';&#13;
	        if (canClose === true &amp;&amp; this.modalRef !== null) {&#13;
	            console.log('Closing Modal pop up');&#13;
	            this.modalRef.close('CancelCall');&#13;
	        }&#13;
	        this.phoneNumber = '';&#13;
	        this.modalRef = null;&#13;
	    };&#13;
	    IVRComponent = __decorate([&#13;
	        core_1.Component({&#13;
	            selector: 'call-ivr',&#13;
	            template: __webpack_require__(124),&#13;
	            styles: [__webpack_require__(125)]&#13;
	        }), &#13;
	        __metadata('design:paramtypes', [(typeof (_a = typeof app_service_1.SFAppService !== 'undefined' &amp;&amp; app_service_1.SFAppService) === 'function' &amp;&amp; _a) || Object, (typeof (_b = typeof core_1.NgZone !== 'undefined' &amp;&amp; core_1.NgZone) === 'function' &amp;&amp; _b) || Object])&#13;
	    ], IVRComponent);&#13;
	    return IVRComponent;&#13;
	    var _a, _b;&#13;
	}());&#13;
	exports.IVRComponent = IVRComponent;&#13;
&#13;
&#13;
/***/ }),&#13;
/* 124 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = "&lt;div *ngIf=\"isUccx === true\"  class=\"panel info-panel call-ivr-com\"&gt;\r\n    &lt;div class=\"info-records\"&gt;\r\n        &lt;ng-container *ngIf=\"isIVRBtnVisible\"&gt;\r\n            &lt;div class=\"row info-record col-xs-6 col-sm-6\" *ngFor=\"let ivrNumber of ivrNumbers\"&gt;\r\n                &lt;button type=\"button\" [disabled]=\"isOnBtn\" class=\"btn btn-sm btn-secondary\" (click)=\"makeCallActionIvr(ivrNumber.dial)\" ngbTooltip=\"{{ivrNumber.title}}\" placement=\"bottom\"&gt;\r\n                    &lt;span [ngClass]=\"ivrNumber.class\"&gt;&lt;/span&gt;\r\n                    &lt;label&gt;{{ivrNumber.label}} &lt;/label&gt;\r\n                &lt;/button&gt;\r\n            &lt;/div&gt;\r\n\r\n            &lt;div class=\"row\" *ngIf=\"OneTouchApiUrl != '' &amp;&amp; isOneTuchBtnVisible == true\" class=\"row info-record col-xs-12 col-sm-12 apiCallTab\"&gt;\r\n                &lt;div *ngIf=\"isOneTuchBtnVisible\" class=\"col-xs-4 col-sm-4\"&gt;\r\n                    &lt;button type=\"button\" [disabled]=\"isOnBtn\" class=\"btn btn-sm btn-secondary\" (click)=\"oneTouchClick('')\" ngbTooltip=\"OneTouch\" placement=\"bottom\"&gt;\r\n                            &lt;span class=\"icon-ivr5\"&gt;&lt;/span&gt;\r\n                            &lt;label&gt;OneTouch&lt;/label&gt;\r\n                    &lt;/button&gt;\r\n                &lt;/div&gt;\r\n                &lt;div class=\"col-xs-4 col-sm-4\"&gt;&lt;/div&gt;\r\n                &lt;div class=\"col-xs-4 col-sm-4\"&gt;&lt;/div&gt;\r\n            &lt;/div&gt;\r\n        &lt;/ng-container&gt;\r\n    &lt;/div&gt;\r\n&lt;/div&gt;\r\n&lt;ngb-alert class=\"sf-alert animated bounceInUp\" [dismissible]=\"false\" *ngIf=\"oneTouchMessage &amp;&amp; OneTouchApiUrl != '' \" type=\"{{messageType}}\" (close)=\"onOneTouchMsgClose()\"&gt;\r\n    &lt;p&gt;{{ oneTouchMessage }}&lt;/p&gt;\r\n    &lt;p&gt;&lt;button class=\"btn btn-sm btn-warning\" (click)=\"onOneTouchMsgClose()\"&gt;OK&lt;/button&gt;&lt;/p&gt;\r\n&lt;/ngb-alert&gt;\r\n&lt;span *ngIf=\"showLoader\" style=\"display:block;\" class=\"pre-loader\"&gt;&lt;/span&gt;";&#13;
&#13;
/***/ }),&#13;
/* 125 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
	module.exports = ".call-ivr-com .info-records {\n  height: 300px;\n  overflow-y: auto;\n  overflow-x: hidden;\n  padding: 0px 5px; }\n\n.call-ivr-com .info-record:nth-child(odd) {\n  margin-right: 10px; }\n\n.call-ivr-com .apiCallTab {\n  border-top: #0070d2 solid 1px !important;\n  padding: 10px 5px; }\n\n.call-ivr-com .info-record:nth-child(even) {\n  margin-right: 0px; }\n\n.call-ivr-com .row {\n  border: none; }\n\n.call-ivr-com .btn-secondary {\n  border: none;\n  padding: 0px;\n  font-size: 20px; }\n  .call-ivr-com .btn-secondary span {\n    font-size: 20px; }\n  .call-ivr-com .btn-secondary label {\n    font-size: 12px;\n    margin-bottom: 4px;\n    vertical-align: middle;\n    white-space: pre-line;\n    text-align: left; }\n\n.call-ivr-com .btn-secondary:hover {\n  font-size: 20px;\n  border: none;\n  background: #FFF; }\n\n.call-ivr-com .tooltip-inner {\n  border-radius: 0px !important; }\n\n.call-ivr-com .tooltip-inner {\n  max-width: 250px;\n  padding: 3px 8px;\n  color: #fff;\n  text-align: left;\n  background-color: #000;\n  border-radius: .25rem;\n  font-size: 12px; }\n\n.call-ivr-com .tooltip {\n  left: 0px !important; }\n\n.apiCallTab &gt; div {\n  padding-left: 0px; }\n"&#13;
&#13;
/***/ }),&#13;
/* 126 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
	"use strict";&#13;
	var __decorate = (this &amp;&amp; this.__decorate) || function (decorators, target, key, desc) {&#13;
	    var c = arguments.length, r = c &lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);&#13;
	    else for (var i = decorators.length - 1; i &gt;= 0; i--) if (d = decorators[i]) r = (c &lt; 3 ? d(r) : c &gt; 3 ? d(target, key, r) : d(target, key)) || r;&#13;
	    return c &gt; 3 &amp;&amp; r &amp;&amp; Object.defineProperty(target, key, r), r;&#13;
	};&#13;
	var __metadata = (this &amp;&amp; this.__metadata) || function (k, v) {&#13;
	    if (typeof Reflect === "object" &amp;&amp; typeof Reflect.metadata === "function") return Reflect.metadata(k, v);&#13;
	};&#13;
	var core_1 = __webpack_require__(1);&#13;
	var http_1 = __webpack_require__(127);&#13;
	var HttpAjaxService = (function () {&#13;
	    function HttpAjaxService(http) {&#13;
	        this.http = http;&#13;
	        this.headers = new http_1.Headers();&#13;
	        this.headers.append('Accept', 'application/json');&#13;
	        this.headers.append('Content-Type', 'application/json');&#13;
	    }&#13;
	    HttpAjaxService.prototype.post = function (url, request) {&#13;
	        var options = new http_1.RequestOptions({ headers: this.headers });&#13;
	        return this.http.post(url, request, options).toPromise();&#13;
	    };&#13;
	    HttpAjaxService.prototype.get = function (url, request) {&#13;
	        if (request)&#13;
	            url = this.processrequest(url, request);&#13;
	        return this.http.get(url).toPromise();&#13;
	    };&#13;
	    HttpAjaxService.prototype.processrequest = function (url, data) {&#13;
	        var request = "?";&#13;
	        for (var d in data) {&#13;
	            request = request + d + "=" + data[d] + "&amp;";&#13;
	        }&#13;
	        return url + request;&#13;
	    };&#13;
	    HttpAjaxService = __decorate([&#13;
	        core_1.Injectable(), &#13;
	        __metadata('design:paramtypes', [(typeof (_a = typeof http_1.Http !== 'undefined' &amp;&amp; http_1.Http) === 'function' &amp;&amp; _a) || Object])&#13;
	    ], HttpAjaxService);&#13;
	    return HttpAjaxService;&#13;
	    var _a;&#13;
	}());&#13;
	exports.HttpAjaxService = HttpAjaxService;&#13;
&#13;
&#13;
/***/ })&#13;
]);&#13;
//# sourceMappingURL=app.323f89354e75b9ceb245.js.map</script>
        <script_name>app</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-03-05 06:16:49</sys_created_on>
        <sys_id>7f872db4db003300ebcba455ca961934</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>x_317887_amazon.app</sys_name>
        <sys_package display_value="Amazon" source="x_317887_amazon">686765b4db003300ebcba455ca9619c4</sys_package>
        <sys_policy/>
        <sys_scope display_value="Amazon">686765b4db003300ebcba455ca9619c4</sys_scope>
        <sys_update_name>sys_ui_script_7f872db4db003300ebcba455ca961934</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-03-05 06:36:25</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
